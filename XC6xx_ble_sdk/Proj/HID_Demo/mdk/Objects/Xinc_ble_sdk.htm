<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Xinc_ble_sdk.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Xinc_ble_sdk.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Mar 01 15:24:31 2022
<BR><P>
<H3>Maximum Stack Usage =        508 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
att_packet_handler &rArr; att_server_handle_can_send_now &rArr; att_server_process_validated_request &rArr; sm_request_pairing &rArr; sm_send_security_request_for_connection &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[fc]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[19]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">NMI_Handler</a><BR>
 <LI><a href="#[1a]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">HardFault_Handler</a><BR>
 <LI><a href="#[1b]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">MemManage_Handler</a><BR>
 <LI><a href="#[1c]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">BusFault_Handler</a><BR>
 <LI><a href="#[1d]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">UsageFault_Handler</a><BR>
 <LI><a href="#[1e]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">SVC_Handler</a><BR>
 <LI><a href="#[1f]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">DebugMon_Handler</a><BR>
 <LI><a href="#[35]">AES_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">AES_Handler</a><BR>
 <LI><a href="#[130]">HCeg_Generate_Event</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12f]">BTq_Enqueue</a><BR>
 <LI><a href="#[436]">sm_start_calculating_ltk_from_ediv_and_rand</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[426]">sm_run</a><BR>
 <LI><a href="#[3d4]">nrf_log_frontend_dequeue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31c]">nrf_log_frontend_std_0</a><BR>
 <LI><a href="#[c6]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c6]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[35]">AES_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[22]">BLE_Handler</a> from sys_irq.o(i.BLE_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[1c]">BusFault_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[24]">CPR_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[23]">DMAS_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[1f]">DebugMon_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[33]">GADC_Handler</a> from xincx_saadc.o(i.GADC_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[25]">GPIO_Handler</a> from bsp_gpio.o(i.GPIO_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[3c]">HCI_Generic_register_hcit</a> from sys_main.o(i.HCI_Generic_register_hcit) referenced from sys_main.o(i.SYS_Main_Initialise)
 <LI><a href="#[1a]">HardFault_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[2c]">I2C_Handler</a> from xincx_i2c.o(i.I2C_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[31]">KBS_Handler</a> from xc_kbs_event.o(i.KBS_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[9]">LE_LL_Connection_Update_Req</a> from le_link_layer.o(i.LE_LL_Connection_Update_Req) referenced 2 times from le_link_layer.o(.data)
 <LI><a href="#[c]">LE_LL_Enc_Req</a> from le_link_layer.o(i.LE_LL_Enc_Req) referenced 2 times from le_link_layer.o(.data)
 <LI><a href="#[10]">LE_LL_Feature_Req</a> from le_link_layer.o(i.LE_LL_Feature_Req) referenced 2 times from le_link_layer.o(.data)
 <LI><a href="#[11]">LE_LL_Pause_Enc_Req</a> from le_link_layer.o(i.LE_LL_Pause_Enc_Req) referenced 2 times from le_link_layer.o(.data)
 <LI><a href="#[12]">LE_LL_Pause_Enc_Rsp</a> from le_link_layer.o(i.LE_LL_Pause_Enc_Rsp) referenced 2 times from le_link_layer.o(.data)
 <LI><a href="#[14]">LE_LL_Reject_Ind</a> from le_link_layer.o(i.LE_LL_Reject_Ind) referenced 2 times from le_link_layer.o(.data)
 <LI><a href="#[e]">LE_LL_Start_Enc_Rsp</a> from le_link_layer.o(i.LE_LL_Start_Enc_Rsp) referenced 2 times from le_link_layer.o(.data)
 <LI><a href="#[b]">LE_LL_Terminate_Ind</a> from le_link_layer.o(i.LE_LL_Terminate_Ind) referenced 2 times from le_link_layer.o(.data)
 <LI><a href="#[d]">LE_LL_UnSupported_Pdu</a> from le_link_layer.o(i.LE_LL_UnSupported_Pdu) referenced 6 times from le_link_layer.o(.data)
 <LI><a href="#[f]">LE_LL_Unknown_Rsp</a> from le_link_layer.o(i.LE_LL_Unknown_Rsp) referenced 2 times from le_link_layer.o(.data)
 <LI><a href="#[13]">LE_LL_Version_Ind</a> from le_link_layer.o(i.LE_LL_Version_Ind) referenced 2 times from le_link_layer.o(.data)
 <LI><a href="#[a]">LEfreq_Update_Channel_Map_Req</a> from le_frequency.o(i.LEfreq_Update_Channel_Map_Req) referenced 2 times from le_link_layer.o(.data)
 <LI><a href="#[1b]">MemManage_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[19]">NMI_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[20]">PendSV_Handler</a> from app_timer.o(i.PendSV_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[32]">QDEC_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[26]">RTC_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[18]">Reset_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[34]">SIM_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[2f]">SPI0_Handler</a> from nrfx_spim.o(i.SPI0_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[30]">SPI1_Handler</a> from nrfx_spim.o(i.SPI1_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[1e]">SVC_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[21]">SysTick_Handler</a> from bsp_systick.o(i.SysTick_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_xinc.o(i.SystemInit) referenced from startup_xinc.o(.text)
 <LI><a href="#[27]">TIMER0_Handler</a> from bsp_timer.o(i.TIMER0_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[28]">TIMER1_Handler</a> from bsp_timer.o(i.TIMER1_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[29]">TIMER2_Handler</a> from app_timer.o(i.TIMER2_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[2a]">TIMER3_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[15]">TRAhcit_Generic_Dispatcher</a> from tra_hcit.o(i.TRAhcit_Generic_Dispatcher) referenced 2 times from tra_hcit.o(.data)
 <LI><a href="#[2d]">UART0_Handler</a> from bsp_uart.o(i.UART0_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[2e]">UART1_Handler</a> from bsp_uart.o(i.UART1_Handler) referenced from startup_xinc.o(RESET)
 <LI><a href="#[1d]">UsageFault_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[2b]">WDT_Handler</a> from startup_xinc.o(.text) referenced from startup_xinc.o(RESET)
 <LI><a href="#[a0]">_Dispatch_HC_BB_Command</a> from hc_cmd_disp.o(i._Dispatch_HC_BB_Command) referenced from hc_cmd_disp.o(.constdata)
 <LI><a href="#[a1]">_Dispatch_Info_Command</a> from hc_cmd_disp.o(i._Dispatch_Info_Command) referenced from hc_cmd_disp.o(.constdata)
 <LI><a href="#[9d]">_Dispatch_Invalid_OGF_Command</a> from hc_cmd_disp.o(i._Dispatch_Invalid_OGF_Command) referenced 2 times from hc_cmd_disp.o(.constdata)
 <LI><a href="#[a4]">_Dispatch_LE_Command</a> from hc_cmd_disp.o(i._Dispatch_LE_Command) referenced from hc_cmd_disp.o(.constdata)
 <LI><a href="#[9e]">_Dispatch_Link_Control_Command</a> from hc_cmd_disp.o(i._Dispatch_Link_Control_Command) referenced from hc_cmd_disp.o(.constdata)
 <LI><a href="#[9f]">_Dispatch_Link_Policy_Command</a> from hc_cmd_disp.o(i._Dispatch_Link_Policy_Command) referenced from hc_cmd_disp.o(.constdata)
 <LI><a href="#[a2]">_Dispatch_Local_Status_Command</a> from hc_cmd_disp.o(i._Dispatch_Local_Status_Command) referenced from hc_cmd_disp.o(.constdata)
 <LI><a href="#[a3]">_Dispatch_Test_Command</a> from hc_cmd_disp.o(i._Dispatch_Test_Command) referenced from hc_cmd_disp.o(.constdata)
 <LI><a href="#[a5]">__main</a> from __main.o(!!!main) referenced from startup_xinc.o(.text)
 <LI><a href="#[38]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[78]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[3a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[3e]">att_event_packet_handler</a> from att_server.o(i.att_event_packet_handler) referenced from att_server.o(i.att_server_init)
 <LI><a href="#[3d]">att_packet_handler</a> from att_dispatch.o(i.att_packet_handler) referenced from att_dispatch.o(i.att_dispatch_register_server)
 <LI><a href="#[3f]">att_packet_handler</a> from att_server.o(i.att_packet_handler) referenced from att_server.o(i.att_server_init)
 <LI><a href="#[44]">att_packet_handler</a> from btstack.o(i.att_packet_handler) referenced from btstack.o(i.ble_stack_init)
 <LI><a href="#[79]">att_read_callback</a> from main.o(i.att_read_callback) referenced from main.o(.constdata)
 <LI><a href="#[4a]">att_read_callback</a> from ff10_service_server.o(i.att_read_callback) referenced from ff10_service_server.o(i.ff10_service_server_init)
 <LI><a href="#[52]">att_read_callback</a> from hids_device_skyworth.o(i.att_read_callback) referenced from hids_device_skyworth.o(i.hids_device_init)
 <LI><a href="#[40]">att_server_read_callback</a> from att_server.o(i.att_server_read_callback) referenced from att_server.o(i.att_server_init)
 <LI><a href="#[41]">att_server_write_callback</a> from att_server.o(i.att_server_write_callback) referenced from att_server.o(i.att_server_init)
 <LI><a href="#[7a]">att_write_callback</a> from main.o(i.att_write_callback) referenced from main.o(.constdata)
 <LI><a href="#[4b]">att_write_callback</a> from ff10_service_server.o(i.att_write_callback) referenced from ff10_service_server.o(i.ff10_service_server_init)
 <LI><a href="#[53]">att_write_callback</a> from hids_device_skyworth.o(i.att_write_callback) referenced from hids_device_skyworth.o(i.hids_device_init)
 <LI><a href="#[42]">battery_service_read_callback</a> from battery_service_server.o(i.battery_service_read_callback) referenced from battery_service_server.o(i.battery_service_server_init)
 <LI><a href="#[43]">battery_service_write_callback</a> from battery_service_server.o(i.battery_service_write_callback) referenced from battery_service_server.o(i.battery_service_server_init)
 <LI><a href="#[3b]">ble_firmware_exit_lowpower</a> from le_power.o(i.ble_firmware_exit_lowpower) referenced from le_power.o(i.Adv_Enter_LowPower)
 <LI><a href="#[3b]">ble_firmware_exit_lowpower</a> from le_power.o(i.ble_firmware_exit_lowpower) referenced from le_power.o(i.do_Connection_Enter_LowPower)
 <LI><a href="#[45]">btstack_crypto_event_handler</a> from btstack_crypto.o(i.btstack_crypto_event_handler) referenced from btstack_crypto.o(i.btstack_crypto_init)
 <LI><a href="#[50]">btstack_embedded_process</a> from hci_transport_ram.o(i.btstack_embedded_process) referenced from hci_transport_ram.o(i.hci_transport_ram_open)
 <LI><a href="#[8e]">btstack_run_loop_embedded_add_data_source</a> from btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_add_data_source) referenced from btstack_run_loop_embedded.o(.constdata)
 <LI><a href="#[93]">btstack_run_loop_embedded_add_timer</a> from btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_add_timer) referenced from btstack_run_loop_embedded.o(.constdata)
 <LI><a href="#[91]">btstack_run_loop_embedded_disable_data_source_callbacks</a> from btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_disable_data_source_callbacks) referenced from btstack_run_loop_embedded.o(.constdata)
 <LI><a href="#[96]">btstack_run_loop_embedded_dump_timer</a> from btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_dump_timer) referenced from btstack_run_loop_embedded.o(.constdata)
 <LI><a href="#[90]">btstack_run_loop_embedded_enable_data_source_callbacks</a> from btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_enable_data_source_callbacks) referenced from btstack_run_loop_embedded.o(.constdata)
 <LI><a href="#[95]">btstack_run_loop_embedded_execute</a> from btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_execute) referenced from btstack_run_loop_embedded.o(.constdata)
 <LI><a href="#[97]">btstack_run_loop_embedded_get_time_ms</a> from btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_get_time_ms) referenced from btstack_run_loop_embedded.o(.constdata)
 <LI><a href="#[8d]">btstack_run_loop_embedded_init</a> from btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_init) referenced from btstack_run_loop_embedded.o(.constdata)
 <LI><a href="#[8f]">btstack_run_loop_embedded_remove_data_source</a> from btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_remove_data_source) referenced from btstack_run_loop_embedded.o(.constdata)
 <LI><a href="#[94]">btstack_run_loop_embedded_remove_timer</a> from btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_remove_timer) referenced from btstack_run_loop_embedded.o(.constdata)
 <LI><a href="#[92]">btstack_run_loop_embedded_set_timer</a> from btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_set_timer) referenced from btstack_run_loop_embedded.o(.constdata)
 <LI><a href="#[46]">btstack_run_loop_embedded_tick_handler</a> from btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_tick_handler) referenced from btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_init)
 <LI><a href="#[87]">cli_uart_enable</a> from nrf_cli_uart.o(i.cli_uart_enable) referenced from nrf_cli_uart.o(.constdata)
 <LI><a href="#[85]">cli_uart_init</a> from nrf_cli_uart.o(i.cli_uart_init) referenced from nrf_cli_uart.o(.constdata)
 <LI><a href="#[89]">cli_uart_read</a> from nrf_cli_uart.o(i.cli_uart_read) referenced from nrf_cli_uart.o(.constdata)
 <LI><a href="#[86]">cli_uart_uninit</a> from nrf_cli_uart.o(i.cli_uart_uninit) referenced from nrf_cli_uart.o(.constdata)
 <LI><a href="#[88]">cli_uart_write</a> from nrf_cli_uart.o(i.cli_uart_write) referenced from nrf_cli_uart.o(.constdata)
 <LI><a href="#[82]">cmd_app_size</a> from cli_utils_cmds.o(i.cmd_app_size) referenced from cli_utils_cmds.o(.constdata)
 <LI><a href="#[81]">cmd_error</a> from cli_utils_cmds.o(i.cmd_error) referenced from cli_utils_cmds.o(.constdata)
 <LI><a href="#[83]">cmd_log_msg_error</a> from cli_utils_cmds.o(i.cmd_log_msg_error) referenced from cli_utils_cmds.o(.constdata)
 <LI><a href="#[84]">cmd_log_msg_warning</a> from cli_utils_cmds.o(i.cmd_log_msg_warning) referenced from cli_utils_cmds.o(.constdata)
 <LI><a href="#[80]">cmd_reset</a> from cli_utils_cmds.o(i.cmd_reset) referenced from cli_utils_cmds.o(.constdata)
 <LI><a href="#[49]">device_information_service_read_callback</a> from device_information_service_server.o(i.device_information_service_read_callback) referenced from device_information_service_server.o(i.device_information_service_server_init)
 <LI><a href="#[8]">dummy_handler</a> from btstack_tick.o(i.dummy_handler) referenced 4 times from btstack_tick.o(.data)
 <LI><a href="#[8]">dummy_handler</a> from btstack_tick.o(i.dummy_handler) referenced from btstack_tick.o(i.hal_tick_set_handler)
 <LI><a href="#[4c]">ff11_can_send_now</a> from ff10_service_server.o(i.ff11_can_send_now) referenced from ff10_service_server.o(i.ff11_char_send_report)
 <LI><a href="#[39]">fputc</a> from bsp_retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[17]">fs_event_handler</a> from fds.o(i.fs_event_handler) referenced 2 times from fds.o(fs_data)
 <LI><a href="#[4f]">hci_halting_timeout_handler</a> from hci.o(i.hci_halting_timeout_handler) referenced from hci.o(i.hci_run)
 <LI><a href="#[4e]">hci_initialization_timeout_handler</a> from hci.o(i.hci_initialization_timeout_handler) referenced from hci.o(i.hci_initializing_run)
 <LI><a href="#[9b]">hci_transport_ram_can_send_now</a> from hci_transport_ram.o(i.hci_transport_ram_can_send_now) referenced from hci_transport_ram.o(.constdata)
 <LI><a href="#[99]">hci_transport_ram_close</a> from hci_transport_ram.o(i.hci_transport_ram_close) referenced from hci_transport_ram.o(.constdata)
 <LI><a href="#[98]">hci_transport_ram_open</a> from hci_transport_ram.o(i.hci_transport_ram_open) referenced from hci_transport_ram.o(.constdata)
 <LI><a href="#[51]">hci_transport_ram_receive_packet</a> from hci_transport_ram.o(i.hci_transport_ram_receive_packet) referenced from hci_transport_ram.o(i.hci_transport_ram_open)
 <LI><a href="#[9a]">hci_transport_ram_register_packet_handler</a> from hci_transport_ram.o(i.hci_transport_ram_register_packet_handler) referenced from hci_transport_ram.o(.constdata)
 <LI><a href="#[9c]">hci_transport_ram_send_packet</a> from hci_transport_ram.o(i.hci_transport_ram_send_packet) referenced from hci_transport_ram.o(.constdata)
 <LI><a href="#[54]">hids_device_can_send_now</a> from hids_device_skyworth.o(i.hids_device_can_send_now) referenced from hids_device_skyworth.o(i.hids_device_request_can_send_now_event)
 <LI><a href="#[55]">hids_device_voice_can_send_now</a> from hids_device_skyworth.o(i.hids_device_voice_can_send_now) referenced from hids_device_skyworth.o(i.hids_device_request_voice_can_send_now_event)
 <LI><a href="#[56]">key_event_process</a> from xc_kbs_event.o(i.key_event_process) referenced from xc_kbs_event.o(i.kbs_key_event_push)
 <LI><a href="#[58]">l2cap_acl_handler</a> from l2cap.o(i.l2cap_acl_handler) referenced from l2cap.o(i.l2cap_init)
 <LI><a href="#[57]">l2cap_hci_event_handler</a> from l2cap.o(i.l2cap_hci_event_handler) referenced from l2cap.o(i.l2cap_init)
 <LI><a href="#[7e]">nrf_cli_cmd_led</a> from app_cli.o(i.nrf_cli_cmd_led) referenced from app_cli.o(.constdata)
 <LI><a href="#[7c]">nrf_cli_cmd_led_off</a> from app_cli.o(i.nrf_cli_cmd_led_off) referenced from app_cli.o(.constdata)
 <LI><a href="#[7d]">nrf_cli_cmd_led_on</a> from app_cli.o(i.nrf_cli_cmd_led_on) referenced from app_cli.o(.constdata)
 <LI><a href="#[7f]">nrf_cli_cmd_xinc</a> from app_cli.o(i.nrf_cli_cmd_xinc) referenced from app_cli.o(.constdata)
 <LI><a href="#[7]">nrf_cli_print_stream</a> from nrf_cli.o(i.nrf_cli_print_stream) referenced 2 times from main.o(.data)
 <LI><a href="#[8c]">nrf_log_backend_uart_flush</a> from nrf_log_backend_uart.o(i.nrf_log_backend_uart_flush) referenced from nrf_log_backend_uart.o(.constdata)
 <LI><a href="#[8b]">nrf_log_backend_uart_panic_set</a> from nrf_log_backend_uart.o(i.nrf_log_backend_uart_panic_set) referenced from nrf_log_backend_uart.o(.constdata)
 <LI><a href="#[8a]">nrf_log_backend_uart_put</a> from nrf_log_backend_uart.o(i.nrf_log_backend_uart_put) referenced from nrf_log_backend_uart.o(.constdata)
 <LI><a href="#[7b]">packet_handler</a> from main.o(i.packet_handler) referenced from main.o(.constdata)
 <LI><a href="#[4d]">packet_handler</a> from hci.o(i.packet_handler) referenced from hci.o(i.hci_init)
 <LI><a href="#[59]">packet_handler</a> from skyworth_rc_demo.o(i.packet_handler) referenced from skyworth_rc_demo.o(i.le_keyboard_setup)
 <LI><a href="#[5d]">saadc_callback</a> from main.o(i.saadc_callback) referenced from main.o(i.saadc_init)
 <LI><a href="#[5c]">serial_tx</a> from nrf_log_backend_uart.o(i.serial_tx) referenced from nrf_log_backend_uart.o(i.nrf_log_backend_uart_put)
 <LI><a href="#[67]">sm_event_packet_handler</a> from sm.o(i.sm_event_packet_handler) referenced from sm.o(i.sm_init)
 <LI><a href="#[6e]">sm_handle_encryption_result_address_resolution</a> from sm.o(i.sm_handle_encryption_result_address_resolution) referenced from sm.o(i.sm_run)
 <LI><a href="#[6b]">sm_handle_encryption_result_dkg_dhk</a> from sm.o(i.sm_handle_encryption_result_dkg_dhk) referenced from sm.o(i.sm_run)
 <LI><a href="#[6a]">sm_handle_encryption_result_dkg_irk</a> from sm.o(i.sm_handle_encryption_result_dkg_irk) referenced from sm.o(i.sm_run)
 <LI><a href="#[70]">sm_handle_encryption_result_enc_a</a> from sm.o(i.sm_handle_encryption_result_enc_a) referenced from sm.o(i.sm_run)
 <LI><a href="#[60]">sm_handle_encryption_result_enc_b</a> from sm.o(i.sm_handle_encryption_result_enc_b) referenced from sm.o(i.sm_handle_encryption_result_enc_a)
 <LI><a href="#[71]">sm_handle_encryption_result_enc_c</a> from sm.o(i.sm_handle_encryption_result_enc_c) referenced from sm.o(i.sm_run)
 <LI><a href="#[62]">sm_handle_encryption_result_enc_csrk</a> from sm.o(i.sm_handle_encryption_result_enc_csrk) referenced from sm.o(i.sm_handle_encryption_result_enc_ph3_ltk)
 <LI><a href="#[61]">sm_handle_encryption_result_enc_d</a> from sm.o(i.sm_handle_encryption_result_enc_d) referenced from sm.o(i.sm_handle_encryption_result_enc_c)
 <LI><a href="#[63]">sm_handle_encryption_result_enc_ph3_ltk</a> from sm.o(i.sm_handle_encryption_result_enc_ph3_ltk) referenced from sm.o(i.sm_handle_encryption_result_enc_ph3_y)
 <LI><a href="#[73]">sm_handle_encryption_result_enc_ph3_y</a> from sm.o(i.sm_handle_encryption_result_enc_ph3_y) referenced from sm.o(i.sm_run)
 <LI><a href="#[64]">sm_handle_encryption_result_enc_ph4_ltk</a> from sm.o(i.sm_handle_encryption_result_enc_ph4_ltk) referenced from sm.o(i.sm_handle_encryption_result_enc_ph4_y)
 <LI><a href="#[74]">sm_handle_encryption_result_enc_ph4_y</a> from sm.o(i.sm_handle_encryption_result_enc_ph4_y) referenced from sm.o(i.sm_run)
 <LI><a href="#[72]">sm_handle_encryption_result_enc_stk</a> from sm.o(i.sm_handle_encryption_result_enc_stk) referenced from sm.o(i.sm_run)
 <LI><a href="#[6d]">sm_handle_encryption_result_rau</a> from sm.o(i.sm_handle_encryption_result_rau) referenced from sm.o(i.sm_run)
 <LI><a href="#[5e]">sm_handle_random_result_er</a> from sm.o(i.sm_handle_random_result_er) referenced from sm.o(i.sm_event_packet_handler)
 <LI><a href="#[65]">sm_handle_random_result_ir</a> from sm.o(i.sm_handle_random_result_ir) referenced from sm.o(i.sm_handle_random_result_er)
 <LI><a href="#[69]">sm_handle_random_result_ph2_random</a> from sm.o(i.sm_handle_random_result_ph2_random) referenced from sm.o(i.sm_just_works_confirm)
 <LI><a href="#[69]">sm_handle_random_result_ph2_random</a> from sm.o(i.sm_handle_random_result_ph2_random) referenced from sm.o(i.sm_pdu_handler)
 <LI><a href="#[6f]">sm_handle_random_result_ph2_tk</a> from sm.o(i.sm_handle_random_result_ph2_tk) referenced from sm.o(i.sm_run)
 <LI><a href="#[66]">sm_handle_random_result_ph3_div</a> from sm.o(i.sm_handle_random_result_ph3_div) referenced from sm.o(i.sm_handle_random_result_ph3_random)
 <LI><a href="#[5f]">sm_handle_random_result_ph3_random</a> from sm.o(i.sm_handle_random_result_ph3_random) referenced from sm.o(i.sm_event_packet_handler)
 <LI><a href="#[6c]">sm_handle_random_result_rau</a> from sm.o(i.sm_handle_random_result_rau) referenced from sm.o(i.sm_run)
 <LI><a href="#[68]">sm_pdu_handler</a> from sm.o(i.sm_pdu_handler) referenced from sm.o(i.sm_init)
 <LI><a href="#[75]">sm_timeout_handler</a> from sm.o(i.sm_timeout_handler) referenced from sm.o(i.sm_timeout_start)
 <LI><a href="#[5a]">system_run_timer_handler</a> from main.o(i.system_run_timer_handler) referenced from main.o(i.main)
 <LI><a href="#[76]">timeout_handler_scheduled_exec</a> from app_timer.o(i.timeout_handler_scheduled_exec) referenced from app_timer.o(i.timer_timeouts_check)
 <LI><a href="#[47]">timer_handler</a> from nrf_cli_uart.o(i.timer_handler) referenced from nrf_cli_uart.o(i.cli_uart_enable)
 <LI><a href="#[48]">uart_event_handler</a> from nrf_cli_uart.o(i.uart_event_handler) referenced from nrf_cli_uart.o(i.cli_uart_init)
 <LI><a href="#[5b]">uart_evt_handler</a> from nrf_drv_uart.o(i.uart_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[77]">uart_evt_handler</a> from nrf_log_backend_uart.o(i.uart_evt_handler) referenced from nrf_log_backend_uart.o(i.uart_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a5]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a7]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[a9]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[450]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[451]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[aa]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[452]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[d4]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[ab]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_f &rArr; _printf_d &rArr; _printf_u &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[ac]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_d &rArr; _printf_u &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[ae]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[b0]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[b2]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[b3]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[b5]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[bf]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[453]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[454]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[455]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[456]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[457]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[458]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[459]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[45a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[45b]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[45c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[45d]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[45e]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[45f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[460]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[461]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[462]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[463]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[464]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[465]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[466]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[467]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[c4]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[468]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[469]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[46a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[46b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[46c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[46d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[46e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[a8]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[46f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[bc]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[be]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[470]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[c0]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ble_mainloop &rArr; ble_linklayer_schedule &rArr; BTms_Sched &rArr; LE_LL_Check_For_Pending_Connection_Completes &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[471]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[fe]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c3]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[472]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[c5]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sky_keyEvt_can_send_now
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_irq_handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Decode_Advertising_ChannelPDU
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[473]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[18]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>AES_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CPR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMAS_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>QDEC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RTC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SIM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>WDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xinc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_xinc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[474]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[475]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Calibrate
</UL>

<P><STRONG><a name="[476]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xincx_saadc_channel_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_callback
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retarget_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_xinc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_led_on
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_led_off
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_led
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_media_report
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keyboard_report
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sky_keyEvt_can_send_now
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_send_media_report
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff10_service_server_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_error
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_alloc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_enable
</UL>

<P><STRONG><a name="[cb]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[cc]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[ca]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b1]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[d1]"></a>_printf_longlong_hex</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[b4]"></a>_printf_int_hex</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[ad]"></a>_printf_hex_ptr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[d2]"></a>__printf</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[27b]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_get_handle_range_for_service_with_uuid16
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_get_handle_range_for_service_with_uuid128
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_key_distribution_handle_all_received
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_d
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_address_resolution
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Bluetooth_Base_UUID
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_find_by_type_value_request2
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_match_uuid
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_bd_addr_and_type
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_replace_bd_addr_placeholder
</UL>

<P><STRONG><a name="[317]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbit
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w_regbit
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_create_from_template
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_information_service_read_callback
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_emit_event_with_buff
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback_handle_blob
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_ring_buffer_write
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_ring_buffer_read
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_put
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_get
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connectionless
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertisements_set_params
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_local_bd_addr
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_le_get_own_address
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start_calculating_ltk_from_ediv_and_rand
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdu_handler
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init_setup
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_rau
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_dm_r_prime
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1_t3
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah_r_prime
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_address_resolution_start_lookup
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_info
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_encryption_set
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_add
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_packet_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_handle_value
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_group_type_request2
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_prepare_write_request
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_find_information_request2
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_copy_value
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_le_signaling_handler_dispatch
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_run
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_create_from_template
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_connection_parameter_range
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_replace_bd_addr_placeholder
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_handler
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_addr_copy
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_create_signaling_internal
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_run
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_event_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_start
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_handle_encryption_result
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_ccm_setup_a_i
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_transport_ram_send_packet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_transport_ram_receive_packet
</UL>

<P><STRONG><a name="[477]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__aeabi_memmove4</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rt_memmove.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[478]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__aeabi_memmove</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rt_memmove.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[479]"></a>__rt_memmove</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[db]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[da]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff10_service_server_init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_dm_r_prime
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_d1_d_prime
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah_r_prime
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_create_from_template
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_state_reset
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_hci_connection_get
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_start
</UL>

<P><STRONG><a name="[47a]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff10_service_server_init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Decrypt_Incoming_Pdu
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_HW_aes_encrypt_128
</UL>

<P><STRONG><a name="[47b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[327]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[3c8]"></a>__aeabi_uread4</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_32
</UL>

<P><STRONG><a name="[47c]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[47d]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_packet
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_line_cmd
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_in_empty_line
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_data_average
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Get_Next_Data_Channel_Frequency
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Determine_Window_Widening_In_Frames
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Exit_LowPower
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_ms
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Calibrate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Calibrate_
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_ticks_for_ms
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_sleep_clk
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calib_finish
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calib_find_count
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Connection_Update_Req
</UL>

<P><STRONG><a name="[47e]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[47f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[480]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[481]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
</UL>

<P><STRONG><a name="[df]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[de]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[339]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calib_finish
</UL>

<P><STRONG><a name="[482]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[483]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_callback
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calib_finish
</UL>

<P><STRONG><a name="[484]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_callback
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calib_finish
</UL>

<P><STRONG><a name="[485]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[412]"></a>__ARM_scalbn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_callback
</UL>

<P><STRONG><a name="[336]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
</UL>

<P><STRONG><a name="[486]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[335]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
</UL>

<P><STRONG><a name="[e4]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[e3]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[33c]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
</UL>

<P><STRONG><a name="[487]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[488]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
</UL>

<P><STRONG><a name="[489]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[d0]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[48a]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[f0]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[f2]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b6]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[c9]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[cf]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[48b]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[48c]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f3]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[ef]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[e9]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ea]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ec]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f8]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[eb]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[fa]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>

<P><STRONG><a name="[bd]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[c2]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[48d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[48e]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>Adv_Enter_LowPower</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, le_power.o(i.Adv_Enter_LowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Adv_Enter_LowPower &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Register_Callback
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_use_lf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_sleep_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
</UL>

<P><STRONG><a name="[105]"></a>Adv_Exit_LowPower</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, le_power.o(i.Adv_Exit_LowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adv_Exit_LowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_disable
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_use_lf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_sleep_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_firmware_exit_lowpower
</UL>

<P><STRONG><a name="[22]"></a>BLE_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_irq.o(i.BLE_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = BLE_Handler &rArr; LSLCirq_IRQ_Handler &rArr; LE_LL_Ctrl_Handle_LE_IRQ &rArr; LE_LL_Ctrl_Handle_Connection_Event &rArr; _LEconnection_Close_Connection_Event &rArr; LEconnection_Connection_Update &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>BT_Initialise</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, bt_init.o(i.BT_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BT_Initialise &rArr; HWradio_Initialise &rArr; _HWradio_Go_To_Idle_State &rArr; rf_init &rArr; le_rf_init &rArr; ble_rccali &rArr; wbit &rArr; fpga_spi_write &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Reset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Initialise
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Initialise
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Initialise
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Calibrate
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWlc_Initialise
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_bt_clk
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Initialise
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Initialise
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_ble_sleep
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Initialise
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Initialise
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Seed_Rand
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSpwr_Initialise
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSmmap_Map_BlueStream
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSinit_Initialise
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LM_Initialise
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Main_Initialise
</UL>

<P><STRONG><a name="[211]"></a>BTaddr_Build_Sync_Word</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, bt_addr_sync.o(i.BTaddr_Build_Sync_Word))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BTaddr_Build_Sync_Word
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Initialise
</UL>

<P><STRONG><a name="[21c]"></a>BTms_Request_HC_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_mini_sched.o(i.BTms_Request_HC_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[11b]"></a>BTms_Sched</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, bt_mini_sched.o(i.BTms_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = BTms_Sched &rArr; LE_LL_Check_For_Pending_Connection_Completes &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Data_To_Encrypt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_And_Clear_Tabasco_Intr
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Check_Timers
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Check_For_Pending_Connection_Completes
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Handle_Host_To_Host_Controller_Flow_Control
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Dispatch_Pending_Event
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Dispatch_Pending_Data
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Command_Dispatcher
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC_Command_Dispatcher
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_linklayer_schedule
</UL>

<P><STRONG><a name="[127]"></a>BTq_Ack_Last_Dequeued</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, tra_queue.o(i.BTq_Ack_Last_Dequeued))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Get_Data_Queue_Ref
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Deallocate_Header
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Decode_DataPDU
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Acknowledge_Complete_Tx
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Command_Dispatcher
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC_Command_Dispatcher
</UL>

<P><STRONG><a name="[12d]"></a>BTq_Commit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tra_queue.o(i.BTq_Commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTq_Commit
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Decode_DataPDU
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnetion_TCI_Read_Hop_Increment
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnetion_TCI_Read_Access_Code
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_TCI_Read_Window_Size_and_Offset
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_TCI_Read_Session_Key
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_TCI_Read_Peer_SCA
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Number_Of_Completed_Packets_Event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_TCI_Read_Advertising_Params
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Commit_Rx_Buf
</UL>

<P><STRONG><a name="[12e]"></a>BTq_Dequeue_Next</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tra_queue.o(i.BTq_Dequeue_Next))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTq_Dequeue_Next
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Get_Data_Queue_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Dispatch_Pending_Event
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Command_Dispatcher
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC_Command_Dispatcher
</UL>

<P><STRONG><a name="[156]"></a>BTq_Dequeue_Next_Data_By_Length</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tra_queue.o(i.BTq_Dequeue_Next_Data_By_Length))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Get_Next_HC_to_Host_Data_Descriptor
</UL>

<P><STRONG><a name="[12f]"></a>BTq_Enqueue</STRONG> (Thumb, 368 bytes, Stack size 96 bytes, tra_queue.o(i.BTq_Enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Get_Data_Queue_Ref
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Allocate_Header
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSatomic_Increment_u_int8
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Decode_DataPDU
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnetion_TCI_Read_Hop_Increment
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnetion_TCI_Read_Access_Code
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_TCI_Read_Window_Size_and_Offset
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_TCI_Read_Session_Key
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_TCI_Read_Peer_SCA
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Number_Of_Completed_Packets_Event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_TCI_Read_Advertising_Params
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Get_Rx_Buf
</UL>

<P><STRONG><a name="[154]"></a>BTq_Get_Queue_Number_Of_Entries</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tra_queue.o(i.BTq_Get_Queue_Number_Of_Entries))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prevent_HCI_Event_Queue_from_Overfill
</UL>

<P><STRONG><a name="[159]"></a>BTq_Get_Queue_Number_Of_Processed_Chunks</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tra_queue.o(i.BTq_Get_Queue_Number_Of_Processed_Chunks))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Handle_Host_To_Host_Controller_Flow_Control
</UL>

<P><STRONG><a name="[133]"></a>BTq_Get_Total_Number_Of_Processed_Chunks</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, tra_queue.o(i.BTq_Get_Total_Number_Of_Processed_Chunks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BTq_Get_Total_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Get_Data_Queue_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Handle_Host_To_Host_Controller_Flow_Control
</UL>

<P><STRONG><a name="[134]"></a>BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tra_queue.o(i.BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Release_All_Data_Queue_Packets
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reset
</UL>

<P><STRONG><a name="[10a]"></a>BTq_Initialise</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tra_queue.o(i.BTq_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BTq_Initialise &rArr; _BTq_Initialise_All_Data_Queues &rArr; BTq_Initialise_Data_Queue_Type
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Initialise_Variable_Chunk_Queue
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Initialise_All_Data_Queues
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[138]"></a>BTq_Initialise_Data_Queue_Type</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, tra_queue.o(i.BTq_Initialise_Data_Queue_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BTq_Initialise_Data_Queue_Type
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Get_Data_Queue_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Initialise_All_Data_Queues
</UL>

<P><STRONG><a name="[187]"></a>BTq_Is_Queue_Empty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tra_queue.o(i.BTq_Is_Queue_Empty))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Acknowledge_Complete_Tx
</UL>

<P><STRONG><a name="[139]"></a>BTq_LE_Dequeue_Next</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tra_queue.o(i.BTq_LE_Dequeue_Next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTq_LE_Dequeue_Next
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Encode_DataPDU
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Data_To_Encrypt
</UL>

<P><STRONG><a name="[135]"></a>BTq_Reduce_Queue_Number_Of_Processed_Chunks</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tra_queue.o(i.BTq_Reduce_Queue_Number_Of_Processed_Chunks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Get_Data_Queue_Ref
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Handle_Host_To_Host_Controller_Flow_Control
</UL>

<P><STRONG><a name="[13a]"></a>BTq_Reset</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, tra_queue.o(i.BTq_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Deallocate_Header
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Initialise_Variable_Chunk_Queue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Initialise_Data_Queue
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Release_All_Data_Queue_Packets
</UL>

<P><STRONG><a name="[13c]"></a>BTtimer_Get_Native_Clock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bt_timer.o(i.BTtimer_Get_Native_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BTtimer_Get_Native_Clock &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Calibrate
</UL>

<P><STRONG><a name="[13d]"></a>BTtimer_Is_Expired</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bt_timer.o(i.BTtimer_Is_Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BTtimer_Is_Expired &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_ms
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Handle_Host_To_Host_Controller_Flow_Control
</UL>

<P><STRONG><a name="[17f]"></a>BTtimer_Is_Expired_For_Time</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bt_timer.o(i.BTtimer_Is_Expired_For_Time))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Check_Timers
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Is_Next_Adv_Due
</UL>

<P><STRONG><a name="[13e]"></a>BTtimer_Set_Slots</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bt_timer.o(i.BTtimer_Set_Slots))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BTtimer_Set_Slots &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Initialise
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Handle_Host_To_Host_Controller_Flow_Control
</UL>

<P><STRONG><a name="[13f]"></a>BTtimer_Set_Ticks</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bt_timer.o(i.BTtimer_Set_Ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BTtimer_Set_Ticks &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Set_Advertise_Enable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Read_Remote_Version_Info
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_ms
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Version_Ind
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Pause_Enc_Rsp
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Pause_Enc_Req
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Enc_Req
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Check_For_Pending_Connection_Completes
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_Long_Term_Key_Request_Reply
</UL>

<P><STRONG><a name="[140]"></a>CPR_CTL</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, sys_main.o(i.CPR_CTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CPR_CTL &rArr; gpio_mux_ctl
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mux_ctl
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_linklayer_init
</UL>

<P><STRONG><a name="[18b]"></a>Connection_Close_LowPower</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, le_power.o(i.Connection_Close_LowPower))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[142]"></a>Connection_Enter_LowPower</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, le_power.o(i.Connection_Enter_LowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Connection_Enter_LowPower &rArr; rc32k_calib_find_count
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calib_find_count
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
</UL>

<P><STRONG><a name="[144]"></a>Connection_Exit_LowPower</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, le_power.o(i.Connection_Exit_LowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Connection_Exit_LowPower &rArr; restore_sleep_clk &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_disable
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_All_Tim_Intr_Except
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_us
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_sleep_clk
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_use_lf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_sleep_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_firmware_exit_lowpower
</UL>

<P><STRONG><a name="[1d0]"></a>DL_Alloc_Link</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dl_dev_impl.o(i.DL_Alloc_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DL_Alloc_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Init
</UL>

<P><STRONG><a name="[174]"></a>DL_Initialise_All</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dl_dev_impl.o(i.DL_Initialise_All))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
</UL>

<P><STRONG><a name="[33]"></a>GADC_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, xincx_saadc.o(i.GADC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GADC_Handler &rArr; xincx_saadc_irq_handler &rArr; fix_data_average
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xincx_saadc_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>GPIO_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_gpio.o(i.GPIO_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Handler &rArr; nrfx_gpiote_irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>HCI_Generic_register_hcit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_main.o(i.HCI_Generic_register_hcit))
<BR>[Address Reference Count : 1]<UL><LI> sys_main.o(i.SYS_Main_Initialise)
</UL>
<P><STRONG><a name="[122]"></a>HC_Command_Dispatcher</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, hc_cmd_disp.o(i.HC_Command_Dispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HC_Command_Dispatcher &rArr; BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Status_Event
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Dequeue_Next
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[125]"></a>HCeg_Command_Complete_Event</STRONG> (Thumb, 940 bytes, Stack size 24 bytes, hc_event_gen.o(i.HCeg_Command_Complete_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint24
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prevent_HCI_Event_Queue_from_Overfill
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Bd_Addr_In_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Info_Command
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[14b]"></a>HCeg_Command_Status_Event</STRONG> (Thumb, 38 bytes, Stack size 72 bytes, hc_event_gen.o(i.HCeg_Command_Status_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HCeg_Command_Status_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prevent_HCI_Event_Queue_from_Overfill
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC_Command_Dispatcher
</UL>

<P><STRONG><a name="[130]"></a>HCeg_Generate_Event</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, hc_event_gen.o(i.HCeg_Generate_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Is_Event_Masked_On
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prevent_HCI_Event_Queue_from_Overfill
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Status_Event
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Version_Ind
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Unknown_Rsp
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Start_Enc_Rsp
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Response_Timeout
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Reject_Ind
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Check_For_Pending_Connection_Completes
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Get_Rx_Buf
</UL>

<P><STRONG><a name="[129]"></a>HCeg_Hardware_Error_Event</STRONG> (Thumb, 30 bytes, Stack size 64 bytes, hc_event_gen.o(i.HCeg_Hardware_Error_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prevent_HCI_Event_Queue_from_Overfill
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Get_Rx_Buf
</UL>

<P><STRONG><a name="[117]"></a>HCeg_Initialise</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc_event_gen.o(i.HCeg_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[152]"></a>HCeg_Is_Event_Masked_On</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hc_event_gen.o(i.HCeg_Is_Event_Masked_On))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
</UL>

<P><STRONG><a name="[153]"></a>HCeg_Number_Of_Completed_Packets_Event</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, hc_event_gen.o(i.HCeg_Number_Of_Completed_Packets_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HCeg_Number_Of_Completed_Packets_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Prevent_HCI_Event_Queue_from_Overfill
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Handle_Host_To_Host_Controller_Flow_Control
</UL>

<P><STRONG><a name="[14c]"></a>HCeg_Prevent_HCI_Event_Queue_from_Overfill</STRONG> (Thumb, 38 bytes, Stack size 64 bytes, hc_event_gen.o(i.HCeg_Prevent_HCI_Event_Queue_from_Overfill))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_Queue_Number_Of_Entries
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Number_Of_Completed_Packets_Event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Status_Event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
</UL>

<P><STRONG><a name="[21e]"></a>HCeg_Set_Event_Mask</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hc_event_gen.o(i.HCeg_Set_Event_Mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCeg_Set_Event_Mask
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[155]"></a>HCfc_Get_Next_HC_to_Host_Data_Descriptor</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hc_flow_control.o(i.HCfc_Get_Next_HC_to_Host_Data_Descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCfc_Get_Next_HC_to_Host_Data_Descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Dequeue_Next_Data_By_Length
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Dispatch_Pending_Data
</UL>

<P><STRONG><a name="[11e]"></a>HCfc_Handle_Host_To_Host_Controller_Flow_Control</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, hc_flow_control.o(i.HCfc_Handle_Host_To_Host_Controller_Flow_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HCfc_Handle_Host_To_Host_Controller_Flow_Control &rArr; HCeg_Number_Of_Completed_Packets_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnections_Link_In_Use
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Link_Entry
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Number_Of_Completed_Packets_Event
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reduce_Queue_Number_Of_Processed_Chunks
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_Total_Number_Of_Processed_Chunks
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_Queue_Number_Of_Processed_Chunks
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[221]"></a>HCfc_Host_Buffer_Size</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hc_flow_control.o(i.HCfc_Host_Buffer_Size))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[220]"></a>HCfc_Host_Number_Of_Completed_Packets</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hc_flow_control.o(i.HCfc_Host_Number_Of_Completed_Packets))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[118]"></a>HCfc_Initialise</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hc_flow_control.o(i.HCfc_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HCfc_Initialise &rArr; BTtimer_Set_Slots &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[15a]"></a>HCfc_Release_All_Data_Queue_Packets</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hc_flow_control.o(i.HCfc_Release_All_Data_Queue_Packets))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HCfc_Release_All_Data_Queue_Packets &rArr; BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Reset_Connection
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Local_Disconnect
</UL>

<P><STRONG><a name="[21f]"></a>HCfc_Set_Host_Controller_To_Host_Flow_Control</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hc_flow_control.o(i.HCfc_Set_Host_Controller_To_Host_Flow_Control))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[193]"></a>HW_Get_Bt_Clk_Avoid_Race</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hw_lc.o(i.HW_Get_Bt_Clk_Avoid_Race))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Update_Next_Slave_Connection_Event_Time
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
</UL>

<P><STRONG><a name="[100]"></a>HW_Get_Native_Clk_Avoid_Race</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hw_lc.o(i.HW_Get_Native_Clk_Avoid_Race))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_us
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Decode_DataPDU
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Setup_First_Connection_Event
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Slots
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Get_Native_Clock
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_sleep_clk
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Check_Timers
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Enter_LowPower
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Set_Next_Advertising_Event_Start_Timer
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Get_Rx_Buf
</UL>

<P><STRONG><a name="[10c]"></a>HW_get_bt_clk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_lc.o(i.HW_get_bt_clk))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[113]"></a>HWdelay_Calibrate</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, hw_delay.o(i.HWdelay_Calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HWdelay_Calibrate &rArr; HWdelay_Wait_For_ms &rArr; BTtimer_Set_Ticks &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_ms
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_10us
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Get_Native_Clock
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[112]"></a>HWdelay_Initialise</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_delay.o(i.HWdelay_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HWdelay_Initialise &rArr; HWdelay_Calibrate_
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Calibrate_
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[15b]"></a>HWdelay_Wait_For_10us</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hw_delay.o(i.HWdelay_Wait_For_10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HWdelay_Wait_For_10us
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Calibrate
</UL>

<P><STRONG><a name="[22e]"></a>HWdelay_Wait_For_Serial_Interface_Busy_us</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hw_delay.o(i.HWdelay_Wait_For_Serial_Interface_Busy_us))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_ProgNow_xinc
</UL>

<P><STRONG><a name="[22d]"></a>HWdelay_Wait_For_Serial_Interface_Idle</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hw_delay.o(i.HWdelay_Wait_For_Serial_Interface_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_ReadNow_xinc
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_ProgNow_xinc
</UL>

<P><STRONG><a name="[15d]"></a>HWdelay_Wait_For_ms</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hw_delay.o(i.HWdelay_Wait_For_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HWdelay_Wait_For_ms &rArr; BTtimer_Set_Ticks &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Calibrate
</UL>

<P><STRONG><a name="[145]"></a>HWdelay_Wait_For_us</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hw_delay.o(i.HWdelay_Wait_For_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HWdelay_Wait_For_us
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_intraslotoffset_compensate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connection_Exit_LowPower
</UL>

<P><STRONG><a name="[10e]"></a>HWlc_Initialise</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, hw_lc.o(i.HWlc_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HWlc_Initialise &rArr; _HWlc_Clear_Jalapeno_Registers
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWlc_Reset
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWlc_Clear_Jalapeno_Registers
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[160]"></a>HWlc_Reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hw_lc.o(i.HWlc_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HWlc_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWjal_Set_Rst_Code
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWlc_Initialise
</UL>

<P><STRONG><a name="[1a4]"></a>HWradio_Convert_Tx_Power_Level_Units_to_Tx_Power</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_Convert_Tx_Power_Level_Units_to_Tx_Power))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Get_Advertising_Channel_Tx_Power
</UL>

<P><STRONG><a name="[170]"></a>HWradio_DisableAllSpiWrites</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_DisableAllSpiWrites))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Ctrl_Handle_Test_Mode_Event
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[111]"></a>HWradio_Initialise</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hw_radio.o(i.HWradio_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HWradio_Initialise &rArr; _HWradio_Go_To_Idle_State &rArr; rf_init &rArr; le_rf_init &rArr; ble_rccali &rArr; wbit &rArr; fpga_spi_write &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_Go_To_Idle_State
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWhab_Init_RF
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWhab_Config_SYM
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWhab_Config_Intr_Ctrl
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWhab_Config_COR
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_SetGios_Standby
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWhab_Set_Rx_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[191]"></a>HWradio_LE_Read_RSSI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_LE_Read_RSSI))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[16a]"></a>HWradio_LE_RxComplete</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hw_radio.o(i.HWradio_LE_RxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HWradio_LE_RxComplete
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWhab_Set_Rx_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Test_Event_Complete
</UL>

<P><STRONG><a name="[16b]"></a>HWradio_LE_Service</STRONG> (Thumb, 902 bytes, Stack size 40 bytes, hw_radio.o(i.HWradio_LE_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HWradio_LE_Service &rArr; ldo_on_debug &rArr; w_regbit &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_WRITE
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo_on_debug
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo_off_debug
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_SetGios_Standby
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_SetGios_LE_TIFS_TxRx
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_SetGios_FullRx
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWhab_Set_Rx_Mode
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_DisableAllSpiWrites
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Scan_Resp_Tx
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Advert_Tx
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Test_Event_Complete
</UL>

<P><STRONG><a name="[1cf]"></a>HWradio_LE_Set_Active_Mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_LE_Set_Active_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
</UL>

<P><STRONG><a name="[185]"></a>HWradio_LE_Setup_Radio_For_Next_TXRX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_LE_Setup_Radio_For_Next_TXRX))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
</UL>

<P><STRONG><a name="[190]"></a>HWradio_LE_TxComplete</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_LE_TxComplete))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[10f]"></a>HWradio_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_radio.o(i.HWradio_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[2c]"></a>I2C_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, xincx_i2c.o(i.I2C_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = I2C_Handler &rArr; xincx_i2c_0_irq_handler &rArr; i2c_irq_handler &rArr; i2c_tx_start_transfer &rArr; i2c_transfer &rArr; i2c_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xincx_i2c_0_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>Init_Timer</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bsp_timer.o(i.Init_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Enter_LowPower
</UL>

<P><STRONG><a name="[3d0]"></a>Init_gpio</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, bsp_gpio.o(i.Init_gpio))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>KBS_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, xc_kbs_event.o(i.KBS_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = KBS_Handler &rArr; xc620_kbs_scan &rArr; kbs_key_event_push &rArr; push_kb_to_ring_buff &rArr; btstack_ring_buffer_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xc620_kbs_scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>LC_Initialise</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lc_interface.o(i.LC_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LC_Initialise &rArr; LEconfig_Init &rArr; LEconnection_Init &rArr; _LEconnection_Reset_Connection &rArr; HCfc_Release_All_Data_Queue_Packets &rArr; BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Initialise_All
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Initialise
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[177]"></a>LE_Connection_Extact_Connection_Req_Parameters</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, le_connection.o(i.LE_Connection_Extact_Connection_Req_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LE_Connection_Extact_Connection_Req_Parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint32
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Decode_Advertising_ChannelPDU
</UL>

<P><STRONG><a name="[17a]"></a>LE_Decode_link_layer_PDU</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, le_link_layer.o(i.LE_Decode_link_layer_PDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LE_Decode_link_layer_PDU &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lmp_pdu_lenth
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Command_Dispatcher
</UL>

<P><STRONG><a name="[121]"></a>LE_LL_Check_For_Pending_Connection_Completes</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, le_link_layer.o(i.LE_LL_Check_For_Pending_Connection_Completes))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = LE_LL_Check_For_Pending_Connection_Completes &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[123]"></a>LE_LL_Check_Timers</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, le_link_layer.o(i.LE_LL_Check_Timers))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LE_LL_Check_Timers &rArr; LEsecurity_Long_Term_Key_Request_Timeout &rArr; LEconnection_Disconnect &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Local_Disconnect
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Link_Entry
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_bt_clk_result
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_Long_Term_Key_Request_Timeout
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Response_Timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[9]"></a>LE_LL_Connection_Update_Req</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, le_link_layer.o(i.LE_LL_Connection_Update_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = LE_LL_Connection_Update_Req &rArr; _LEconnection_Close_Connection_Event &rArr; LEconnection_Connection_Update &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Local_Disconnect
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[184]"></a>LE_LL_Ctrl_Handle_Connection_Event</STRONG> (Thumb, 888 bytes, Stack size 32 bytes, le_connection.o(i.LE_LL_Ctrl_Handle_Connection_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LE_LL_Ctrl_Handle_Connection_Event &rArr; _LEconnection_Close_Connection_Event &rArr; LEconnection_Connection_Update &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Update_Next_Slave_Connection_Event_Time
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_rx_mode
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_All_Tim_Intr_Except
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_TxComplete
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Setup_Radio_For_Next_TXRX
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_RxComplete
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Read_RSSI
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connection_Close_LowPower
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Is_Queue_Empty
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_rx_window_update
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_rx_window_init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Encode_DataPDU
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Determine_Window_Widening_In_Frames
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Decode_DataPDU
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Link_Entry
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
</UL>

<P><STRONG><a name="[192]"></a>LE_LL_Ctrl_Handle_LE_IRQ</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, le_link_layer.o(i.LE_LL_Ctrl_Handle_LE_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = LE_LL_Ctrl_Handle_LE_IRQ &rArr; LE_LL_Ctrl_Handle_Connection_Event &rArr; _LEconnection_Close_Connection_Event &rArr; LEconnection_Connection_Update &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Bt_Clk_Avoid_Race
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Test_Event_Begin
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Ctrl_Handle_Test_Mode_Event
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Is_Next_Adv_Due
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[c]"></a>LE_LL_Enc_Req</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, le_link_layer.o(i.LE_LL_Enc_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = LE_LL_Enc_Req &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Is_Features_Encryption_Supported
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>LE_LL_Feature_Req</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, le_link_layer.o(i.LE_LL_Feature_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LE_LL_Feature_Req &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[19c]"></a>LE_LL_Handle_LLC_Ack</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, le_link_layer.o(i.LE_LL_Handle_LLC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LE_LL_Handle_LLC_Ack &rArr; LEconnection_Local_Disconnect &rArr; HCfc_Release_All_Data_Queue_Packets &rArr; BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Local_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Decode_DataPDU
</UL>

<P><STRONG><a name="[11]"></a>LE_LL_Pause_Enc_Req</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, le_link_layer.o(i.LE_LL_Pause_Enc_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LE_LL_Pause_Enc_Req &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Is_Features_Encryption_Supported
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>LE_LL_Pause_Enc_Rsp</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, le_link_layer.o(i.LE_LL_Pause_Enc_Rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LE_LL_Pause_Enc_Rsp &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>LE_LL_Reject_Ind</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, le_link_layer.o(i.LE_LL_Reject_Ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LE_LL_Reject_Ind &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[181]"></a>LE_LL_Response_Timeout</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, le_link_layer.o(i.LE_LL_Response_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LE_LL_Response_Timeout &rArr; LEconnection_Local_Disconnect &rArr; HCfc_Release_All_Data_Queue_Packets &rArr; BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Local_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Check_Timers
</UL>

<P><STRONG><a name="[1b2]"></a>LE_LL_Set_Adv_Header</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, le_link_layer.o(i.LE_LL_Set_Adv_Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LE_LL_Set_Adv_Header
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Set_Adv_Header
</UL>

<P><STRONG><a name="[e]"></a>LE_LL_Start_Enc_Rsp</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, le_link_layer.o(i.LE_LL_Start_Enc_Rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = LE_LL_Start_Enc_Rsp &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>LE_LL_Terminate_Ind</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, le_link_layer.o(i.LE_LL_Terminate_Ind))
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>LE_LL_UnSupported_Pdu</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, le_link_layer.o(i.LE_LL_UnSupported_Pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LE_LL_UnSupported_Pdu &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>LE_LL_Unknown_Rsp</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, le_link_layer.o(i.LE_LL_Unknown_Rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LE_LL_Unknown_Rsp &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>LE_LL_Version_Ind</STRONG> (Thumb, 170 bytes, Stack size 80 bytes, le_link_layer.o(i.LE_LL_Version_Ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LE_LL_Version_Ind &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[196]"></a>LEadv_Advertising_Event_Begin</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, le_advertise.o(i.LEadv_Advertising_Event_Begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = LEadv_Advertising_Event_Begin &rArr; LEadv_Prep_For_LE_Advert_Tx &rArr; HWradio_LE_Service &rArr; ldo_on_debug &rArr; w_regbit &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_All_Tim_Intr_Except
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Setup_Radio_For_Next_TXRX
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_RxComplete
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Reset_Adv_Frequency
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Advert_Tx
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Set_Next_Advertising_Event_Start_Timer
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_slave
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
</UL>

<P><STRONG><a name="[1e0]"></a>LEadv_Disable_Connectable_Advertising</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, le_advertise.o(i.LEadv_Disable_Connectable_Advertising))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Decode_Advertising_ChannelPDU
</UL>

<P><STRONG><a name="[1e1]"></a>LEadv_Encode_Own_Address_In_Payload</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, le_advertise.o(i.LEadv_Encode_Own_Address_In_Payload))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Encode_Advertising_ChannelPDU
</UL>

<P><STRONG><a name="[1a3]"></a>LEadv_Get_Advertising_Channel_Tx_Power</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, le_advertise.o(i.LEadv_Get_Advertising_Channel_Tx_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEadv_Get_Advertising_Channel_Tx_Power
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Convert_Tx_Power_Level_Units_to_Tx_Power
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[1ff]"></a>LEadv_Get_Advertising_Enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, le_advertise.o(i.LEadv_Get_Advertising_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEwl_Can_I_Modify_White_Lists
</UL>

<P><STRONG><a name="[200]"></a>LEadv_Get_Advertising_Filter_Policy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, le_advertise.o(i.LEadv_Get_Advertising_Filter_Policy))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEwl_Can_I_Modify_White_Lists
</UL>

<P><STRONG><a name="[1db]"></a>LEadv_Get_Direct_Adv_Address</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, le_advertise.o(i.LEadv_Get_Direct_Adv_Address))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
</UL>

<P><STRONG><a name="[1dc]"></a>LEadv_Get_Direct_Adv_Type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, le_advertise.o(i.LEadv_Get_Direct_Adv_Type))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
</UL>

<P><STRONG><a name="[199]"></a>LEadv_Handle_Advertising</STRONG> (Thumb, 566 bytes, Stack size 32 bytes, le_advertise.o(i.LEadv_Handle_Advertising))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LEadv_Handle_Advertising &rArr; _LEadv_Advertising_Event_Complete &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_All_Tim_Intr_Except
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Map_Channel_Index_2_RF_Freq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_RxComplete
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_DisableAllSpiWrites
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_rx_window_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Setup_First_Connection_Event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Link_Entry
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Encode_Advertising_ChannelPDU
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Decode_Advertising_ChannelPDU
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Update_Channel_Remapping_Table
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advance_For_Next_Adv_Tx
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Try_Advance_Adv_Frequency
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Scan_Resp_Tx
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Advert_Tx
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_clear_tx_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_clear_le_spi_only
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_abort_tifs_count
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_slave
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
</UL>

<P><STRONG><a name="[1b8]"></a>LEadv_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, le_advertise.o(i.LEadv_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEadv_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Init
</UL>

<P><STRONG><a name="[195]"></a>LEadv_Is_Next_Adv_Due</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, le_advertise.o(i.LEadv_Is_Next_Adv_Due))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEadv_Is_Next_Adv_Due
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
</UL>

<P><STRONG><a name="[1a1]"></a>LEadv_Prep_For_LE_Advert_Tx</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, le_advertise.o(i.LEadv_Prep_For_LE_Advert_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LEadv_Prep_For_LE_Advert_Tx &rArr; HWradio_LE_Service &rArr; ldo_on_debug &rArr; w_regbit &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Map_Channel_Index_2_RF_Freq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Encode_Advertising_ChannelPDU
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
</UL>

<P><STRONG><a name="[1ab]"></a>LEadv_Prep_For_LE_Scan_Resp_Tx</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, le_advertise.o(i.LEadv_Prep_For_LE_Scan_Resp_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LEadv_Prep_For_LE_Scan_Resp_Tx &rArr; HWradio_LE_Service &rArr; ldo_on_debug &rArr; w_regbit &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Map_Channel_Index_2_RF_Freq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[1a0]"></a>LEadv_Reset_Adv_Frequency</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, le_advertise.o(i.LEadv_Reset_Adv_Frequency))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
</UL>

<P><STRONG><a name="[1b1]"></a>LEadv_Set_Adv_Header</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, le_advertise.o(i.LEadv_Set_Adv_Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEadv_Set_Adv_Header &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Set_Adv_Header
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Encode_Advertising_ChannelPDU
</UL>

<P><STRONG><a name="[1b3]"></a>LEadv_Set_Advertise_Enable</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, le_advertise.o(i.LEadv_Set_Advertise_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LEadv_Set_Advertise_Enable &rArr; _LEadv_Set_Next_Advertising_Event_Start_Timer &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Set_Next_Advertising_Event_Start_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[225]"></a>LEadv_Set_Advertising_Data</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, le_advertise.o(i.LEadv_Set_Advertising_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LEadv_Set_Advertising_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[224]"></a>LEadv_Set_Advertising_Params</STRONG> (Thumb, 202 bytes, Stack size 28 bytes, le_advertise.o(i.LEadv_Set_Advertising_Params))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LEadv_Set_Advertising_Params
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[226]"></a>LEadv_Set_Scan_Response_Data</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, le_advertise.o(i.LEadv_Set_Scan_Response_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LEadv_Set_Scan_Response_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[1b4]"></a>LEadv_TCI_Read_Advertising_Params</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, le_advertise.o(i.LEadv_TCI_Read_Advertising_Params))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LEadv_TCI_Read_Advertising_Params &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[1b5]"></a>LEadv_TCI_Set_Direct_Adv_Timeout</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, le_advertise.o(i.LEadv_TCI_Set_Direct_Adv_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LEadv_TCI_Set_Direct_Adv_Timeout &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[1b7]"></a>LEadv_TCI_Write_Advertising_Delta</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, le_advertise.o(i.LEadv_TCI_Write_Advertising_Delta))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LEadv_TCI_Write_Advertising_Delta &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[1a6]"></a>LEadv_Try_Advance_Adv_Frequency</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, le_advertise.o(i.LEadv_Try_Advance_Adv_Frequency))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[1e2]"></a>LEadv_Write_Adv_Data</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, le_advertise.o(i.LEadv_Write_Adv_Data))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Encode_Advertising_ChannelPDU
</UL>

<P><STRONG><a name="[1e4]"></a>LEadv_Write_Scan_Resp_Data</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, le_advertise.o(i.LEadv_Write_Scan_Resp_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LEadv_Write_Scan_Resp_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Encode_Advertising_ChannelPDU
</UL>

<P><STRONG><a name="[1df]"></a>LEconfig_Allocate_Link_Id</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, le_config.o(i.LEconfig_Allocate_Link_Id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEconfig_Allocate_Link_Id
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Decode_Advertising_ChannelPDU
</UL>

<P><STRONG><a name="[233]"></a>LEconfig_Free_Link_Id</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_config.o(i.LEconfig_Free_Link_Id))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Free_Connection
</UL>

<P><STRONG><a name="[1e6]"></a>LEconfig_Get_LE_Features_Ref</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, le_config.o(i.LEconfig_Get_LE_Features_Ref))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[175]"></a>LEconfig_Init</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, le_config.o(i.LEconfig_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LEconfig_Init &rArr; LEconnection_Init &rArr; _LEconnection_Reset_Connection &rArr; HCfc_Release_All_Data_Queue_Packets &rArr; BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEwl_Clear_White_List
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEscan_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
</UL>

<P><STRONG><a name="[19a]"></a>LEconfig_Is_Features_Encryption_Supported</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, le_config.o(i.LEconfig_Is_Features_Encryption_Supported))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Pause_Enc_Req
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Enc_Req
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[228]"></a>LEconfig_Read_Supported_States</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, le_config.o(i.LEconfig_Read_Supported_States))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[222]"></a>LEconfig_Set_Event_Mask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, le_config.o(i.LEconfig_Set_Event_Mask))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[223]"></a>LEconfig_Set_Random_Address</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, le_config.o(i.LEconfig_Set_Random_Address))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[1bc]"></a>LEconfig_TCI_Set_Search_Window_Delay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, le_config.o(i.LEconfig_TCI_Set_Search_Window_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LEconfig_TCI_Set_Search_Window_Delay &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[1bd]"></a>LEconfig_TCI_Set_TIFS_Tx_Adjustment</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, le_config.o(i.LEconfig_TCI_Set_TIFS_Tx_Adjustment))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LEconfig_TCI_Set_TIFS_Tx_Adjustment &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[1be]"></a>LEconnection_Connection_Update</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, le_connection.o(i.LEconnection_Connection_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LEconnection_Connection_Update &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
</UL>

<P><STRONG><a name="[1bf]"></a>LEconnection_Decrypt_Incoming_Pdu</STRONG> (Thumb, 352 bytes, Stack size 104 bytes, le_connection.o(i.LEconnection_Decrypt_Incoming_Pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LEconnection_Decrypt_Incoming_Pdu &rArr; hw_memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_aes_pkt_length
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_aes_mode
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_aes_llid
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Set_HW_Pkt_Counter
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Dispatch_Pending_Data
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Command_Dispatcher
</UL>

<P><STRONG><a name="[1c6]"></a>LEconnection_Disconnect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, le_connection.o(i.LEconnection_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LEconnection_Disconnect &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_Long_Term_Key_Request_Timeout
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_Long_Term_Key_Request_Negative_Reply
</UL>

<P><STRONG><a name="[1c7]"></a>LEconnection_Encrypt_Payload</STRONG> (Thumb, 322 bytes, Stack size 104 bytes, le_connection.o(i.LEconnection_Encrypt_Payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LEconnection_Encrypt_Payload &rArr; hw_memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_aes_pkt_length
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_aes_mode
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_aes_llid
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Set_HW_Pkt_Counter
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Data_To_Encrypt
</UL>

<P><STRONG><a name="[1c8]"></a>LEconnection_Find_Device_Index</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, le_connection.o(i.LEconnection_Find_Device_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEconnection_Find_Device_Index
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnections_Link_In_Use
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Data_To_Encrypt
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Commit_Rx_Buf
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Acknowledge_Complete_Tx
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMdisp_LMP_Command_Dispatcher
</UL>

<P><STRONG><a name="[158]"></a>LEconnection_Find_Link_Entry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, le_connection.o(i.LEconnection_Find_Link_Entry))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_Long_Term_Key_Request_Timeout
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Check_Timers
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Decode_Advertising_ChannelPDU
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Handle_Host_To_Host_Controller_Flow_Control
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Dispatch_Pending_Data
</UL>

<P><STRONG><a name="[1c9]"></a>LEconnection_Find_Link_Id</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, le_connection.o(i.LEconnection_Find_Link_Id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEconnection_Find_Link_Id
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnections_Link_In_Use
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[1ca]"></a>LEconnection_Find_Next_Connection_Event</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, le_connection.o(i.LEconnection_Find_Next_Connection_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LEconnection_Find_Next_Connection_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnections_Link_In_Use
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
</UL>

<P><STRONG><a name="[1cb]"></a>LEconnection_Find_P_Connection</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, le_connection.o(i.LEconnection_Find_P_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEconnection_Find_P_Connection
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnections_Link_In_Use
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnetion_TCI_Read_Hop_Increment
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnetion_TCI_Read_Access_Code
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_TCI_Read_Window_Size_and_Offset
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_TCI_Read_Session_Key
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_TCI_Read_Peer_SCA
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Read_Remote_Version_Info
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Read_Channel_Map
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Get_Rx_Buf
</UL>

<P><STRONG><a name="[194]"></a>LEconnection_Handle_Connection_Event</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, le_connection.o(i.LEconnection_Handle_Connection_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LEconnection_Handle_Connection_Event &rArr; LEfreq_Get_Next_Data_Channel_Frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_rx_mode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_abort_tifs_count
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_slave
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_All_Tim_Intr_Except
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Map_Channel_Index_2_RF_Freq
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Get_Next_Data_Channel_Frequency
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Set_Active_Mode
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Link_Entry
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
</UL>

<P><STRONG><a name="[11d]"></a>LEconnection_Handle_Data_To_Encrypt</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, le_connection.o(i.LEconnection_Handle_Data_To_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LEconnection_Handle_Data_To_Encrypt &rArr; LEconnection_Encrypt_Payload &rArr; hw_memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_LE_Dequeue_Next
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Device_Index
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[1ba]"></a>LEconnection_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, le_connection.o(i.LEconnection_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LEconnection_Init &rArr; _LEconnection_Reset_Connection &rArr; HCfc_Release_All_Data_Queue_Packets &rArr; BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DL_Alloc_Link
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Reset_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Init
</UL>

<P><STRONG><a name="[1d2]"></a>LEconnection_Is_Valid_Handle</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, le_connection.o(i.LEconnection_Is_Valid_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEconnection_Is_Valid_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnections_Link_In_Use
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[182]"></a>LEconnection_Local_Disconnect</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, le_connection.o(i.LEconnection_Local_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LEconnection_Local_Disconnect &rArr; HCfc_Release_All_Data_Queue_Packets &rArr; BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Release_All_Data_Queue_Packets
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Handle_LLC_Ack
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Response_Timeout
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Connection_Update_Req
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Check_Timers
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Update_Channel_Map_Req
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Dispatch_Pending_Data
</UL>

<P><STRONG><a name="[1d3]"></a>LEconnection_Read_Remote_Version_Info</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, le_connection.o(i.LEconnection_Read_Remote_Version_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LEconnection_Read_Remote_Version_Info &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_P_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
</UL>

<P><STRONG><a name="[1c5]"></a>LEconnection_Set_HW_Pkt_Counter</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, le_connection.o(i.LEconnection_Set_HW_Pkt_Counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEconnection_Set_HW_Pkt_Counter
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Decrypt_Incoming_Pdu
</UL>

<P><STRONG><a name="[1ad]"></a>LEconnection_Setup_First_Connection_Event</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, le_connection.o(i.LEconnection_Setup_First_Connection_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LEconnection_Setup_First_Connection_Event &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[1d4]"></a>LEconnection_TCI_Read_Peer_SCA</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, le_connection.o(i.LEconnection_TCI_Read_Peer_SCA))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LEconnection_TCI_Read_Peer_SCA &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_P_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[1d5]"></a>LEconnection_TCI_Read_Session_Key</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, le_connection.o(i.LEconnection_TCI_Read_Session_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LEconnection_TCI_Read_Session_Key &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_P_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[1d6]"></a>LEconnection_TCI_Read_Window_Size_and_Offset</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, le_connection.o(i.LEconnection_TCI_Read_Window_Size_and_Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LEconnection_TCI_Read_Window_Size_and_Offset &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_P_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[1d7]"></a>LEconnection_TCI_Set_Transmit_Window_Params</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, le_connection.o(i.LEconnection_TCI_Set_Transmit_Window_Params))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LEconnection_TCI_Set_Transmit_Window_Params &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[157]"></a>LEconnections_Link_In_Use</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, le_config.o(i.LEconnections_Link_In_Use))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Is_Valid_Handle
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_P_Connection
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Next_Connection_Event
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Link_Id
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Device_Index
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Handle_Host_To_Host_Controller_Flow_Control
</UL>

<P><STRONG><a name="[1d8]"></a>LEconnetion_TCI_Read_Access_Code</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, le_connection.o(i.LEconnetion_TCI_Read_Access_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LEconnetion_TCI_Read_Access_Code &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint32
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_P_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[1da]"></a>LEconnetion_TCI_Read_Hop_Increment</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, le_connection.o(i.LEconnetion_TCI_Read_Hop_Increment))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LEconnetion_TCI_Read_Hop_Increment &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_P_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[17d]"></a>LEeventgen_Generate_LE_Meta_Event</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, le_connection.o(i.LEeventgen_Generate_LE_Meta_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Get_Direct_Adv_Type
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Get_Direct_Adv_Address
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Is_Event_Masked_On
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Connection_Update
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Unknown_Rsp
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Reject_Ind
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Enc_Req
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Check_For_Pending_Connection_Completes
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
</UL>

<P><STRONG><a name="[1cc]"></a>LEfreq_Get_Next_Data_Channel_Frequency</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, le_frequency.o(i.LEfreq_Get_Next_Data_Channel_Frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEfreq_Get_Next_Data_Channel_Frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
</UL>

<P><STRONG><a name="[1a5]"></a>LEfreq_Map_Channel_Index_2_RF_Freq</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, le_frequency.o(i.LEfreq_Map_Channel_Index_2_RF_Freq))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Scan_Resp_Tx
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Advert_Tx
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[1dd]"></a>LEfreq_Read_Channel_Map</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, le_frequency.o(i.LEfreq_Read_Channel_Map))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEfreq_Read_Channel_Map &rArr; LEconnection_Find_P_Connection
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_P_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[1de]"></a>LEfreq_Update_Channel_Map</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, le_frequency.o(i.LEfreq_Update_Channel_Map))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LEfreq_Update_Channel_Map &rArr; LEfreq_Update_Channel_Remapping_Table
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Update_Channel_Remapping_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
</UL>

<P><STRONG><a name="[a]"></a>LEfreq_Update_Channel_Map_Req</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, le_frequency.o(i.LEfreq_Update_Channel_Map_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LEfreq_Update_Channel_Map_Req &rArr; LEconnection_Local_Disconnect &rArr; HCfc_Release_All_Data_Queue_Packets &rArr; BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Get_Uint16
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Local_Disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_link_layer.o(.data)
</UL>
<P><STRONG><a name="[1ae]"></a>LEfreq_Update_Channel_Remapping_Table</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, le_frequency.o(i.LEfreq_Update_Channel_Remapping_Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LEfreq_Update_Channel_Remapping_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Update_Channel_Map
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[1aa]"></a>LEll_Decode_Advertising_ChannelPDU</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, le_link_layer.o(i.LEll_Decode_Advertising_ChannelPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LEll_Decode_Advertising_ChannelPDU &rArr; LE_Connection_Extact_Connection_Req_Parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Link_Entry
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_Connection_Extact_Connection_Req_Parameters
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Allocate_Link_Id
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Disable_Connectable_Advertising
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[1b0]"></a>LEll_Encode_Advertising_ChannelPDU</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, le_link_layer.o(i.LEll_Encode_Advertising_ChannelPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LEll_Encode_Advertising_ChannelPDU &rArr; LEadv_Write_Scan_Resp_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Write_Scan_Resp_Data
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Write_Adv_Data
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Set_Adv_Header
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Encode_Own_Address_In_Payload
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Advert_Tx
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[17c]"></a>LEllc_Encode_PDU</STRONG> (Thumb, 382 bytes, Stack size 104 bytes, le_connection.o(i.LEllc_Encode_PDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Set_Uint16
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMutils_Array_Copy
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Get_LE_Features_Ref
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Read_Remote_Version_Info
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Disconnect
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Version_Ind
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_UnSupported_Pdu
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Start_Enc_Rsp
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Pause_Enc_Rsp
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Pause_Enc_Req
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Feature_Req
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Enc_Req
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Check_For_Pending_Connection_Completes
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_Decode_link_layer_PDU
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_Long_Term_Key_Request_Reply
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_Long_Term_Key_Request_Negative_Reply
</UL>

<P><STRONG><a name="[229]"></a>LEscan_Get_Scan_Enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, le_scan.o(i.LEscan_Get_Scan_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[1b9]"></a>LEscan_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, le_scan.o(i.LEscan_Init))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Init
</UL>

<P><STRONG><a name="[1e7]"></a>LEsecurity_Encrypt</STRONG> (Thumb, 80 bytes, Stack size 80 bytes, le_security.o(i.LEsecurity_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LEsecurity_Encrypt &rArr; LEsecurity_HW_aes_encrypt_128 &rArr; hw_memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_HW_aes_encrypt_128
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[1e8]"></a>LEsecurity_HW_aes_encrypt_128</STRONG> (Thumb, 204 bytes, Stack size 104 bytes, le_security.o(i.LEsecurity_HW_aes_encrypt_128))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LEsecurity_HW_aes_encrypt_128 &rArr; hw_memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_aes_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_Long_Term_Key_Request_Reply
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_Encrypt
</UL>

<P><STRONG><a name="[1eb]"></a>LEsecurity_Long_Term_Key_Request_Negative_Reply</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, le_security.o(i.LEsecurity_Long_Term_Key_Request_Negative_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LEsecurity_Long_Term_Key_Request_Negative_Reply &rArr; LEconnection_Disconnect &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[1ec]"></a>LEsecurity_Long_Term_Key_Request_Reply</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, le_security.o(i.LEsecurity_Long_Term_Key_Request_Reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = LEsecurity_Long_Term_Key_Request_Reply &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Set_Ticks
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_HW_aes_encrypt_128
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[180]"></a>LEsecurity_Long_Term_Key_Request_Timeout</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, le_security.o(i.LEsecurity_Long_Term_Key_Request_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LEsecurity_Long_Term_Key_Request_Timeout &rArr; LEconnection_Disconnect &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Link_Entry
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Check_Timers
</UL>

<P><STRONG><a name="[1ed]"></a>LEsecurity_Rand</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, le_security.o(i.LEsecurity_Rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LEsecurity_Rand &rArr; SYSrand_Get_Rand_128_Ex &rArr; SYSrand_Get_Rand &rArr; SYSrand_Get_Rand_R
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[198]"></a>LEtest_Ctrl_Handle_Test_Mode_Event</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, le_test.o(i.LEtest_Ctrl_Handle_Test_Mode_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = LEtest_Ctrl_Handle_Test_Mode_Event &rArr; _LEtest_Test_Event_Complete &rArr; HWradio_LE_Service &rArr; ldo_on_debug &rArr; w_regbit &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_DisableAllSpiWrites
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Test_Event_Complete
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Prep_For_LE_Test_Tx
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Prep_For_LE_Test_Rx
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Packet_Send_Complete
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_clear_tx_enable
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_slave
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
</UL>

<P><STRONG><a name="[1f5]"></a>LEtest_Receiver_Test</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, le_test.o(i.LEtest_Receiver_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LEtest_Receiver_Test &rArr; config_radio_rx &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_radio_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[22a]"></a>LEtest_Test_End</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, le_test.o(i.LEtest_Test_End))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[197]"></a>LEtest_Test_Event_Begin</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, le_test.o(i.LEtest_Test_Event_Begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEtest_Test_Event_Begin &rArr; _LEtest_Set_Test_Mode_Header
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Set_Test_Mode_Header
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_clear_tx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
</UL>

<P><STRONG><a name="[1f8]"></a>LEtest_Transmitter_Test</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, le_test.o(i.LEtest_Transmitter_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LEtest_Transmitter_Test &rArr; config_radio_tx &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_radio_tx
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Build_Test_Packet_Payload
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[1fb]"></a>LEwl_Add_Device_To_White_List</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, le_white_list.o(i.LEwl_Add_Device_To_White_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LEwl_Add_Device_To_White_List &rArr; hw_memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_rx_filters_active
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[1fe]"></a>LEwl_Can_I_Modify_White_Lists</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, le_white_list.o(i.LEwl_Can_I_Modify_White_Lists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEwl_Can_I_Modify_White_Lists
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Get_Advertising_Filter_Policy
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Get_Advertising_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[1bb]"></a>LEwl_Clear_White_List</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, le_white_list.o(i.LEwl_Clear_White_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEwl_Clear_White_List
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_rx_filters_active
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[227]"></a>LEwl_Read_White_List_Size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, le_white_list.o(i.LEwl_Read_White_List_Size))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[201]"></a>LEwl_Remove_Device_From_White_List</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, le_white_list.o(i.LEwl_Remove_Device_From_White_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LEwl_Remove_Device_From_White_List &rArr; LEwl_address_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEwl_address_compare
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
</UL>

<P><STRONG><a name="[202]"></a>LEwl_address_compare</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, le_white_list.o(i.LEwl_address_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEwl_address_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEwl_Remove_Device_From_White_List
</UL>

<P><STRONG><a name="[116]"></a>LM_Initialise</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lmp_init.o(i.LM_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[21d]"></a>LMconfig_LM_Read_Local_Name</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lmp_config.o(i.LMconfig_LM_Read_Local_Name))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_HC_BB_Command
</UL>

<P><STRONG><a name="[11c]"></a>LMdisp_LMP_Command_Dispatcher</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lmp_cmd_disp.o(i.LMdisp_LMP_Command_Dispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LMdisp_LMP_Command_Dispatcher &rArr; LE_Decode_link_layer_PDU &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Device_Index
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Decrypt_Incoming_Pdu
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Dequeue_Next
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_Decode_link_layer_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[14f]"></a>LMutils_Array_Copy</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lmp_utils.o(i.LMutils_Array_Copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LMutils_Array_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
</UL>

<P><STRONG><a name="[179]"></a>LMutils_Get_Uint16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lmp_utils.o(i.LMutils_Get_Uint16))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_Connection_Extact_Connection_Req_Parameters
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Version_Ind
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Enc_Req
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Connection_Update_Req
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Update_Channel_Map_Req
</UL>

<P><STRONG><a name="[178]"></a>LMutils_Get_Uint32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lmp_utils.o(i.LMutils_Get_Uint32))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_Connection_Extact_Connection_Req_Parameters
</UL>

<P><STRONG><a name="[1e5]"></a>LMutils_Set_Uint16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lmp_utils.o(i.LMutils_Set_Uint16))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
</UL>

<P><STRONG><a name="[147]"></a>LSLCirq_Disable_All_Tim_Intr_Except</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lslc_irq.o(i.LSLCirq_Disable_All_Tim_Intr_Except))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connection_Exit_LowPower
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advance_For_Next_Adv_Tx
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
</UL>

<P><STRONG><a name="[124]"></a>LSLCirq_Disable_And_Clear_Tabasco_Intr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lslc_irq.o(i.LSLCirq_Disable_And_Clear_Tabasco_Intr))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[107]"></a>LSLCirq_IRQ_Handler</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, lslc_irq.o(i.LSLCirq_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = LSLCirq_IRQ_Handler &rArr; LE_LL_Ctrl_Handle_LE_IRQ &rArr; LE_LL_Ctrl_Handle_Connection_Event &rArr; _LEconnection_Close_Connection_Event &rArr; LEconnection_Connection_Update &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;native_bt_clk_restore_done
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Exit_LowPower
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCslot_Handle_AUX_TIM
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_LE_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Handler
</UL>

<P><STRONG><a name="[176]"></a>LSLCirq_Initialise</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lslc_irq.o(i.LSLCirq_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LC_Initialise
</UL>

<P><STRONG><a name="[203]"></a>LSLCslot_Handle_AUX_TIM</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lslc_slot.o(i.LSLCslot_Handle_AUX_TIM))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[20]"></a>PendSV_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[207]"></a>SER_READ</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hw_radio.o(i.SER_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SER_READ &rArr; _HWradio_ReadNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_ReadNow_xinc
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga_spi_read
</UL>

<P><STRONG><a name="[16f]"></a>SER_WRITE</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_radio.o(i.SER_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_ProgNow_xinc
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga_spi_write
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_radio_tx
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_radio_rx
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
</UL>

<P><STRONG><a name="[2f]"></a>SPI0_Handler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nrfx_spim.o(i.SPI0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_low
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_high
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_Handler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, nrfx_spim.o(i.SPI1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_low
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_high
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xincx_spim_1_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[20d]"></a>SYS_Main_Initialise</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys_main.o(i.SYS_Main_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SYS_Main_Initialise &rArr; BT_Initialise &rArr; HWradio_Initialise &rArr; _HWradio_Go_To_Idle_State &rArr; rf_init &rArr; le_rf_init &rArr; ble_rccali &rArr; wbit &rArr; fpga_spi_write &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Initialise
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Enable_Interrupts_Save_Flags
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_linklayer_init
</UL>

<P><STRONG><a name="[20e]"></a>SYSconfig_Initialise</STRONG> (Thumb, 230 bytes, Stack size 88 bytes, sys_config.o(i.SYSconfig_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SYSconfig_Initialise &rArr; BTaddr_Build_Sync_Word
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYShal_config_Initialise
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTaddr_Build_Sync_Word
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Main_Initialise
</UL>

<P><STRONG><a name="[210]"></a>SYShal_config_Initialise</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_hal_config.o(i.SYShal_config_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSconfig_Initialise
</UL>

<P><STRONG><a name="[110]"></a>SYSinit_Initialise</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys_init.o(i.SYSinit_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[12a]"></a>SYSirq_Disable_Interrupts_Save_Flags</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_irq.o(i.SYSirq_Disable_Interrupts_Save_Flags))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_LE_Dequeue_Next
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Decrypt_Incoming_Pdu
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Calibrate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Calibrate_
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reduce_Queue_Number_Of_Processed_Chunks
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Dequeue_Next
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSatomic_Increment_u_int8
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Main_Initialise
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_HW_aes_encrypt_128
</UL>

<P><STRONG><a name="[20f]"></a>SYSirq_Enable_Interrupts_Save_Flags</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_irq.o(i.SYSirq_Enable_Interrupts_Save_Flags))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Main_Initialise
</UL>

<P><STRONG><a name="[115]"></a>SYSirq_Initialise</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_irq.o(i.SYSirq_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[12c]"></a>SYSirq_Interrupts_Restore_Flags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_irq.o(i.SYSirq_Interrupts_Restore_Flags))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_LE_Dequeue_Next
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Decrypt_Incoming_Pdu
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Calibrate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Calibrate_
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reduce_Queue_Number_Of_Processed_Chunks
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Dequeue_Next
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSatomic_Increment_u_int8
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_HW_aes_encrypt_128
</UL>

<P><STRONG><a name="[10b]"></a>SYSmmap_Map_BlueStream</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_mmap.o(i.SYSmmap_Map_BlueStream))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[119]"></a>SYSpwr_Initialise</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_power.o(i.SYSpwr_Initialise))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[126]"></a>SYSrand_Get_Rand</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, sys_rand_num_gen.o(i.SYSrand_Get_Rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSrand_Get_Rand &rArr; SYSrand_Get_Rand_R
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_R
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand_128_Ex
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Set_Next_Advertising_Event_Start_Timer
</UL>

<P><STRONG><a name="[19b]"></a>SYSrand_Get_Rand_128_Ex</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, sys_rand_num_gen.o(i.SYSrand_Get_Rand_128_Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYSrand_Get_Rand_128_Ex &rArr; SYSrand_Get_Rand &rArr; SYSrand_Get_Rand_R
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Enc_Req
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_Rand
</UL>

<P><STRONG><a name="[212]"></a>SYSrand_Get_Rand_R</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sys_rand_num_gen.o(i.SYSrand_Get_Rand_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSrand_Get_Rand_R
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand
</UL>

<P><STRONG><a name="[10d]"></a>SYSrand_Seed_Rand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_rand_num_gen.o(i.SYSrand_Seed_Rand))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[21]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_systick.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_tick_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[242]"></a>SysTick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_systick.o(i.SysTick_get))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, system_xinc.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SystemInit &rArr; retarget_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retarget_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(.text)
</UL>
<P><STRONG><a name="[14a]"></a>TCI_Dispatch_Prop_Command</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, tc_cmd_disp.o(i.TCI_Dispatch_Prop_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TCI_Dispatch_Prop_Command &rArr; LEconnection_TCI_Set_Transmit_Window_Params &rArr; TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnetion_TCI_Read_Hop_Increment
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnetion_TCI_Read_Access_Code
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_TCI_Set_Transmit_Window_Params
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_TCI_Read_Window_Size_and_Offset
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_TCI_Read_Session_Key
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_TCI_Read_Peer_SCA
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_TCI_Set_TIFS_Tx_Adjustment
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_TCI_Set_Search_Window_Delay
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_TCI_Write_Advertising_Delta
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_TCI_Set_Direct_Adv_Timeout
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_TCI_Read_Advertising_Params
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCIparam_Get_Uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC_Command_Dispatcher
</UL>

<P><STRONG><a name="[1b6]"></a>TCeg_Command_Complete_Event</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tc_event_gen.o(i.TCeg_Command_Complete_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint16
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Insert_Uint8
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_TCI_Set_Transmit_Window_Params
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_TCI_Set_TIFS_Tx_Adjustment
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_TCI_Set_Search_Window_Delay
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_TCI_Write_Advertising_Delta
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_TCI_Set_Direct_Adv_Timeout
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[27]"></a>TIMER0_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_timer.o(i.TIMER0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER1_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_timer.o(i.TIMER1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER2_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_timer.o(i.TIMER2_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIMER2_Handler &rArr; timer_timeouts_check &rArr; app_sched_event_put &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[120]"></a>TRAhcit_Dispatch_Pending_Data</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, tra_hcit.o(i.TRAhcit_Dispatch_Pending_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TRAhcit_Dispatch_Pending_Data &rArr; LEconnection_Decrypt_Incoming_Pdu &rArr; hw_memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Local_Disconnect
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Link_Entry
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Decrypt_Incoming_Pdu
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Get_Next_HC_to_Host_Data_Descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[11f]"></a>TRAhcit_Dispatch_Pending_Event</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tra_hcit.o(i.TRAhcit_Dispatch_Pending_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TRAhcit_Dispatch_Pending_Event &rArr; BTq_Dequeue_Next
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Dequeue_Next
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>

<P><STRONG><a name="[218]"></a>TRAhcit_Generic_Acknowledge_Complete_Tx</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tra_hcit.o(i.TRAhcit_Generic_Acknowledge_Complete_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TRAhcit_Generic_Acknowledge_Complete_Tx &rArr; BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Is_Queue_Empty
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Device_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Dispatcher
</UL>

<P><STRONG><a name="[219]"></a>TRAhcit_Generic_Commit_Rx_Buf</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tra_hcit.o(i.TRAhcit_Generic_Commit_Rx_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TRAhcit_Generic_Commit_Rx_Buf &rArr; BTq_Commit
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Device_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_transport_ram_send_packet
</UL>

<P><STRONG><a name="[15]"></a>TRAhcit_Generic_Dispatcher</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tra_hcit.o(i.TRAhcit_Generic_Dispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = TRAhcit_Generic_Dispatcher &rArr; TRAhcit_Generic_Acknowledge_Complete_Tx &rArr; BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Acknowledge_Complete_Tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tra_hcit.o(.data)
</UL>
<P><STRONG><a name="[21a]"></a>TRAhcit_Generic_Get_Rx_Buf</STRONG> (Thumb, 228 bytes, Stack size 80 bytes, tra_hcit.o(i.TRAhcit_Generic_Get_Rx_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Hardware_Error_Event
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_P_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_transport_ram_send_packet
</UL>

<P><STRONG><a name="[114]"></a>TRAhcit_Initialise</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tra_hcit.o(i.TRAhcit_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TRAhcit_Initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[395]"></a>TRAhcit_Register_Generic_Dispatcher</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tra_hcit.o(i.TRAhcit_Register_Generic_Dispatcher))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_transport_ram_open
</UL>

<P><STRONG><a name="[104]"></a>Timer_Register_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_timer.o(i.Timer_Register_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Enter_LowPower
</UL>

<P><STRONG><a name="[106]"></a>Timer_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_timer.o(i.Timer_disable))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connection_Exit_LowPower
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Exit_LowPower
</UL>

<P><STRONG><a name="[2d]"></a>UART0_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_uart.o(i.UART0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART1_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_uart.o(i.UART1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART1_Handler &rArr; nrfx_uart_1_irq_handler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_1_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xinc.o(RESET)
</UL>
<P><STRONG><a name="[131]"></a>_BTq_Allocate_Header</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tra_queue.o(i._BTq_Allocate_Header))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
</UL>

<P><STRONG><a name="[12b]"></a>_BTq_Deallocate_Header</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tra_queue.o(i._BTq_Deallocate_Header))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reset
</UL>

<P><STRONG><a name="[128]"></a>_BTq_Get_Data_Queue_Ref</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tra_queue.o(i._BTq_Get_Data_Queue_Ref))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reduce_Queue_Number_Of_Processed_Chunks
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Initialise_Data_Queue_Type
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Get_Total_Number_Of_Processed_Chunks
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Dequeue_Next
</UL>

<P><STRONG><a name="[22b]"></a>_Ctune_Set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, patch.o(i._Ctune_Set))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_Go_To_Idle_State
</UL>

<P><STRONG><a name="[164]"></a>_HWhab_Config_COR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_radio.o(i._HWhab_Config_COR))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Initialise
</UL>

<P><STRONG><a name="[165]"></a>_HWhab_Config_Intr_Ctrl</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, hw_radio.o(i._HWhab_Config_Intr_Ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Initialise
</UL>

<P><STRONG><a name="[163]"></a>_HWhab_Config_SYM</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hw_radio.o(i._HWhab_Config_SYM))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Initialise
</UL>

<P><STRONG><a name="[167]"></a>_HWhab_Init_RF</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, hw_radio.o(i._HWhab_Init_RF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _HWhab_Init_RF
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Initialise
</UL>

<P><STRONG><a name="[168]"></a>_HWradio_Go_To_Idle_State</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, hw_radio.o(i._HWradio_Go_To_Idle_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _HWradio_Go_To_Idle_State &rArr; rf_init &rArr; le_rf_init &rArr; ble_rccali &rArr; wbit &rArr; fpga_spi_write &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Ctune_Set
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo_off_debug
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Initialise
</UL>

<P><STRONG><a name="[209]"></a>_HWradio_ProgNow_xinc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hw_radio.o(i._HWradio_ProgNow_xinc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_Serial_Interface_Idle
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_Serial_Interface_Busy_us
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_WRITE
</UL>

<P><STRONG><a name="[208]"></a>_HWradio_ReadNow_xinc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hw_radio.o(i._HWradio_ReadNow_xinc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _HWradio_ReadNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_READ
</UL>

<P><STRONG><a name="[14e]"></a>_Insert_Uint16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hc_event_gen.o(i._Insert_Uint16))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnetion_TCI_Read_Hop_Increment
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnetion_TCI_Read_Access_Code
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_TCI_Read_Window_Size_and_Offset
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_TCI_Read_Session_Key
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_TCI_Read_Peer_SCA
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_TCI_Read_Advertising_Params
</UL>

<P><STRONG><a name="[151]"></a>_Insert_Uint24</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc_event_gen.o(i._Insert_Uint24))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
</UL>

<P><STRONG><a name="[1d9]"></a>_Insert_Uint32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc_event_gen.o(i._Insert_Uint32))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnetion_TCI_Read_Access_Code
</UL>

<P><STRONG><a name="[216]"></a>_Insert_Uint8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hc_event_gen.o(i._Insert_Uint8))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCeg_Command_Complete_Event
</UL>

<P><STRONG><a name="[1a9]"></a>_LEadv_Advance_For_Next_Adv_Tx</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, le_advertise.o(i._LEadv_Advance_For_Next_Adv_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _LEadv_Advance_For_Next_Adv_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_All_Tim_Intr_Except
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[1af]"></a>_LEadv_Advertising_Event_Complete</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, le_advertise.o(i._LEadv_Advertising_Event_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _LEadv_Advertising_Event_Complete &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_All_Tim_Intr_Except
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_RxComplete
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTtimer_Is_Expired_For_Time
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEeventgen_Generate_LE_Meta_Event
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Enter_LowPower
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Reset_Adv_Frequency
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Advert_Tx
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_clear_tx_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_clear_le_spi_only
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_abort_tifs_count
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[183]"></a>_LEconnection_Close_Connection_Event</STRONG> (Thumb, 416 bytes, Stack size 88 bytes, le_connection.o(i._LEconnection_Close_Connection_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _LEconnection_Close_Connection_Event &rArr; LEconnection_Connection_Update &rArr; LEeventgen_Generate_LE_Meta_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_abort_tifs_count
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_slave
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_All_Tim_Intr_Except
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Update_Channel_Map
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Set_Advertise_Enable
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_RxComplete
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_DisableAllSpiWrites
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Release_All_Data_Queue_Packets
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connection_Enter_LowPower
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_rx_window_init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Reset_Connection
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Free_Connection
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Next_Connection_Event
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Connection_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Connection_Update_Req
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Check_Timers
</UL>

<P><STRONG><a name="[18e]"></a>_LEconnection_Decode_DataPDU</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, le_connection.o(i._LEconnection_Decode_DataPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _LEconnection_Decode_DataPDU &rArr; BTq_Ack_Last_Dequeued &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Handle_LLC_Ack
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Commit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Ack_Last_Dequeued
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[186]"></a>_LEconnection_Determine_Window_Widening_In_Frames</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, le_connection.o(i._LEconnection_Determine_Window_Widening_In_Frames))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _LEconnection_Determine_Window_Widening_In_Frames
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[18f]"></a>_LEconnection_Encode_DataPDU</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, le_connection.o(i._LEconnection_Encode_DataPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _LEconnection_Encode_DataPDU &rArr; BTq_LE_Dequeue_Next
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_memcpy32
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_tx_llid
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_set_tx_length_data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_LE_Dequeue_Next
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[230]"></a>_LEconnection_Free_Connection</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, le_connection.o(i._LEconnection_Free_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _LEconnection_Free_Connection &rArr; _LEconnection_Reset_Connection &rArr; HCfc_Release_All_Data_Queue_Packets &rArr; BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Free_Link_Id
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Reset_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
</UL>

<P><STRONG><a name="[1d1]"></a>_LEconnection_Reset_Connection</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, le_connection.o(i._LEconnection_Reset_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _LEconnection_Reset_Connection &rArr; HCfc_Release_All_Data_Queue_Packets &rArr; BTq_Reset &rArr; BTq_Get_and_Reset_Queue_Number_Of_Processed_Chunks &rArr; BTq_Reduce_Queue_Number_Of_Processed_Chunks
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Release_All_Data_Queue_Packets
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Free_Connection
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Init
</UL>

<P><STRONG><a name="[1fa]"></a>_LEtest_Build_Test_Packet_Payload</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, le_test.o(i._LEtest_Build_Test_Packet_Payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _LEtest_Build_Test_Packet_Payload
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Transmitter_Test
</UL>

<P><STRONG><a name="[1ef]"></a>_LEtest_Packet_Send_Complete</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, le_test.o(i._LEtest_Packet_Send_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _LEtest_Packet_Send_Complete
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_clear_tx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Ctrl_Handle_Test_Mode_Event
</UL>

<P><STRONG><a name="[1f1]"></a>_LEtest_Prep_For_LE_Test_Rx</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, le_test.o(i._LEtest_Prep_For_LE_Test_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _LEtest_Prep_For_LE_Test_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Ctrl_Handle_Test_Mode_Event
</UL>

<P><STRONG><a name="[1f0]"></a>_LEtest_Prep_For_LE_Test_Tx</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, le_test.o(i._LEtest_Prep_For_LE_Test_Tx))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Ctrl_Handle_Test_Mode_Event
</UL>

<P><STRONG><a name="[1f7]"></a>_LEtest_Set_Test_Mode_Header</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, le_test.o(i._LEtest_Set_Test_Mode_Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _LEtest_Set_Test_Mode_Header
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Test_Event_Begin
</UL>

<P><STRONG><a name="[1f2]"></a>_LEtest_Test_Event_Complete</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, le_test.o(i._LEtest_Test_Event_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _LEtest_Test_Event_Complete &rArr; HWradio_LE_Service &rArr; ldo_on_debug &rArr; w_regbit &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_RxComplete
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWle_clear_tx_enable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_rx_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Ctrl_Handle_Test_Mode_Event
</UL>

<P><STRONG><a name="[f7]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bsp.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Calibrate
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[14d]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gatt_client.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_control
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_prepare
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xinc_saadc_channel_init
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_trigger_user_response
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stk_generation_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdu_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_event_packet_handler
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_request
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEllc_Encode_PDU
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_run
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_handle_encryption_result
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Encode_Advertising_ChannelPDU
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Set_Adv_Header
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Link_Control_Command
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_LE_Command
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Dispatch_Info_Command
</UL>

<P><STRONG><a name="[ee]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[33f]"></a>__USAT</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.__USAT))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>

<P><STRONG><a name="[d3]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[c6]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_retarget.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[23c]"></a>app_error_fault_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>

<P><STRONG><a name="[23b]"></a>app_error_handler_bare</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_error
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_scheduled_exec
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[23d]"></a>app_sched_event_put</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, app_scheduler.o(i.app_sched_event_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_sched_event_put &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[3d3]"></a>app_sched_execute</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_scheduler.o(i.app_sched_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_sched_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3cf]"></a>app_sched_init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, app_scheduler.o(i.app_sched_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_sched_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31a]"></a>app_timer_create</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_enable
</UL>

<P><STRONG><a name="[240]"></a>app_timer_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_get
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[243]"></a>app_timer_start</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = app_timer_start &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_get
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_try
</UL>

<P><STRONG><a name="[246]"></a>app_timer_stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_uninit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_enable
</UL>

<P><STRONG><a name="[23e]"></a>app_util_critical_region_enter</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, app_util_poatform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[23f]"></a>app_util_critical_region_exit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, app_util_poatform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[248]"></a>app_util_disable_irq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_poatform.o(i.app_util_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[249]"></a>app_util_enable_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_util_poatform.o(i.app_util_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
</UL>

<P><STRONG><a name="[263]"></a>att_clear_transaction_queue</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, att_db.o(i.att_clear_transaction_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = att_clear_transaction_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_event_packet_handler
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_execute_write_request
</UL>

<P><STRONG><a name="[24d]"></a>att_dispatch_register_server</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, att_dispatch.o(i.att_dispatch_register_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = att_dispatch_register_server &rArr; l2cap_register_fixed_channel &rArr; l2cap_fixed_channel_for_channel_id
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register_fixed_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_init
</UL>

<P><STRONG><a name="[24f]"></a>att_dispatch_server_can_send_now</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, att_dispatch.o(i.att_dispatch_server_can_send_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = att_dispatch_server_can_send_now &rArr; l2cap_can_send_fixed_channel_packet_now &rArr; hci_can_send_acl_packet_now &rArr; hci_can_send_prepared_acl_packet_now &rArr; hci_number_free_acl_slots_for_handle &rArr; hci_connection_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_can_send_fixed_channel_packet_now
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_notify
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_handle_can_send_now
</UL>

<P><STRONG><a name="[251]"></a>att_dispatch_server_mtu_exchanged</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, att_dispatch.o(i.att_dispatch_server_mtu_exchanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = att_dispatch_server_mtu_exchanged &rArr; emit_mtu_exchange_complete
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mtu_exchange_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_process_validated_request
</UL>

<P><STRONG><a name="[253]"></a>att_dispatch_server_request_can_send_now_event</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, att_dispatch.o(i.att_dispatch_server_request_can_send_now_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = att_dispatch_server_request_can_send_now_event &rArr; l2cap_request_can_send_fix_channel_now_event &rArr; l2cap_notify_channel_can_send &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_request_can_send_fix_channel_now_event
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_request_to_send_notification
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_handle_can_send_now
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_run_for_context
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_packet_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_event_packet_handler
</UL>

<P><STRONG><a name="[269]"></a>att_handle_request</STRONG> (Thumb, 504 bytes, Stack size 56 bytes, att_db.o(i.att_handle_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = att_handle_request &rArr; handle_read_by_type_request2 &rArr; att_iterator_match_uuid &rArr; att_iterator_match_uuid16 &rArr; is_Bluetooth_Base_UUID &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_hexdump
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_write_request
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_write_command
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_request2
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_multiple_request2
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_type_request2
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_group_type_request2
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_blob_request2
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_prepare_write_request
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_find_information_request2
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_find_by_type_value_request2
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_execute_write_request
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_process_validated_request
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_packet_handler
</UL>

<P><STRONG><a name="[278]"></a>att_is_persistent_ccc</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, att_db.o(i.att_is_persistent_ccc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = att_is_persistent_ccc &rArr; att_find_handle &rArr; att_iterator_fetch_next
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_persistent_ccc_cache
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_find_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_write_callback
</UL>

<P><STRONG><a name="[281]"></a>att_prepare_handle_value_notification</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, att_db.o(i.att_prepare_handle_value_notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = att_prepare_handle_value_notification &rArr; prepare_handle_value &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_handle_value
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_notify
</UL>

<P><STRONG><a name="[283]"></a>att_read_callback_handle_blob</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, att_db.o(i.att_read_callback_handle_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = att_read_callback_handle_blob &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_min
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback_handle_little_endian_16
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback_handle_byte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback
</UL>

<P><STRONG><a name="[284]"></a>att_read_callback_handle_byte</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, att_db.o(i.att_read_callback_handle_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = att_read_callback_handle_byte &rArr; att_read_callback_handle_blob &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback_handle_blob
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback
</UL>

<P><STRONG><a name="[285]"></a>att_read_callback_handle_little_endian_16</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, att_db.o(i.att_read_callback_handle_little_endian_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = att_read_callback_handle_little_endian_16 &rArr; att_read_callback_handle_blob &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback_handle_blob
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback
</UL>

<P><STRONG><a name="[28d]"></a>att_server_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, att_server.o(i.att_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = att_server_init &rArr; att_dispatch_register_server &rArr; l2cap_register_fixed_channel &rArr; l2cap_fixed_channel_for_channel_id
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_add_event_handler
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_add_event_handler
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_dispatch_register_server
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_set_write_callback
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_set_read_callback
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_set_db
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[293]"></a>att_server_notify</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, att_server.o(i.att_server_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = att_server_notify &rArr; l2cap_send_prepared_connectionless &rArr; hci_send_acl_packet_buffer &rArr; hci_send_acl_packet_fragments &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_prepared_connectionless
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_reserve_packet_buffer
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_outgoing_buffer
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_for_handle
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_dispatch_server_can_send_now
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_prepare_handle_value_notification
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_send_media_report
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_send_keyboard_report
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff11_can_send_now
</UL>

<P><STRONG><a name="[29e]"></a>att_server_register_can_send_now_callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, att_server.o(i.att_server_register_can_send_now_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = att_server_register_can_send_now_callback &rArr; att_server_request_to_send_notification &rArr; att_dispatch_server_request_can_send_now_event &rArr; l2cap_request_can_send_fix_channel_now_event &rArr; l2cap_notify_channel_can_send &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_request_to_send_notification
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_request_voice_can_send_now_event
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_request_can_send_now_event
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff11_char_send_report
</UL>

<P><STRONG><a name="[2c7]"></a>att_server_register_packet_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, att_server.o(i.att_server_register_packet_handler))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[2a0]"></a>att_server_register_service_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, att_server.o(i.att_server_register_service_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = att_server_register_service_handler &rArr; att_service_handler_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_add
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_service_handler_for_handle
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_information_service_server_init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_service_server_init
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff10_service_server_init
</UL>

<P><STRONG><a name="[29f]"></a>att_server_request_to_send_notification</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, att_server.o(i.att_server_request_to_send_notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = att_server_request_to_send_notification &rArr; att_dispatch_server_request_can_send_now_event &rArr; l2cap_request_can_send_fix_channel_now_event &rArr; l2cap_notify_channel_can_send &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_add_tail
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_for_handle
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_dispatch_server_request_can_send_now_event
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_can_send_now_callback
</UL>

<P><STRONG><a name="[290]"></a>att_set_db</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, att_db.o(i.att_set_db))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_init
</UL>

<P><STRONG><a name="[291]"></a>att_set_read_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, att_db.o(i.att_set_read_callback))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_init
</UL>

<P><STRONG><a name="[292]"></a>att_set_write_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, att_db.o(i.att_set_write_callback))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_init
</UL>

<P><STRONG><a name="[2ab]"></a>battery_service_server_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, battery_service_server.o(i.battery_service_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = battery_service_server_init &rArr; gatt_server_get_client_configuration_handle_for_characteristic_with_uuid16 &rArr; gatt_server_get_descriptor_handle_for_characteristic_with_uuid16 &rArr; att_iterator_match_uuid16 &rArr; is_Bluetooth_Base_UUID &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_value_handle_for_characteristic_with_uuid16
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_get_handle_range_for_service_with_uuid16
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_client_configuration_handle_for_characteristic_with_uuid16
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_service_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_keyboard_setup
</UL>

<P><STRONG><a name="[2af]"></a>bd_addr_copy</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, btstack_util.o(i.bd_addr_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bd_addr_copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_connection_for_bd_addr_and_type
</UL>

<P><STRONG><a name="[297]"></a>bd_addr_to_str</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, btstack_util.o(i.bd_addr_to_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bd_addr_to_str &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_for_nibble
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_for_high_nibble
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_key_distribution_handle_all_received
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_add
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_persistent_ccc_write
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_persistent_ccc_restore
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_persistent_ccc_clear
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_shutdown_connection
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_replace_bd_addr_placeholder
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_run
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_connection_for_bd_addr_and_type
</UL>

<P><STRONG><a name="[427]"></a>big_endian_read_16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, btstack_util.o(i.big_endian_read_16))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_ph3_div
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_ph4_y
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_ph3_y
</UL>

<P><STRONG><a name="[43d]"></a>big_endian_read_32</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, btstack_util.o(i.big_endian_read_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = big_endian_read_32
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_trigger_user_response
</UL>

<P><STRONG><a name="[2d0]"></a>big_endian_store_16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, btstack_util.o(i.big_endian_store_16))
<BR><BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_d1_d_prime
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_run
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_ccm_setup_a_i
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_ccm_calc_aad_xn
</UL>

<P><STRONG><a name="[380]"></a>big_endian_store_32</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, btstack_util.o(i.big_endian_store_32))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_packet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_ph2_tk
</UL>

<P><STRONG><a name="[3b]"></a>ble_firmware_exit_lowpower</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, le_power.o(i.ble_firmware_exit_lowpower))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_firmware_exit_lowpower &rArr; Connection_Exit_LowPower &rArr; restore_sleep_clk &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connection_Exit_LowPower
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Exit_LowPower
</UL>
<BR>[Address Reference Count : 2]<UL><LI> le_power.o(i.do_Connection_Enter_LowPower)
<LI> le_power.o(i.Adv_Enter_LowPower)
</UL>
<P><STRONG><a name="[2b2]"></a>ble_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ble.o(i.ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ble_init &rArr; ble_stack_init &rArr; hci_power_control &rArr; hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_linklayer_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b3]"></a>ble_linklayer_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_main.o(i.ble_linklayer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ble_linklayer_init &rArr; SYS_Main_Initialise &rArr; BT_Initialise &rArr; HWradio_Initialise &rArr; _HWradio_Go_To_Idle_State &rArr; rf_init &rArr; le_rf_init &rArr; ble_rccali &rArr; wbit &rArr; fpga_spi_write &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Main_Initialise
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPR_CTL
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[2b6]"></a>ble_linklayer_schedule</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sys_main.o(i.ble_linklayer_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ble_linklayer_schedule &rArr; BTms_Sched &rArr; LE_LL_Check_For_Pending_Connection_Completes &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mainloop
</UL>

<P><STRONG><a name="[2b7]"></a>ble_mainloop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble.o(i.ble_mainloop))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ble_mainloop &rArr; ble_linklayer_schedule &rArr; BTms_Sched &rArr; LE_LL_Check_For_Pending_Connection_Completes &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_schedule
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_linklayer_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b9]"></a>ble_rccali</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, rf_driver.o(i.ble_rccali))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_rccali &rArr; wbit &rArr; fpga_spi_write &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbit
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_rf_init
</UL>

<P><STRONG><a name="[2b4]"></a>ble_stack_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, btstack.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = ble_stack_init &rArr; hci_power_control &rArr; hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_peripheral_setup
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_control
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_add_event_handler
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_packet_handler
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register_packet_handler
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_open
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_transport_ram_instance
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_get_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[2b8]"></a>ble_stack_schedule</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, btstack.o(i.ble_stack_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_stack_schedule &rArr; btstack_run_loop_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mainloop
</UL>

<P><STRONG><a name="[213]"></a>ble_tick_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, btstack_tick.o(i.ble_tick_handler))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2ca]"></a>btstack_crypto_aes128_encrypt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, btstack_crypto.o(i.btstack_crypto_aes128_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_add_tail
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_run
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_ph4_y
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_ph3_y
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_ph3_ltk
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_c
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_a
</UL>

<P><STRONG><a name="[2e2]"></a>btstack_crypto_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, btstack_crypto.o(i.btstack_crypto_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = btstack_crypto_init &rArr; hci_add_event_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_add_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
</UL>

<P><STRONG><a name="[2e3]"></a>btstack_crypto_random_generate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, btstack_crypto.o(i.btstack_crypto_random_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = btstack_crypto_random_generate &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_add_tail
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_run
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_just_works_confirm
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdu_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_ph3_random
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_er
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_event_packet_handler
</UL>

<P><STRONG><a name="[2a1]"></a>btstack_linked_list_add</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, btstack_linked_list.o(i.btstack_linked_list_add))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_service_handler
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_init
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_connection_for_bd_addr_and_type
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_add_data_source
</UL>

<P><STRONG><a name="[2a2]"></a>btstack_linked_list_add_tail</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, btstack_linked_list.o(i.btstack_linked_list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_add_event_handler
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_add_event_handler
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_random_generate
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_aes128_encrypt
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_request_to_send_notification
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_notify_channel_can_send
</UL>

<P><STRONG><a name="[289]"></a>btstack_linked_list_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, btstack_linked_list.o(i.btstack_linked_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_data_ready_for_phase
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_run
</UL>

<P><STRONG><a name="[2e1]"></a>btstack_linked_list_get_first_item</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, btstack_linked_list.o(i.btstack_linked_list_get_first_item))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_run
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_handle_encryption_result
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_event_handler
</UL>

<P><STRONG><a name="[258]"></a>btstack_linked_list_iterator_has_next</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, btstack_linked_list.o(i.btstack_linked_list_iterator_has_next))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_handle
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_dispatch_event
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_validate_prepared_write
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_service_handler_for_handle
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_handle_can_send_now
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notify_write_callbacks
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_emit_event_to_all
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_notify_channel_can_send
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_fixed_channel_for_channel_id
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_run
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_bd_addr_and_type
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reenable_advertisements_if_needed
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_event
</UL>

<P><STRONG><a name="[256]"></a>btstack_linked_list_iterator_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, btstack_linked_list.o(i.btstack_linked_list_iterator_init))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_handle
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_dispatch_event
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connections_get_iterator
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_validate_prepared_write
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_service_handler_for_handle
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notify_write_callbacks
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_emit_event_to_all
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_notify_channel_can_send
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_fixed_channel_for_channel_id
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_bd_addr_and_type
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reenable_advertisements_if_needed
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_event
</UL>

<P><STRONG><a name="[257]"></a>btstack_linked_list_iterator_next</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, btstack_linked_list.o(i.btstack_linked_list_iterator_next))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_handle
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_dispatch_event
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_validate_prepared_write
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_service_handler_for_handle
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_handle_can_send_now
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notify_write_callbacks
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_emit_event_to_all
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_notify_channel_can_send
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_fixed_channel_for_channel_id
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_run
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_bd_addr_and_type
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reenable_advertisements_if_needed
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_event
</UL>

<P><STRONG><a name="[2dd]"></a>btstack_linked_list_pop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, btstack_linked_list.o(i.btstack_linked_list_pop))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_event_handler
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_done
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_handle_encryption_result
</UL>

<P><STRONG><a name="[28c]"></a>btstack_linked_list_remove</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, btstack_linked_list.o(i.btstack_linked_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_handle_can_send_now
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_notify_channel_can_send
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_shutdown_connection
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_remove_timer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_remove_data_source
</UL>

<P><STRONG><a name="[2e6]"></a>btstack_main</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, skyworth_rc_demo.o(i.btstack_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = btstack_main &rArr; hci_power_control &rArr; hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_control
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_keyboard_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_reset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e8]"></a>btstack_memory_hci_connection_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, btstack_memory.o(i.btstack_memory_hci_connection_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = btstack_memory_hci_connection_free &rArr; btstack_memory_pool_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_pool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_shutdown_connection
</UL>

<P><STRONG><a name="[2ea]"></a>btstack_memory_hci_connection_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, btstack_memory.o(i.btstack_memory_hci_connection_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btstack_memory_hci_connection_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_pool_get
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_connection_for_bd_addr_and_type
</UL>

<P><STRONG><a name="[2bc]"></a>btstack_memory_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, btstack_memory.o(i.btstack_memory_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = btstack_memory_init &rArr; btstack_memory_pool_create &rArr; btstack_memory_pool_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[2ec]"></a>btstack_memory_pool_create</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, btstack_memory_pool.o(i.btstack_memory_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = btstack_memory_pool_create &rArr; btstack_memory_pool_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_pool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_init
</UL>

<P><STRONG><a name="[2e9]"></a>btstack_memory_pool_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, btstack_memory_pool.o(i.btstack_memory_pool_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btstack_memory_pool_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_sm_lookup_entry_free
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_pool_create
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_hci_connection_free
</UL>

<P><STRONG><a name="[2eb]"></a>btstack_memory_pool_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, btstack_memory_pool.o(i.btstack_memory_pool_get))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_hci_connection_get
</UL>

<P><STRONG><a name="[2ee]"></a>btstack_memory_sm_lookup_entry_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, btstack_memory.o(i.btstack_memory_sm_lookup_entry_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = btstack_memory_sm_lookup_entry_free &rArr; btstack_memory_pool_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_pool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[286]"></a>btstack_min</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, btstack_util.o(i.btstack_min))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_information_service_read_callback
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback_handle_blob
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_ring_buffer_write
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_ring_buffer_read
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_run
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_event_handler
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_ccm_next_block
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_ccm_handle_sn
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_ccm_calc_aad_xn
</UL>

<P><STRONG><a name="[2f0]"></a>btstack_ring_buffer_bytes_available</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, btstack_ring_buffer.o(i.btstack_ring_buffer_bytes_available))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_ring_buffer_read
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_ring_buffer_empty
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_ring_buffer_bytes_free
</UL>

<P><STRONG><a name="[2ef]"></a>btstack_ring_buffer_bytes_free</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, btstack_ring_buffer.o(i.btstack_ring_buffer_bytes_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = btstack_ring_buffer_bytes_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_ring_buffer_bytes_available
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_ring_buffer_write
</UL>

<P><STRONG><a name="[2f1]"></a>btstack_ring_buffer_empty</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, btstack_ring_buffer.o(i.btstack_ring_buffer_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = btstack_ring_buffer_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_ring_buffer_bytes_available
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_ring_buffer_empty
</UL>

<P><STRONG><a name="[443]"></a>btstack_ring_buffer_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, btstack_ring_buffer.o(i.btstack_ring_buffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_ring_buffer_init
</UL>

<P><STRONG><a name="[2f2]"></a>btstack_ring_buffer_read</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, btstack_ring_buffer.o(i.btstack_ring_buffer_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = btstack_ring_buffer_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_min
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_ring_buffer_bytes_available
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_kb_from_ring_buff
</UL>

<P><STRONG><a name="[2f3]"></a>btstack_ring_buffer_write</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, btstack_ring_buffer.o(i.btstack_ring_buffer_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = btstack_ring_buffer_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_min
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_ring_buffer_bytes_free
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_kb_to_ring_buff
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_encode_data
</UL>

<P><STRONG><a name="[2f4]"></a>btstack_run_loop_add_data_source</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, btstack_run_loop.o(i.btstack_run_loop_add_data_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btstack_run_loop_add_data_source
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kbs_key_event_push
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_transport_ram_open
</UL>

<P><STRONG><a name="[2f6]"></a>btstack_run_loop_add_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, btstack_run_loop.o(i.btstack_run_loop_add_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btstack_run_loop_add_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_run_timer_handler
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timeout_start
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_run
</UL>

<P><STRONG><a name="[2f7]"></a>btstack_run_loop_disable_data_source_callbacks</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, btstack_run_loop.o(i.btstack_run_loop_disable_data_source_callbacks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = btstack_run_loop_disable_data_source_callbacks
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_transport_ram_close
</UL>

<P><STRONG><a name="[2f9]"></a>btstack_run_loop_embedded_execute_once</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_execute_once))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = btstack_run_loop_embedded_execute_once &rArr; btstack_run_loop_embedded_remove_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_remove_timer
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_reconstruct_higher_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_execute
</UL>

<P><STRONG><a name="[2bd]"></a>btstack_run_loop_embedded_get_instance</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_get_instance))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[2fd]"></a>btstack_run_loop_embedded_ticks_for_ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_ticks_for_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btstack_run_loop_embedded_ticks_for_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tick_get_tick_period_in_ms
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_set_timer
</UL>

<P><STRONG><a name="[2fe]"></a>btstack_run_loop_enable_data_source_callbacks</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, btstack_run_loop.o(i.btstack_run_loop_enable_data_source_callbacks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = btstack_run_loop_enable_data_source_callbacks
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kbs_key_event_push
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_transport_ram_open
</UL>

<P><STRONG><a name="[2c9]"></a>btstack_run_loop_execute</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, btstack_run_loop.o(i.btstack_run_loop_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btstack_run_loop_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_schedule
</UL>

<P><STRONG><a name="[2ff]"></a>btstack_run_loop_get_time_ms</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, btstack_run_loop.o(i.btstack_run_loop_get_time_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btstack_run_loop_get_time_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_packet
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_timestamp
</UL>

<P><STRONG><a name="[43b]"></a>btstack_run_loop_get_timer_context</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, btstack_run_loop.o(i.btstack_run_loop_get_timer_context))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timeout_handler
</UL>

<P><STRONG><a name="[2be]"></a>btstack_run_loop_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, btstack_run_loop.o(i.btstack_run_loop_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[300]"></a>btstack_run_loop_remove_data_source</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, btstack_run_loop.o(i.btstack_run_loop_remove_data_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btstack_run_loop_remove_data_source
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_event_process
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_transport_ram_close
</UL>

<P><STRONG><a name="[264]"></a>btstack_run_loop_remove_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, btstack_run_loop.o(i.btstack_run_loop_remove_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btstack_run_loop_remove_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timeout_stop
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timeout_start
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_packet_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_event_packet_handler
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_shutdown_connection
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_event_handler
</UL>

<P><STRONG><a name="[394]"></a>btstack_run_loop_set_data_source_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, btstack_run_loop.o(i.btstack_run_loop_set_data_source_handler))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kbs_key_event_push
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_transport_ram_open
</UL>

<P><STRONG><a name="[301]"></a>btstack_run_loop_set_timer</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, btstack_run_loop.o(i.btstack_run_loop_set_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = btstack_run_loop_set_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_run_timer_handler
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timeout_start
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_run
</UL>

<P><STRONG><a name="[43c]"></a>btstack_run_loop_set_timer_context</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, btstack_run_loop.o(i.btstack_run_loop_set_timer_context))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timeout_start
</UL>

<P><STRONG><a name="[38c]"></a>btstack_run_loop_set_timer_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, btstack_run_loop.o(i.btstack_run_loop_set_timer_handler))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timeout_start
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_run
</UL>

<P><STRONG><a name="[298]"></a>btstack_tlv_get_instance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, btstack_tlv.o(i.btstack_tlv_get_instance))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_event_packet_handler
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_persistent_ccc_write
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_persistent_ccc_restore
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_persistent_ccc_clear
</UL>

<P><STRONG><a name="[3ec]"></a>buffer_is_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[307]"></a>cal_intraslotoffset_compensate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, le_power.o(i.cal_intraslotoffset_compensate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cal_intraslotoffset_compensate &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_us
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Exit_LowPower
</UL>

<P><STRONG><a name="[2b1]"></a>char_for_nibble</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, btstack_util.o(i.char_for_nibble))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_addr_to_str
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_hexdump
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_for_high_nibble
</UL>

<P><STRONG><a name="[17b]"></a>check_lmp_pdu_lenth</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, le_link_layer.o(i.check_lmp_pdu_lenth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_lmp_pdu_lenth
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_Decode_link_layer_PDU
</UL>

<P><STRONG><a name="[1f6]"></a>config_radio_rx</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hw_radio.o(i.config_radio_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = config_radio_rx &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Receiver_Test
</UL>

<P><STRONG><a name="[1f9]"></a>config_radio_tx</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hw_radio.o(i.config_radio_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = config_radio_tx &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Transmitter_Test
</UL>

<P><STRONG><a name="[32a]"></a>delay_us</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_systick.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[330]"></a>device_information_service_server_init</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, device_information_service_server.o(i.device_information_service_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = device_information_service_server_init &rArr; gatt_server_get_get_handle_range_for_service_with_uuid16 &rArr; att_iterator_match_uuid16 &rArr; is_Bluetooth_Base_UUID &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_value_handle_for_characteristic_with_uuid16
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_get_handle_range_for_service_with_uuid16
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_service_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_keyboard_setup
</UL>

<P><STRONG><a name="[331]"></a>device_information_service_server_set_system_id</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, device_information_service_server.o(i.device_information_service_server_set_system_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = device_information_service_server_set_system_id
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_32
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_keyboard_setup
</UL>

<P><STRONG><a name="[204]"></a>do_Connection_Enter_LowPower</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, le_power.o(i.do_Connection_Enter_LowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = do_Connection_Enter_LowPower &rArr; rc32k_calib_finish &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Register_Callback
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_Disable_All_Tim_Intr_Except
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Bt_Clk_Avoid_Race
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Wait_For_us
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calib_start
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calib_finish
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_use_lf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_sleep_status
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[205]"></a>do_Connection_Exit_LowPower</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, le_power.o(i.do_Connection_Exit_LowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = do_Connection_Exit_LowPower &rArr; cal_intraslotoffset_compensate &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_intraslotoffset_compensate
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[18c]"></a>ext_rx_window_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, le_connection.o(i.ext_rx_window_init))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[18a]"></a>ext_rx_window_update</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, le_connection.o(i.ext_rx_window_update))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[351]"></a>extern_timer_list_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.extern_timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = extern_timer_list_handler &rArr; timer_list_handler &rArr; compare_reg_update &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[353]"></a>ff10_service_server_init</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, ff10_service_server.o(i.ff10_service_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ff10_service_server_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_service_handler
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_value_handle_for_characteristic_with_uuid128
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_get_handle_range_for_service_with_uuid128
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_client_configuration_handle_for_characteristic_with_uuid128
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_keyboard_setup
</UL>

<P><STRONG><a name="[2a6]"></a>ff11_char_send_report</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ff10_service_server.o(i.ff11_char_send_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ff11_char_send_report &rArr; att_server_register_can_send_now_callback &rArr; att_server_request_to_send_notification &rArr; att_dispatch_server_request_can_send_now_event &rArr; l2cap_request_can_send_fix_channel_now_event &rArr; l2cap_notify_channel_can_send &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_can_send_now_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
</UL>

<P><STRONG><a name="[357]"></a>fix_data_average</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, xincx_saadc.o(i.fix_data_average))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fix_data_average
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xincx_saadc_irq_handler
</UL>

<P><STRONG><a name="[35a]"></a>fpga_spi_read</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rf_driver.o(i.fpga_spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fpga_spi_read &rArr; SER_READ &rArr; _HWradio_ReadNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbit
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbit
</UL>

<P><STRONG><a name="[35b]"></a>fpga_spi_write</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rf_driver.o(i.fpga_spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fpga_spi_write &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbit
</UL>

<P><STRONG><a name="[39]"></a>fputc</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, bsp_retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[35e]"></a>gap_advertisements_enable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hci.o(i.gap_advertisements_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = gap_advertisements_enable &rArr; hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_reset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35f]"></a>gap_advertisements_set_data</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hci.o(i.gap_advertisements_set_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = gap_advertisements_set_data &rArr; gap_advertisments_changed &rArr; hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_advertisments_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_reset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[361]"></a>gap_advertisements_set_params</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, sm.o(i.gap_advertisements_set_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = gap_advertisements_set_params &rArr; hci_le_advertisements_set_params &rArr; gap_advertisments_changed &rArr; hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertisements_set_params
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_reset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25b]"></a>gap_authenticated</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hci.o(i.gap_authenticated))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gap_authenticated &rArr; sm_get_connection_for_handle &rArr; hci_connection_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_get_connection_for_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_event_packet_handler
</UL>

<P><STRONG><a name="[29b]"></a>gap_authorization_state</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hci.o(i.gap_authorization_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gap_authorization_state &rArr; sm_get_connection_for_handle &rArr; hci_connection_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_get_connection_for_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_process_validated_request
</UL>

<P><STRONG><a name="[34b]"></a>gap_connection_parameter_range_included</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, hci.o(i.gap_connection_parameter_range_included))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gap_connection_parameter_range_included
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_le_signaling_handler_dispatch
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
</UL>

<P><STRONG><a name="[25a]"></a>gap_encryption_key_size</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hci.o(i.gap_encryption_key_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gap_encryption_key_size &rArr; sm_get_connection_for_handle &rArr; hci_connection_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_get_connection_for_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_event_packet_handler
</UL>

<P><STRONG><a name="[34a]"></a>gap_get_connection_parameter_range</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hci.o(i.gap_get_connection_parameter_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gap_get_connection_parameter_range &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_le_signaling_handler_dispatch
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
</UL>

<P><STRONG><a name="[364]"></a>gap_le_get_own_address</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hci.o(i.gap_le_get_own_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gap_le_get_own_address &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init_setup
</UL>

<P><STRONG><a name="[365]"></a>gap_local_bd_addr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hci.o(i.gap_local_bd_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gap_local_bd_addr &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[287]"></a>gap_reconnect_security_setup_active</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sm.o(i.gap_reconnect_security_setup_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gap_reconnect_security_setup_active &rArr; sm_get_connection_for_handle &rArr; hci_connection_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_get_connection_for_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_run_for_context
</UL>

<P><STRONG><a name="[367]"></a>gap_scan_response_set_data</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hci.o(i.gap_scan_response_set_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = gap_scan_response_set_data &rArr; gap_advertisments_changed &rArr; hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_advertisments_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_reset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25c]"></a>gap_secure_connection</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hci.o(i.gap_secure_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gap_secure_connection &rArr; sm_get_connection_for_handle &rArr; hci_connection_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_get_connection_for_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_event_packet_handler
</UL>

<P><STRONG><a name="[356]"></a>gatt_server_get_client_configuration_handle_for_characteristic_with_uuid128</STRONG> (Thumb, 154 bytes, Stack size 72 bytes, att_db.o(i.gatt_server_get_client_configuration_handle_for_characteristic_with_uuid128))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gatt_server_get_client_configuration_handle_for_characteristic_with_uuid128 &rArr; att_iterator_match_uuid &rArr; att_iterator_match_uuid16 &rArr; is_Bluetooth_Base_UUID &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_128
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_match_uuid16
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_match_uuid
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_fetch_next
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff10_service_server_init
</UL>

<P><STRONG><a name="[2ae]"></a>gatt_server_get_client_configuration_handle_for_characteristic_with_uuid16</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, att_db.o(i.gatt_server_get_client_configuration_handle_for_characteristic_with_uuid16))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gatt_server_get_client_configuration_handle_for_characteristic_with_uuid16 &rArr; gatt_server_get_descriptor_handle_for_characteristic_with_uuid16 &rArr; att_iterator_match_uuid16 &rArr; is_Bluetooth_Base_UUID &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_descriptor_handle_for_characteristic_with_uuid16
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_service_server_init
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_init
</UL>

<P><STRONG><a name="[368]"></a>gatt_server_get_descriptor_handle_for_characteristic_with_uuid16</STRONG> (Thumb, 142 bytes, Stack size 64 bytes, att_db.o(i.gatt_server_get_descriptor_handle_for_characteristic_with_uuid16))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gatt_server_get_descriptor_handle_for_characteristic_with_uuid16 &rArr; att_iterator_match_uuid16 &rArr; is_Bluetooth_Base_UUID &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_match_uuid16
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_fetch_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_client_configuration_handle_for_characteristic_with_uuid16
</UL>

<P><STRONG><a name="[354]"></a>gatt_server_get_get_handle_range_for_service_with_uuid128</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, att_db.o(i.gatt_server_get_get_handle_range_for_service_with_uuid128))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gatt_server_get_get_handle_range_for_service_with_uuid128 &rArr; att_iterator_match_uuid16 &rArr; is_Bluetooth_Base_UUID &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_128
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_match_uuid16
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_fetch_next
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff10_service_server_init
</UL>

<P><STRONG><a name="[2ac]"></a>gatt_server_get_get_handle_range_for_service_with_uuid16</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, att_db.o(i.gatt_server_get_get_handle_range_for_service_with_uuid16))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gatt_server_get_get_handle_range_for_service_with_uuid16 &rArr; att_iterator_match_uuid16 &rArr; is_Bluetooth_Base_UUID &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_match_uuid16
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_fetch_next
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_information_service_server_init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_service_server_init
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_init
</UL>

<P><STRONG><a name="[355]"></a>gatt_server_get_value_handle_for_characteristic_with_uuid128</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, att_db.o(i.gatt_server_get_value_handle_for_characteristic_with_uuid128))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gatt_server_get_value_handle_for_characteristic_with_uuid128 &rArr; att_iterator_match_uuid &rArr; att_iterator_match_uuid16 &rArr; is_Bluetooth_Base_UUID &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_128
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_match_uuid
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_fetch_next
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff10_service_server_init
</UL>

<P><STRONG><a name="[2ad]"></a>gatt_server_get_value_handle_for_characteristic_with_uuid16</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, att_db.o(i.gatt_server_get_value_handle_for_characteristic_with_uuid16))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gatt_server_get_value_handle_for_characteristic_with_uuid16 &rArr; att_iterator_match_uuid16 &rArr; is_Bluetooth_Base_UUID &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_match_uuid16
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_fetch_next
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_information_service_server_init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_service_server_init
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_init
</UL>

<P><STRONG><a name="[449]"></a>gpio_direction_input</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, bsp_gpio.o(i.gpio_direction_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_direction_input
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xinc_saadc_channel_init
</UL>

<P><STRONG><a name="[3d1]"></a>gpio_direction_output</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_gpio.o(i.gpio_direction_output))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[448]"></a>gpio_fun_inter</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bsp_gpio.o(i.gpio_fun_inter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_fun_inter
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xinc_saadc_channel_init
</UL>

<P><STRONG><a name="[24b]"></a>gpio_fun_sel</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, bsp_gpio.o(i.gpio_fun_sel))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xinc_saadc_channel_init
</UL>

<P><STRONG><a name="[141]"></a>gpio_mux_ctl</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_gpio.o(i.gpio_mux_ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_mux_ctl
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xinc_saadc_channel_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPR_CTL
</UL>

<P><STRONG><a name="[20b]"></a>gpio_output_high</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_gpio.o(i.gpio_output_high))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xincx_saadc_sample
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_run_timer_handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Handler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Handler
</UL>

<P><STRONG><a name="[20a]"></a>gpio_output_low</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_gpio.o(i.gpio_output_low))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xincx_saadc_sample
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_run_timer_handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Handler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Handler
</UL>

<P><STRONG><a name="[2fa]"></a>hal_tick_get_tick_period_in_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, btstack_tick.o(i.hal_tick_get_tick_period_in_ms))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_ticks_for_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_get_time_ms
</UL>

<P><STRONG><a name="[2fb]"></a>hal_tick_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, btstack_tick.o(i.hal_tick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_init
</UL>

<P><STRONG><a name="[2fc]"></a>hal_tick_set_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, btstack_tick.o(i.hal_tick_set_handler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_init
</UL>

<P><STRONG><a name="[28e]"></a>hci_add_event_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hci.o(i.hci_add_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_add_event_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_keyboard_setup
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[27f]"></a>hci_can_send_acl_le_packet_now</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hci.o(i.hci_can_send_acl_le_packet_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hci_can_send_acl_le_packet_now &rArr; hci_number_free_acl_slots_for_connection_type
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_transport_can_send_prepared_packet_now
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_free_acl_slots_for_connection_type
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_packet_handler
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_notify_channel_can_send
</UL>

<P><STRONG><a name="[379]"></a>hci_can_send_acl_packet_now</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hci.o(i.hci_can_send_acl_packet_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hci_can_send_acl_packet_now &rArr; hci_can_send_prepared_acl_packet_now &rArr; hci_number_free_acl_slots_for_handle &rArr; hci_connection_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_prepared_acl_packet_now
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connectionless
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_can_send_fixed_channel_packet_now
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_le_signaling_packet
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_run
</UL>

<P><STRONG><a name="[2e5]"></a>hci_can_send_command_packet_now</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hci.o(i.hci_can_send_command_packet_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_can_send_command_packet_now
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd_va_arg
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_run
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_run
</UL>

<P><STRONG><a name="[37a]"></a>hci_can_send_prepared_acl_packet_now</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hci.o(i.hci_can_send_prepared_acl_packet_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hci_can_send_prepared_acl_packet_now &rArr; hci_number_free_acl_slots_for_handle &rArr; hci_connection_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_free_acl_slots_for_handle
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_transport_can_send_prepared_packet_now
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_prepared_connectionless
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_buffer
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_acl_packet_now
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_fragments
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
</UL>

<P><STRONG><a name="[37c]"></a>hci_cmd_create_from_template</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, hci_cmd.o(i.hci_cmd_create_from_template))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hci_cmd_create_from_template &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd_va_arg
</UL>

<P><STRONG><a name="[348]"></a>hci_connection_for_bd_addr_and_type</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, hci.o(i.hci_connection_for_bd_addr_and_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hci_connection_for_bd_addr_and_type &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_next
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_has_next
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
</UL>

<P><STRONG><a name="[236]"></a>hci_connection_for_handle</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hci.o(i.hci_connection_for_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hci_connection_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_next
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_has_next
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_event_process
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_get_connection_for_handle
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_for_handle
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_le_signaling_handler_dispatch
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_acl_handler
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_buffer
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_free_acl_slots_for_handle
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_get_connection_for_handle
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_handler
</UL>

<P><STRONG><a name="[28a]"></a>hci_connections_get_iterator</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hci.o(i.hci_connections_get_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_connections_get_iterator
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_init
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_handle_can_send_now
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_run
</UL>

<P><STRONG><a name="[a6]"></a>hci_dump_enable_log_level</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hci_dump.o(i.hci_dump_enable_log_level), UNUSED, KEPT)

<P><STRONG><a name="[2a8]"></a>hci_dump_log</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, hci_dump.o(i.hci_dump_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hci_dump_log &rArr; hci_dump_log_va_arg &rArr; printf_timestamp &rArr; btstack_run_loop_get_time_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_log_va_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
</UL>

<P><STRONG><a name="[37d]"></a>hci_dump_log_va_arg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hci_dump.o(i.hci_dump_log_va_arg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hci_dump_log_va_arg &rArr; printf_timestamp &rArr; btstack_run_loop_get_time_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_log
</UL>

<P><STRONG><a name="[2bf]"></a>hci_dump_open</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hci_dump.o(i.hci_dump_open))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[37f]"></a>hci_dump_packet</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, hci_dump.o(i.hci_dump_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_32
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_endian_store_32
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_timestamp
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_hexdump
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_get_time_ms
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_dispatch_event
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_notify_channel_can_send
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_le_signaling_handler_dispatch
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd_packet
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_fragments
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_run
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_event
</UL>

<P><STRONG><a name="[385]"></a>hci_emit_state</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hci.o(i.hci_emit_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = hci_emit_state &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_event
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_control
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init_done
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_halting_timeout_handler
</UL>

<P><STRONG><a name="[3b2]"></a>hci_get_outgoing_packet_buffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hci.o(i.hci_get_outgoing_packet_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_prepared_connectionless
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_outgoing_buffer
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connectionless
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_le_signaling_packet
</UL>

<P><STRONG><a name="[2e4]"></a>hci_get_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hci.o(i.hci_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_run
</UL>

<P><STRONG><a name="[2df]"></a>hci_halting_defer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hci.o(i.hci_halting_defer))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_event_handler
</UL>

<P><STRONG><a name="[2c1]"></a>hci_init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, hci.o(i.hci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hci_init &rArr; hci_state_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_state_reset
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[3b9]"></a>hci_is_packet_buffer_reserved</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hci.o(i.hci_is_packet_buffer_reserved))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_prepared_connectionless
</UL>

<P><STRONG><a name="[362]"></a>hci_le_advertisements_set_params</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, hci.o(i.hci_le_advertisements_set_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = hci_le_advertisements_set_params &rArr; gap_advertisments_changed &rArr; hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_advertisments_changed
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_advertisements_set_params
</UL>

<P><STRONG><a name="[3af]"></a>hci_non_flushable_packet_boundary_flag_supported</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hci.o(i.hci_non_flushable_packet_boundary_flag_supported))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_create_signaling_internal
</UL>

<P><STRONG><a name="[37b]"></a>hci_number_free_acl_slots_for_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hci.o(i.hci_number_free_acl_slots_for_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hci_number_free_acl_slots_for_handle &rArr; hci_connection_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_handle
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_free_acl_slots_for_connection_type
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_prepared_acl_packet_now
</UL>

<P><STRONG><a name="[2c8]"></a>hci_power_control</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, hci.o(i.hci_power_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = hci_power_control &rArr; hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_state
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_transition_to_initializing
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_control_sleep
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_control_on
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_control_off
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_main
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[3b4]"></a>hci_register_acl_packet_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hci.o(i.hci_register_acl_packet_handler))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_init
</UL>

<P><STRONG><a name="[342]"></a>hci_release_packet_buffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hci.o(i.hci_release_packet_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_release_packet_buffer
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd_va_arg
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_buffer
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_fragments
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
</UL>

<P><STRONG><a name="[393]"></a>hci_reserve_packet_buffer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hci.o(i.hci_reserve_packet_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_reserve_packet_buffer
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connectionless
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_le_signaling_packet
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd_va_arg
</UL>

<P><STRONG><a name="[391]"></a>hci_send_acl_packet_buffer</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, hci.o(i.hci_send_acl_packet_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = hci_send_acl_packet_buffer &rArr; hci_send_acl_packet_fragments &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_handle
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_release_packet_buffer
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_prepared_acl_packet_now
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_fragments
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_transport_packet_sent
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_prepared_connectionless
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_le_signaling_packet
</UL>

<P><STRONG><a name="[2ce]"></a>hci_send_cmd</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, hci.o(i.hci_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd_va_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_run
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initialization_timeout_handler
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_run
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_aes128_start
</UL>

<P><STRONG><a name="[38b]"></a>hci_send_cmd_packet</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, hci.o(i.hci_send_cmd_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = hci_send_cmd_packet &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_packet
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_bd_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd_va_arg
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_run
</UL>

<P><STRONG><a name="[392]"></a>hci_send_cmd_va_arg</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, hci.o(i.hci_send_cmd_va_arg))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_command_packet_now
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_create_from_template
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd_packet
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reserve_packet_buffer
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_release_packet_buffer
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_transport_packet_sent
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd
</UL>

<P><STRONG><a name="[2c0]"></a>hci_transport_ram_instance</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hci_transport_ram.o(i.hci_transport_ram_instance))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[405]"></a>hids_device_get_instance_for_con_handle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hids_device_skyworth.o(i.hids_device_get_instance_for_con_handle))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
</UL>

<P><STRONG><a name="[397]"></a>hids_device_init</STRONG> (Thumb, 900 bytes, Stack size 32 bytes, hids_device_skyworth.o(i.hids_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = hids_device_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_value_handle_for_characteristic_with_uuid16
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_get_handle_range_for_service_with_uuid16
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_client_configuration_handle_for_characteristic_with_uuid16
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_service_handler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_log
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_keyboard_setup
</UL>

<P><STRONG><a name="[3c2]"></a>hids_device_register_packet_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hids_device_skyworth.o(i.hids_device_register_packet_handler))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_keyboard_setup
</UL>

<P><STRONG><a name="[398]"></a>hids_device_request_can_send_now_event</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hids_device_skyworth.o(i.hids_device_request_can_send_now_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = hids_device_request_can_send_now_event &rArr; att_server_register_can_send_now_callback &rArr; att_server_request_to_send_notification &rArr; att_dispatch_server_request_can_send_now_event &rArr; l2cap_request_can_send_fix_channel_now_event &rArr; l2cap_notify_channel_can_send &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_can_send_now_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_event_process
</UL>

<P><STRONG><a name="[399]"></a>hids_device_request_voice_can_send_now_event</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hids_device_skyworth.o(i.hids_device_request_voice_can_send_now_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = hids_device_request_voice_can_send_now_event &rArr; att_server_register_can_send_now_callback &rArr; att_server_request_to_send_notification &rArr; att_dispatch_server_request_can_send_now_event &rArr; l2cap_request_can_send_fix_channel_now_event &rArr; l2cap_notify_channel_can_send &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_can_send_now_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sky_keyEvt_can_send_now
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
</UL>

<P><STRONG><a name="[39a]"></a>hids_device_send_keyboard_report</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hids_device_skyworth.o(i.hids_device_send_keyboard_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = hids_device_send_keyboard_report &rArr; att_server_notify &rArr; l2cap_send_prepared_connectionless &rArr; hci_send_acl_packet_buffer &rArr; hci_send_acl_packet_fragments &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_voice_report
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keyboard_report
</UL>

<P><STRONG><a name="[39b]"></a>hids_device_send_media_report</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, hids_device_skyworth.o(i.hids_device_send_media_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = hids_device_send_media_report &rArr; att_server_notify &rArr; l2cap_send_prepared_connectionless &rArr; hci_send_acl_packet_buffer &rArr; hci_send_acl_packet_fragments &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_notify
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_media_report
</UL>

<P><STRONG><a name="[3a5]"></a>kb_ring_buffer_empty</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, xc_kbs_event.o(i.kb_ring_buffer_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = kb_ring_buffer_empty &rArr; btstack_ring_buffer_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_ring_buffer_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_event_process
</UL>

<P><STRONG><a name="[3a6]"></a>kbs_key_event_push</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, xc_kbs_event.o(i.kbs_key_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = kbs_key_event_push &rArr; push_kb_to_ring_buff &rArr; btstack_ring_buffer_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_set_data_source_handler
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_enable_data_source_callbacks
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_add_data_source
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_kb_to_ring_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xc620_kbs_scan
</UL>

<P><STRONG><a name="[446]"></a>keyCode2Type</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, xc_kbs_event.o(i.keyCode2Type))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xc620_kbs_scan
</UL>

<P><STRONG><a name="[445]"></a>keyValue2code</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, xc_kbs_event.o(i.keyValue2code))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xc620_kbs_scan
</UL>

<P><STRONG><a name="[56]"></a>key_event_process</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, xc_kbs_event.o(i.key_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = key_event_process &rArr; hids_device_request_can_send_now_event &rArr; att_server_register_can_send_now_callback &rArr; att_server_request_to_send_notification &rArr; att_dispatch_server_request_can_send_now_event &rArr; l2cap_request_can_send_fix_channel_now_event &rArr; l2cap_notify_channel_can_send &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_request_can_send_now_event
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_remove_data_source
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_kb_from_ring_buff
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_ring_buffer_empty
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xc_kbs_event.o(i.kbs_key_event_push)
</UL>
<P><STRONG><a name="[250]"></a>l2cap_can_send_fixed_channel_packet_now</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, l2cap.o(i.l2cap_can_send_fixed_channel_packet_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = l2cap_can_send_fixed_channel_packet_now &rArr; hci_can_send_acl_packet_now &rArr; hci_can_send_prepared_acl_packet_now &rArr; hci_number_free_acl_slots_for_handle &rArr; hci_connection_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_acl_packet_now
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_dispatch_server_can_send_now
</UL>

<P><STRONG><a name="[3b1]"></a>l2cap_create_signaling_le</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, l2cap_signaling.o(i.l2cap_create_signaling_le))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = l2cap_create_signaling_le &rArr; l2cap_create_signaling_internal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_create_signaling_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_le_signaling_packet
</UL>

<P><STRONG><a name="[295]"></a>l2cap_get_outgoing_buffer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, l2cap.o(i.l2cap_get_outgoing_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = l2cap_get_outgoing_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_get_outgoing_packet_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_notify
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_process_validated_request
</UL>

<P><STRONG><a name="[2c2]"></a>l2cap_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, l2cap.o(i.l2cap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l2cap_init &rArr; hci_add_event_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_add_event_handler
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_add
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_register_acl_packet_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_keyboard_setup
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[260]"></a>l2cap_max_le_mtu</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, l2cap.o(i.l2cap_max_le_mtu))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_event_packet_handler
</UL>

<P><STRONG><a name="[3b7]"></a>l2cap_next_sig_id</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, l2cap_signaling.o(i.l2cap_next_sig_id))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_run
</UL>

<P><STRONG><a name="[24e]"></a>l2cap_register_fixed_channel</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, l2cap.o(i.l2cap_register_fixed_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = l2cap_register_fixed_channel &rArr; l2cap_fixed_channel_for_channel_id
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_fixed_channel_for_channel_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_dispatch_register_server
</UL>

<P><STRONG><a name="[2c3]"></a>l2cap_register_packet_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, l2cap.o(i.l2cap_register_packet_handler))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[29c]"></a>l2cap_release_packet_buffer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, l2cap.o(i.l2cap_release_packet_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = l2cap_release_packet_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_release_packet_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_process_validated_request
</UL>

<P><STRONG><a name="[254]"></a>l2cap_request_can_send_fix_channel_now_event</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, l2cap.o(i.l2cap_request_can_send_fix_channel_now_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = l2cap_request_can_send_fix_channel_now_event &rArr; l2cap_notify_channel_can_send &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_notify_channel_can_send
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_fixed_channel_for_channel_id
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_dispatch_server_request_can_send_now_event
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_packet_handler
</UL>

<P><STRONG><a name="[294]"></a>l2cap_reserve_packet_buffer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, l2cap.o(i.l2cap_reserve_packet_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = l2cap_reserve_packet_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reserve_packet_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_notify
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_process_validated_request
</UL>

<P><STRONG><a name="[3aa]"></a>l2cap_run</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, l2cap.o(i.l2cap_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = l2cap_run &rArr; l2cap_send_le_signaling_packet &rArr; hci_send_acl_packet_buffer &rArr; hci_send_acl_packet_fragments &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_next
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_has_next
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connections_get_iterator
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_next_sig_id
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_le_signaling_packet
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_acl_packet_now
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register_signaling_response
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_hci_event_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_acl_handler
</UL>

<P><STRONG><a name="[3b8]"></a>l2cap_send_connectionless</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, l2cap.o(i.l2cap_send_connectionless))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = l2cap_send_connectionless &rArr; l2cap_send_prepared_connectionless &rArr; hci_send_acl_packet_buffer &rArr; hci_send_acl_packet_fragments &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_prepared_connectionless
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reserve_packet_buffer
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_get_outgoing_packet_buffer
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_acl_packet_now
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[296]"></a>l2cap_send_prepared_connectionless</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, l2cap.o(i.l2cap_send_prepared_connectionless))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = l2cap_send_prepared_connectionless &rArr; hci_send_acl_packet_buffer &rArr; hci_send_acl_packet_fragments &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_buffer
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_is_packet_buffer_reserved
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_get_outgoing_packet_buffer
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_prepared_acl_packet_now
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_notify
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connectionless
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_process_validated_request
</UL>

<P><STRONG><a name="[171]"></a>ldo_off_debug</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rf_driver.o(i.ldo_off_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ldo_off_debug &rArr; w_regbit &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w_regbit
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_Go_To_Idle_State
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
</UL>

<P><STRONG><a name="[16e]"></a>ldo_on_debug</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rf_driver.o(i.ldo_on_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ldo_on_debug &rArr; w_regbit &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w_regbit
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
</UL>

<P><STRONG><a name="[3bb]"></a>le_device_db_add</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, le_device_db_memory.o(i.le_device_db_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = le_device_db_add &rArr; bd_addr_to_str &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_key
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_addr_to_str
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_key_distribution_handle_all_received
</UL>

<P><STRONG><a name="[3bd]"></a>le_device_db_encryption_set</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, le_device_db_memory.o(i.le_device_db_encryption_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = le_device_db_encryption_set &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_key_distribution_handle_all_received
</UL>

<P><STRONG><a name="[3be]"></a>le_device_db_info</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, le_device_db_memory.o(i.le_device_db_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = le_device_db_info &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_index
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_key_distribution_handle_all_received
</UL>

<P><STRONG><a name="[2c4]"></a>le_device_db_init</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, le_device_db_memory.o(i.le_device_db_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = le_device_db_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_keyboard_setup
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[42e]"></a>le_device_db_max_count</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, le_device_db_memory.o(i.le_device_db_max_count))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_key_distribution_handle_all_received
</UL>

<P><STRONG><a name="[3bf]"></a>le_device_db_remove</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, le_device_db_memory.o(i.le_device_db_remove))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_event_packet_handler
</UL>

<P><STRONG><a name="[425]"></a>le_device_db_set_local_bd_addr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, le_device_db_memory.o(i.le_device_db_set_local_bd_addr))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_event_packet_handler
</UL>

<P><STRONG><a name="[3c3]"></a>le_rf_init</STRONG> (Thumb, 924 bytes, Stack size 8 bytes, rf_driver.o(i.le_rf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = le_rf_init &rArr; ble_rccali &rArr; wbit &rArr; fpga_spi_write &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbit
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rccali
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[235]"></a>little_endian_read_16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, btstack_util.o(i.little_endian_read_16))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_service_write_callback
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdu_handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_event_packet_handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_write_callback
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_packet_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_event_packet_handler
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_request
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_write_request
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_write_command
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_multiple_request2
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_group_type_request2
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_prepare_write_request
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_persistent_ccc_cache
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_match_uuid16
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_match_uuid
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_fetch_next
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_le_signaling_handler_dispatch
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_acl_le_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_acl_handler
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd_packet
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_buffer
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_fragments
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_run
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_event_handler
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_event_handler
</UL>

<P><STRONG><a name="[3c7]"></a>little_endian_read_32</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, btstack_util.o(i.little_endian_read_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = little_endian_read_32
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_ph2_tk
</UL>

<P><STRONG><a name="[239]"></a>little_endian_store_16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, btstack_util.o(i.little_endian_store_16))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_information_service_server_set_system_id
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_get_handle_range_for_service_with_uuid16
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_service_read_callback
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback_handle_little_endian_16
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_voice_can_send_now
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_emit_event_with_uint8
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_emit_event_with_buff
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_emit_event
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_can_send_now
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_prepared_connectionless
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_packet
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_setup_event_base
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdu_handler
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_index
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_process_validated_request
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_persistent_ccc_restore
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_value_indication_notify_client
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mtu_exchange_complete
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_request
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_error
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_handle_value
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_type_request2
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_group_type_request2
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_find_information_request2
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_find_by_type_value_request2
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_notify_channel_can_send
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_le_signaling_handler_dispatch
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_fragments
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_disconnection_complete
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_handler
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_create_signaling_internal
</UL>

<P><STRONG><a name="[332]"></a>little_endian_store_32</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, btstack_util.o(i.little_endian_store_32))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_information_service_server_set_system_id
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_packet
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_passkey
</UL>

<P><STRONG><a name="[22f]"></a>load_advDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, le_power.o(i.load_advDelay))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Set_Next_Advertising_Event_Start_Timer
</UL>

<P><STRONG><a name="[26b]"></a>log_info_hexdump</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, btstack_util.o(i.log_info_hexdump))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_request
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_type_request2
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_group_type_request2
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_find_by_type_value_request2
</UL>

<P><STRONG><a name="[2dc]"></a>log_info_key</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, btstack_util.o(i.log_info_key))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_setup_tk
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_ir
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_er
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_stk
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_ph4_ltk
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_ph3_ltk
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_d
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_csrk
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_b
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_dkg_irk
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_dkg_dhk
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1_t3
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1_t1
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_add
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_handle_encryption_result
</UL>

<P><STRONG><a name="[43e]"></a>log_pending_hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.log_pending_hook))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[c1]"></a>main</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = main &rArr; ble_mainloop &rArr; ble_linklayer_schedule &rArr; BTms_Sched &rArr; LE_LL_Check_For_Pending_Connection_Completes &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xincx_saadc_sample
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_direction_output
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_scan_response_set_data
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_advertisements_set_params
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_advertisements_set_data
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_advertisements_enable
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_timer_list_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_set_timer
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_add_timer
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_main
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mainloop
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_execute
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_gpio
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bd_addr
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[109]"></a>memset_ble_sleep</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, le_power.o(i.memset_ble_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Initialise
</UL>

<P><STRONG><a name="[206]"></a>native_bt_clk_restore_done</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, le_power.o(i.native_bt_clk_restore_done))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSLCirq_IRQ_Handler
</UL>

<P><STRONG><a name="[17e]"></a>native_bt_clk_result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, le_power.o(i.native_bt_clk_result))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Check_Timers
</UL>

<P><STRONG><a name="[40a]"></a>nrf_atfifo_item_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_atfifo.o(i.nrf_atfifo_item_free))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[407]"></a>nrf_atfifo_item_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_atfifo.o(i.nrf_atfifo_item_get))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[3d7]"></a>nrf_atomic_flag_clear</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_atomic_flag_clear &rArr; nrf_atomic_u32_and &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_get
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_put
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_get
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_alloc
</UL>

<P><STRONG><a name="[3cd]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_put
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[3cb]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_atomic_flag_set &rArr; nrf_atomic_u32_or &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[3db]"></a>nrf_atomic_flag_set_fetch</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_set_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_get
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_put
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_get
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_alloc
</UL>

<P><STRONG><a name="[303]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_atomic.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_atomic_u32_add &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[3d8]"></a>nrf_atomic_u32_and</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_atomic.o(i.nrf_atomic_u32_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_atomic_u32_and &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
</UL>

<P><STRONG><a name="[3d9]"></a>nrf_atomic_u32_fetch_and</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_atomic_u32_fetch_and &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[3dc]"></a>nrf_atomic_u32_fetch_or</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_atomic_u32_fetch_or &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
</UL>

<P><STRONG><a name="[33e]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_atomic_u32_fetch_store &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>

<P><STRONG><a name="[3da]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_atomic_u32_or &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[3dd]"></a>nrf_atomic_u32_sub</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_atomic.o(i.nrf_atomic_u32_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_atomic_u32_sub &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[3de]"></a>nrf_balloc_alloc</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_balloc_alloc &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[3df]"></a>nrf_balloc_free</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_balloc_free &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>

<P><STRONG><a name="[30a]"></a>nrf_cli_fprintf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrf_cli.o(i.nrf_cli_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nrf_cli_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_xinc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_led
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_app_size
</UL>

<P><STRONG><a name="[325]"></a>nrf_cli_help_print</STRONG> (Thumb, 570 bytes, Stack size 88 bytes, nrf_cli.o(i.nrf_cli_help_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_cli_help_print &rArr; format_offset_string_print &rArr; cursor_right_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_next_line_move
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_xinc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_led
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_log_msg_warning
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_log_msg_error
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_error
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_app_size
</UL>

<P><STRONG><a name="[7]"></a>nrf_cli_print_stream</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_cli.o(i.nrf_cli_print_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_cli_print_stream &rArr; cli_write
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[319]"></a>nrf_drv_uart_init</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = nrf_drv_uart_init &rArr; nrfx_uart_init &rArr; apply_config &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_enable
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[30f]"></a>nrf_fprintf</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nrf_fprintf.o(i.nrf_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_up_move
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_next_line_move
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_left_move
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_down_move
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cursor_save
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cursor_restore
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_clear_eos
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[306]"></a>nrf_fprintf_buffer_flush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_fprintf.o(i.nrf_fprintf_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[3e0]"></a>nrf_fprintf_fmt</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, nrf_fprintf_format.o(i.nrf_fprintf_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>

<P><STRONG><a name="[371]"></a>nrf_fstorage_erase</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, xinc_fstorage.o(i.nrf_fstorage_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_fstorage_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[372]"></a>nrf_fstorage_write</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, xinc_fstorage.o(i.nrf_fstorage_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = nrf_fstorage_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_aligned32
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
</UL>

<P><STRONG><a name="[3e5]"></a>nrf_log_backend_serial_put</STRONG> (Thumb, 182 bytes, Stack size 128 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_uart_put
</UL>

<P><STRONG><a name="[406]"></a>nrf_log_color_id_get</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_color_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[3d4]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 510 bytes, Stack size 96 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + In Cycle
<LI>Call Chain = nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[31c]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_init
</UL>

<P><STRONG><a name="[3f0]"></a>nrf_log_frontend_std_2</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[3e9]"></a>nrf_log_hexdump_entry_process</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, nrf_log_str_formatter.o(i.nrf_log_hexdump_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = nrf_log_hexdump_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[3e8]"></a>nrf_log_std_entry_process</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, nrf_log_str_formatter.o(i.nrf_log_std_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[3ed]"></a>nrf_memobj_alloc</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[3f3]"></a>nrf_memobj_free</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[3e6]"></a>nrf_memobj_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_memobj_get &rArr; nrf_atomic_u32_add &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[3ea]"></a>nrf_memobj_put</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_memobj_put &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[3e7]"></a>nrf_memobj_read</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_memobj_read &rArr; memobj_op &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[3ee]"></a>nrf_memobj_write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_memobj_write &rArr; memobj_op &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[3f4]"></a>nrf_ringbuf_alloc</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, nrf_ringbuf.o(i.nrf_ringbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = nrf_ringbuf_alloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_try
</UL>

<P><STRONG><a name="[31e]"></a>nrf_ringbuf_cpy_get</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, nrf_ringbuf.o(i.nrf_ringbuf_cpy_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_ringbuf_cpy_get &rArr; nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_read
</UL>

<P><STRONG><a name="[31f]"></a>nrf_ringbuf_cpy_put</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, nrf_ringbuf.o(i.nrf_ringbuf_cpy_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_ringbuf_cpy_put &rArr; nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_write
</UL>

<P><STRONG><a name="[323]"></a>nrf_ringbuf_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_ringbuf.o(i.nrf_ringbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_ringbuf_free &rArr; nrf_atomic_flag_clear &rArr; nrf_atomic_u32_and &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_write
</UL>

<P><STRONG><a name="[321]"></a>nrf_ringbuf_get</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, nrf_ringbuf.o(i.nrf_ringbuf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrf_ringbuf_get &rArr; nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_write
</UL>

<P><STRONG><a name="[31d]"></a>nrf_ringbuf_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_ringbuf.o(i.nrf_ringbuf_init))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_init
</UL>

<P><STRONG><a name="[3f5]"></a>nrf_ringbuf_put</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrf_ringbuf.o(i.nrf_ringbuf_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_ringbuf_put &rArr; nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[3f7]"></a>nrf_strerror_find</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_strerror.o(i.nrf_strerror_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>

<P><STRONG><a name="[3f6]"></a>nrf_strerror_get</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, nrf_strerror.o(i.nrf_strerror_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_strerror_get &rArr; nrf_strerror_find
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xincx_saadc_channel_init
</UL>

<P><STRONG><a name="[149]"></a>nrfx_gpiote_irq_handler</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, nrfx_gpiote.o(i.nrfx_gpiote_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_gpiote_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>

<P><STRONG><a name="[21b]"></a>nrfx_uart_1_irq_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrfx_uart_1_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_1_irq_handler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>

<P><STRONG><a name="[3e1]"></a>nrfx_uart_init</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, nrfx_uart.o(i.nrfx_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = nrfx_uart_init &rArr; apply_config &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xc_uart_clk_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[3fa]"></a>nrfx_uart_rx</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrfx_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_uart_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_try
</UL>

<P><STRONG><a name="[43f]"></a>nrfx_uart_rx_abort</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_rx_abort))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
</UL>

<P><STRONG><a name="[3e2]"></a>nrfx_uart_tx</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrfx_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_uart_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[320]"></a>nrfx_uart_tx_in_progress</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_write
</UL>

<P><STRONG><a name="[318]"></a>nrfx_uart_uninit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrfx_uart_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_uart_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_uninit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_enable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_uart_panic_set
</UL>

<P><STRONG><a name="[3a8]"></a>pop_kb_from_ring_buff</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, xc_kbs_event.o(i.pop_kb_from_ring_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pop_kb_from_ring_buff &rArr; btstack_ring_buffer_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_ring_buffer_read
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sky_keyEvt_can_send_now
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_event_process
</UL>

<P><STRONG><a name="[381]"></a>printf_hexdump</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, btstack_util.o(i.printf_hexdump))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_for_nibble
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_for_high_nibble
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_packet
</UL>

<P><STRONG><a name="[3a7]"></a>push_kb_to_ring_buff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, xc_kbs_event.o(i.push_kb_to_ring_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = push_kb_to_ring_buff &rArr; btstack_ring_buffer_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_ring_buffer_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kbs_key_event_push
</UL>

<P><STRONG><a name="[2bb]"></a>rbit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rf_driver.o(i.rbit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rbit &rArr; fpga_spi_read &rArr; SER_READ &rArr; _HWradio_ReadNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga_spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rccali
</UL>

<P><STRONG><a name="[143]"></a>rc32k_calib_find_count</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, le_power.o(i.rc32k_calib_find_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rc32k_calib_find_count
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connection_Enter_LowPower
</UL>

<P><STRONG><a name="[334]"></a>rc32k_calib_finish</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, le_power.o(i.rc32k_calib_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rc32k_calib_finish &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
</UL>

<P><STRONG><a name="[333]"></a>rc32k_calib_start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, le_power.o(i.rc32k_calib_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rc32k_calib_start
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
</UL>

<P><STRONG><a name="[146]"></a>restore_sleep_clk</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, le_power.o(i.restore_sleep_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = restore_sleep_clk &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connection_Exit_LowPower
</UL>

<P><STRONG><a name="[214]"></a>retarget_init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bsp_retarget.o(i.retarget_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = retarget_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2cd]"></a>reverse_128</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, btstack_util.o(i.reverse_128))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reverse_128 &rArr; reverse_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_value_handle_for_characteristic_with_uuid128
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_get_handle_range_for_service_with_uuid128
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_client_configuration_handle_for_characteristic_with_uuid128
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdu_handler
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_handle_encryption_result
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_aes128_start
</UL>

<P><STRONG><a name="[410]"></a>reverse_56</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, btstack_util.o(i.reverse_56))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reverse_56 &rArr; reverse_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1_t1
</UL>

<P><STRONG><a name="[411]"></a>reverse_64</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, btstack_util.o(i.reverse_64))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reverse_64 &rArr; reverse_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdu_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_ph3_random
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_event_packet_handler
</UL>

<P><STRONG><a name="[25f]"></a>reverse_bd_addr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, btstack_util.o(i.reverse_bd_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reverse_bd_addr &rArr; reverse_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_setup_event_base
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdu_handler
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_index
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_event_packet_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_event_packet_handler
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd_packet
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
</UL>

<P><STRONG><a name="[40f]"></a>reverse_bytes</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, btstack_util.o(i.reverse_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = reverse_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_128
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_64
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_56
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_bd_addr
</UL>

<P><STRONG><a name="[22c]"></a>rf_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, xinrfc.o(i.rf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rf_init &rArr; le_rf_init &rArr; ble_rccali &rArr; wbit &rArr; fpga_spi_write &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_rf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HWradio_Go_To_Idle_State
</UL>

<P><STRONG><a name="[5d]"></a>saadc_callback</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, main.o(i.saadc_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = saadc_callback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.saadc_init)
</UL>
<P><STRONG><a name="[3d2]"></a>saadc_init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, main.o(i.saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = saadc_init &rArr; xincx_saadc_channel_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xincx_saadc_init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xincx_saadc_channel_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xincx_saadc_buffer_convert
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[404]"></a>send_keyboard_report</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, skyworth_rc_demo.o(i.send_keyboard_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = send_keyboard_report &rArr; hids_device_send_keyboard_report &rArr; att_server_notify &rArr; l2cap_send_prepared_connectionless &rArr; hci_send_acl_packet_buffer &rArr; hci_send_acl_packet_fragments &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_send_keyboard_report
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sky_keyEvt_can_send_now
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
</UL>

<P><STRONG><a name="[416]"></a>send_media_report</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, skyworth_rc_demo.o(i.send_media_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = send_media_report &rArr; hids_device_send_media_report &rArr; att_server_notify &rArr; l2cap_send_prepared_connectionless &rArr; hci_send_acl_packet_buffer &rArr; hci_send_acl_packet_fragments &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_send_media_report
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sky_keyEvt_can_send_now
</UL>

<P><STRONG><a name="[401]"></a>send_voice_report</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, skyworth_rc_demo.o(i.send_voice_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = send_voice_report &rArr; hids_device_send_keyboard_report &rArr; att_server_notify &rArr; l2cap_send_prepared_connectionless &rArr; hci_send_acl_packet_buffer &rArr; hci_send_acl_packet_fragments &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_send_keyboard_report
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sky_keyEvt_can_send_now
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
</UL>

<P><STRONG><a name="[35c]"></a>sendchar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_retarget.o(i.sendchar))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[3ce]"></a>set_bd_addr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.set_bd_addr))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28f]"></a>sm_add_event_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sm.o(i.sm_add_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_add_event_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_keyboard_setup
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_init
</UL>

<P><STRONG><a name="[2c5]"></a>sm_init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, sm.o(i.sm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sm_init &rArr; l2cap_register_fixed_channel &rArr; l2cap_fixed_channel_for_channel_id
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_add_event_handler
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register_fixed_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_keyboard_setup
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[3fe]"></a>sm_just_works_confirm</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sm.o(i.sm_just_works_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sm_just_works_confirm &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_random_generate
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_get_connection_for_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_numeric_comparison_confirm
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
</UL>

<P><STRONG><a name="[261]"></a>sm_le_device_index</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sm.o(i.sm_le_device_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sm_le_device_index &rArr; sm_get_connection_for_handle &rArr; hci_connection_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_get_connection_for_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_event_packet_handler
</UL>

<P><STRONG><a name="[3ff]"></a>sm_numeric_comparison_confirm</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sm.o(i.sm_numeric_comparison_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = sm_numeric_comparison_confirm &rArr; sm_just_works_confirm &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_just_works_confirm
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
</UL>

<P><STRONG><a name="[2c6]"></a>sm_peripheral_setup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.sm_peripheral_setup))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[29d]"></a>sm_request_pairing</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sm.o(i.sm_request_pairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = sm_request_pairing &rArr; sm_send_security_request_for_connection &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_send_security_request_for_connection
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_get_connection_for_handle
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_process_validated_request
</UL>

<P><STRONG><a name="[3c1]"></a>sm_set_authentication_requirements</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sm.o(i.sm_set_authentication_requirements))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_keyboard_setup
</UL>

<P><STRONG><a name="[3c0]"></a>sm_set_io_capabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sm.o(i.sm_set_io_capabilities))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_keyboard_setup
</UL>

<P><STRONG><a name="[347]"></a>stack_reset</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, main.o(i.stack_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = stack_reset &rArr; gap_advertisements_set_params &rArr; hci_le_advertisements_set_params &rArr; gap_advertisments_changed &rArr; hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_ring_buffer_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_scan_response_set_data
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_advertisements_set_params
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_advertisements_set_data
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_advertisements_enable
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_main
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
</UL>

<P><STRONG><a name="[402]"></a>store_encode_data</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, voice_ringbuf.o(i.store_encode_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = store_encode_data &rArr; btstack_ring_buffer_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_ring_buffer_write
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sky_keyEvt_can_send_now
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
</UL>

<P><STRONG><a name="[403]"></a>voice_ring_buffer_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, voice_ringbuf.o(i.voice_ring_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = voice_ring_buffer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_ring_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_reset
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
</UL>

<P><STRONG><a name="[3ba]"></a>w_regbit</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, rf_driver.o(i.w_regbit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = w_regbit &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo_on_debug
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo_off_debug
</UL>

<P><STRONG><a name="[2ba]"></a>wbit</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, rf_driver.o(i.wbit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wbit &rArr; fpga_spi_write &rArr; SER_WRITE &rArr; _HWradio_ProgNow_xinc &rArr; HWdelay_Wait_For_Serial_Interface_Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga_spi_write
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga_spi_read
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_rf_init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rccali
</UL>

<P><STRONG><a name="[173]"></a>xc620_kbs_scan</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, xc_kbs_event.o(i.xc620_kbs_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xc620_kbs_scan &rArr; kbs_key_event_push &rArr; push_kb_to_ring_buff &rArr; btstack_ring_buffer_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyValue2code
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyCode2Type
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kbs_key_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBS_Handler
</UL>

<P><STRONG><a name="[44a]"></a>xc_saadc_clk_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_clk.o(i.xc_saadc_clk_init))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xincx_saadc_init
</UL>

<P><STRONG><a name="[3f9]"></a>xc_uart_clk_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bsp_clk.o(i.xc_uart_clk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xc_uart_clk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[172]"></a>xincx_i2c_0_irq_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, xincx_i2c.o(i.xincx_i2c_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xincx_i2c_0_irq_handler &rArr; i2c_irq_handler &rArr; i2c_tx_start_transfer &rArr; i2c_transfer &rArr; i2c_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Handler
</UL>

<P><STRONG><a name="[415]"></a>xincx_saadc_buffer_convert</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, xincx_saadc.o(i.xincx_saadc_buffer_convert))
<BR><BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
</UL>

<P><STRONG><a name="[414]"></a>xincx_saadc_channel_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, xincx_saadc.o(i.xincx_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = xincx_saadc_channel_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xinc_saadc_channel_init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
</UL>

<P><STRONG><a name="[413]"></a>xincx_saadc_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, xincx_saadc.o(i.xincx_saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xincx_saadc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xc_saadc_clk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
</UL>

<P><STRONG><a name="[148]"></a>xincx_saadc_irq_handler</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, xincx_saadc.o(i.xincx_saadc_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xincx_saadc_irq_handler &rArr; fix_data_average
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_data_average
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GADC_Handler
</UL>

<P><STRONG><a name="[3d5]"></a>xincx_saadc_sample</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, xincx_saadc.o(i.xincx_saadc_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xincx_saadc_sample
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_low
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_high
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xinc_saadc_fifo_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20c]"></a>xincx_spim_1_irq_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_spim.o(i.xincx_spim_1_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Handler
</UL>

<P><STRONG><a name="[38]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[33b]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
</UL>

<P><STRONG><a name="[44c]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[33a]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
</UL>

<P><STRONG><a name="[48f]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[490]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[44e]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[af]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[42]"></a>battery_service_read_callback</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, battery_service_server.o(i.battery_service_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = battery_service_read_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battery_service_server.o(i.battery_service_server_init)
</UL>
<P><STRONG><a name="[43]"></a>battery_service_write_callback</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, battery_service_server.o(i.battery_service_write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = battery_service_write_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battery_service_server.o(i.battery_service_server_init)
</UL>
<P><STRONG><a name="[49]"></a>device_information_service_read_callback</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, device_information_service_server.o(i.device_information_service_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = device_information_service_read_callback &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_min
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_information_service_server.o(i.device_information_service_server_init)
</UL>
<P><STRONG><a name="[79]"></a>att_read_callback</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, main.o(i.att_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = att_read_callback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>att_write_callback</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, main.o(i.att_write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = att_write_callback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[2a5]"></a>little_endian_read_16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.little_endian_read_16))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
</UL>

<P><STRONG><a name="[7b]"></a>packet_handler</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, main.o(i.packet_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = packet_handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>system_run_timer_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, main.o(i.system_run_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = system_run_timer_handler &rArr; btstack_run_loop_set_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_low
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_high
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_set_timer
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_add_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4a]"></a>att_read_callback</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, ff10_service_server.o(i.att_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = att_read_callback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback_handle_blob
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ff10_service_server.o(i.ff10_service_server_init)
</UL>
<P><STRONG><a name="[4b]"></a>att_write_callback</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, ff10_service_server.o(i.att_write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = att_write_callback &rArr; ff11_char_send_report &rArr; att_server_register_can_send_now_callback &rArr; att_server_request_to_send_notification &rArr; att_dispatch_server_request_can_send_now_event &rArr; l2cap_request_can_send_fix_channel_now_event &rArr; l2cap_notify_channel_can_send &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff11_char_send_report
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ff10_service_server.o(i.ff10_service_server_init)
</UL>
<P><STRONG><a name="[4c]"></a>ff11_can_send_now</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ff10_service_server.o(i.ff11_can_send_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ff11_can_send_now &rArr; att_server_notify &rArr; l2cap_send_prepared_connectionless &rArr; hci_send_acl_packet_buffer &rArr; hci_send_acl_packet_fragments &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ff10_service_server.o(i.ff11_char_send_report)
</UL>
<P><STRONG><a name="[52]"></a>att_read_callback</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, hids_device_skyworth.o(i.att_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = att_read_callback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback_handle_little_endian_16
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback_handle_byte
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_read_callback_handle_blob
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hids_device_skyworth.o(i.hids_device_init)
</UL>
<P><STRONG><a name="[53]"></a>att_write_callback</STRONG> (Thumb, 564 bytes, Stack size 48 bytes, hids_device_skyworth.o(i.att_write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = att_write_callback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_emit_event_with_uint8
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_emit_event_with_buff
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_emit_event
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_log
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hids_device_skyworth.o(i.hids_device_init)
</UL>
<P><STRONG><a name="[54]"></a>hids_device_can_send_now</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hids_device_skyworth.o(i.hids_device_can_send_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hids_device_can_send_now
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hids_device_skyworth.o(i.hids_device_request_can_send_now_event)
</UL>
<P><STRONG><a name="[2aa]"></a>hids_device_emit_event</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hids_device_skyworth.o(i.hids_device_emit_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hids_device_emit_event
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
</UL>

<P><STRONG><a name="[2a9]"></a>hids_device_emit_event_with_buff</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, hids_device_skyworth.o(i.hids_device_emit_event_with_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hids_device_emit_event_with_buff &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
</UL>

<P><STRONG><a name="[2a7]"></a>hids_device_emit_event_with_uint8</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hids_device_skyworth.o(i.hids_device_emit_event_with_uint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hids_device_emit_event_with_uint8
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_write_callback
</UL>

<P><STRONG><a name="[55]"></a>hids_device_voice_can_send_now</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, hids_device_skyworth.o(i.hids_device_voice_can_send_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hids_device_voice_can_send_now
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hids_device_skyworth.o(i.hids_device_request_voice_can_send_now_event)
</UL>
<P><STRONG><a name="[2e7]"></a>le_keyboard_setup</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, skyworth_rc_demo.o(i.le_keyboard_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = le_keyboard_setup &rArr; hids_device_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_information_service_server_set_system_id
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_information_service_server_init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_service_server_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_set_io_capabilities
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_set_authentication_requirements
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_add_event_handler
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_register_packet_handler
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff10_service_server_init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_add_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_main
</UL>

<P><STRONG><a name="[59]"></a>packet_handler</STRONG> (Thumb, 480 bytes, Stack size 48 bytes, skyworth_rc_demo.o(i.packet_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = packet_handler &rArr; sm_numeric_comparison_confirm &rArr; sm_just_works_confirm &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_ring_buffer_init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_numeric_comparison_confirm
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_just_works_confirm
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_32
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_voice_report
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keyboard_report
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sky_keyEvt_can_send_now
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_request_voice_can_send_now_event
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_get_instance_for_con_handle
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_encode_data
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_log
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skyworth_rc_demo.o(i.le_keyboard_setup)
</UL>
<P><STRONG><a name="[400]"></a>sky_keyEvt_can_send_now</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, skyworth_rc_demo.o(i.sky_keyEvt_can_send_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = sky_keyEvt_can_send_now &rArr; send_media_report &rArr; hids_device_send_media_report &rArr; att_server_notify &rArr; l2cap_send_prepared_connectionless &rArr; hci_send_acl_packet_buffer &rArr; hci_send_acl_packet_fragments &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_voice_report
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_media_report
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_keyboard_report
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hids_device_request_voice_can_send_now_event
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop_kb_from_ring_buff
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_encode_data
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
</UL>

<P><STRONG><a name="[7e]"></a>nrf_cli_cmd_led</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, app_cli.o(i.nrf_cli_cmd_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = nrf_cli_cmd_led &rArr; nrf_cli_help_print &rArr; format_offset_string_print &rArr; cursor_right_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>nrf_cli_cmd_led_off</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_cli.o(i.nrf_cli_cmd_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = nrf_cli_cmd_led_off &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>nrf_cli_cmd_led_on</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_cli.o(i.nrf_cli_cmd_led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = nrf_cli_cmd_led_on &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>nrf_cli_cmd_xinc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, app_cli.o(i.nrf_cli_cmd_xinc))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = nrf_cli_cmd_xinc &rArr; nrf_cli_help_print &rArr; format_offset_string_print &rArr; cursor_right_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.constdata)
</UL>
<P><STRONG><a name="[3e4]"></a>addr_is_aligned32</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xinc_fstorage.o(i.addr_is_aligned32))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>

<P><STRONG><a name="[3e3]"></a>addr_is_within_bounds</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xinc_fstorage.o(i.addr_is_within_bounds))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>

<P><STRONG><a name="[32c]"></a>delete_execute</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, fds.o(i.delete_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = delete_execute &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[350]"></a>event_prepare</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, fds.o(i.event_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_prepare &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[409]"></a>event_send</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fds.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[17]"></a>fs_event_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fds.o(i.fs_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = fs_event_handler &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fds.o(fs_data)
</UL>
<P><STRONG><a name="[369]"></a>gc_execute</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, fds.o(i.gc_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[36b]"></a>gc_next_page</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fds.o(i.gc_next_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[36e]"></a>gc_page_erase</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fds.o(i.gc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gc_page_erase &rArr; nrf_fstorage_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[36d]"></a>gc_record_copy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fds.o(i.gc_record_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = gc_record_copy &rArr; nrf_fstorage_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[36c]"></a>gc_record_find_next</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fds.o(i.gc_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[36a]"></a>gc_state_advance</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fds.o(i.gc_state_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gc_state_advance &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_pages
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[374]"></a>gc_swap_pages</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fds.o(i.gc_swap_pages))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[40d]"></a>header_check</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fds.o(i.header_check))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
</UL>

<P><STRONG><a name="[40e]"></a>header_has_next</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.header_has_next))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
</UL>

<P><STRONG><a name="[40c]"></a>header_jump</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fds.o(i.header_jump))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
</UL>

<P><STRONG><a name="[3a2]"></a>init_execute</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, fds.o(i.init_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = init_execute &rArr; page_tag_write_swap &rArr; nrf_fstorage_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[40b]"></a>is_word_aligned</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fds.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[444]"></a>page_offsets_update</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fds.o(i.page_offsets_update))
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[36f]"></a>page_tag_write_data</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = page_tag_write_data &rArr; nrf_fstorage_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[370]"></a>page_tag_write_swap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = page_tag_write_swap &rArr; nrf_fstorage_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[35d]"></a>queue_process</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, fds.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_prepare
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_event_handler
</UL>

<P><STRONG><a name="[32f]"></a>record_find</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, fds.o(i.record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[32d]"></a>record_find_by_desc</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, fds.o(i.record_find_by_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[373]"></a>record_find_next</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fds.o(i.record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_jump
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_has_next
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_check
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>

<P><STRONG><a name="[32e]"></a>record_header_flag_dirty</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fds.o(i.record_header_flag_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[408]"></a>write_execute</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, fds.o(i.write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = write_execute &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_offsets_update
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[328]"></a>compare_reg_update</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = compare_reg_update &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_get
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_stop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_sigle_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[440]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = elapsed_ticks_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[3c4]"></a>list_insertions_handler</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = list_insertions_handler &rArr; timer_list_remove &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[76]"></a>timeout_handler_scheduled_exec</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_timer.o(i.timeout_handler_scheduled_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timeout_handler_scheduled_exec &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer.o(i.timer_timeouts_check)
</UL>
<P><STRONG><a name="[329]"></a>timer2_sigle_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer.o(i.timer2_sigle_set))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[241]"></a>timer2_stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer.o(i.timer2_stop))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[352]"></a>timer_list_handler</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = timer_list_handler &rArr; compare_reg_update &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extern_timer_list_handler
</UL>

<P><STRONG><a name="[245]"></a>timer_list_handler_sched</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>

<P><STRONG><a name="[3c6]"></a>timer_list_insert</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[3c5]"></a>timer_list_remove</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_list_remove &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[247]"></a>timer_stop_op_schedule</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = timer_stop_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[217]"></a>timer_timeouts_check</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = timer_timeouts_check &rArr; app_sched_event_put &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Handler
</UL>

<P><STRONG><a name="[244]"></a>user_op_alloc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>

<P><STRONG><a name="[82]"></a>cmd_app_size</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cli_utils_cmds.o(i.cmd_app_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = cmd_app_size &rArr; nrf_cli_help_print &rArr; format_offset_string_print &rArr; cursor_right_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_utils_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>cmd_error</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cli_utils_cmds.o(i.cmd_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = cmd_error &rArr; nrf_cli_help_print &rArr; format_offset_string_print &rArr; cursor_right_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_utils_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>cmd_log_msg_error</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cli_utils_cmds.o(i.cmd_log_msg_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = cmd_log_msg_error &rArr; nrf_cli_help_print &rArr; format_offset_string_print &rArr; cursor_right_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_utils_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>cmd_log_msg_warning</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cli_utils_cmds.o(i.cmd_log_msg_warning))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = cmd_log_msg_warning &rArr; nrf_cli_help_print &rArr; format_offset_string_print &rArr; cursor_right_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_utils_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>cmd_reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cli_utils_cmds.o(i.cmd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = cmd_reset &rArr; nrf_cli_help_print &rArr; format_offset_string_print &rArr; cursor_right_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_utils_cmds.o(.constdata)
</UL>
<P><STRONG><a name="[324]"></a>nrf_cli_help_requested</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cli_utils_cmds.o(i.nrf_cli_help_requested))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_log_msg_warning
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_log_msg_error
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_error
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_app_size
</UL>

<P><STRONG><a name="[308]"></a>char_insert</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, nrf_cli.o(i.char_insert), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_line_cmd
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_up_move
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_next_line_move
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_left_move
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_in_empty_line
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_down_move
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cursor_save
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_cursor_restore
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[315]"></a>cli_clear_eos</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_cli.o(i.cli_clear_eos), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>

<P><STRONG><a name="[30d]"></a>cli_cursor_restore</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_cli.o(i.cli_cursor_restore), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[30c]"></a>cli_cursor_save</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_cli.o(i.cli_cursor_save), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[316]"></a>cli_strlen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_cli.o(i.cli_strlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cli_strlen &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_line_cmd
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_in_empty_line
</UL>

<P><STRONG><a name="[359]"></a>cli_write</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, nrf_cli.o(i.cli_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cli_write
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_print_stream
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
</UL>

<P><STRONG><a name="[326]"></a>cmd_get</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, nrf_cli.o(i.cmd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cmd_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
</UL>

<P><STRONG><a name="[313]"></a>cursor_down_move</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_cli.o(i.cursor_down_move), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[310]"></a>cursor_in_empty_line</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_cli.o(i.cursor_in_empty_line), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[30b]"></a>cursor_left_move</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_cli.o(i.cursor_left_move), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[311]"></a>cursor_next_line_move</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_cli.o(i.cursor_next_line_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = cursor_next_line_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[30e]"></a>cursor_right_move</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_cli.o(i.cursor_right_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = cursor_right_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[314]"></a>cursor_up_move</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_cli.o(i.cursor_up_move), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[358]"></a>format_offset_string_print</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, nrf_cli.o(i.format_offset_string_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = format_offset_string_print &rArr; cursor_right_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_next_line_move
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_write
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
</UL>

<P><STRONG><a name="[312]"></a>full_line_cmd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_cli.o(i.full_line_cmd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[309]"></a>multiline_console_data_check</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, nrf_cli.o(i.multiline_console_data_check), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[87]"></a>cli_uart_enable</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, nrf_cli_uart.o(i.cli_uart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = cli_uart_enable &rArr; nrf_drv_uart_init &rArr; nrfx_uart_init &rArr; apply_config &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_try
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_uart.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>cli_uart_init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrf_cli_uart.o(i.cli_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = cli_uart_init &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_init
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_uart.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>cli_uart_read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_cli_uart.o(i.cli_uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = cli_uart_read &rArr; nrf_ringbuf_cpy_get &rArr; nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_uart.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>cli_uart_uninit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_cli_uart.o(i.cli_uart_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cli_uart_uninit &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_uart.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>cli_uart_write</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, nrf_cli_uart.o(i.cli_uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cli_uart_write &rArr; nrf_ringbuf_cpy_put &rArr; nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_get
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_cpy_put
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_uart.o(.constdata)
</UL>
<P><STRONG><a name="[322]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_cli_uart.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_uart_tx &rArr; nrfx_uart_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_write
</UL>

<P><STRONG><a name="[31b]"></a>rx_try</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf_cli_uart.o(i.rx_try))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = rx_try &rArr; nrf_ringbuf_alloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_uart_enable
</UL>

<P><STRONG><a name="[47]"></a>timer_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_cli_uart.o(i.timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_uart.o(i.cli_uart_enable)
</UL>
<P><STRONG><a name="[48]"></a>uart_event_handler</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, nrf_cli_uart.o(i.uart_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = uart_event_handler &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_put
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_get
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_free
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_try
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli_uart.o(i.cli_uart_init)
</UL>
<P><STRONG><a name="[305]"></a>buffer_add</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_fprintf_format.o(i.buffer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[3a3]"></a>int_print</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.int_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[3a4]"></a>unsigned_print</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, nrf_fprintf_format.o(i.unsigned_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[3d6]"></a>memobj_op</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, nrf_memobj.o(i.memobj_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = memobj_op &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>

<P><STRONG><a name="[5b]"></a>uart_evt_handler</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.uart_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[24a]"></a>apply_config</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, nrfx_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = apply_config &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_fun_sel
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[3fb]"></a>nrf_uart_event_check</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[3fc]"></a>rx_byte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_uart.o(i.rx_byte))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[441]"></a>rx_done_event</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, nrfx_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3fd]"></a>tx_byte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_uart.o(i.tx_byte))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[442]"></a>tx_done_event</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nrfx_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[3f8]"></a>uart_irq_handler</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, nrfx_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_1_irq_handler
</UL>

<P><STRONG><a name="[39c]"></a>i2c_irq_handler</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, xincx_i2c.o(i.i2c_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = i2c_irq_handler &rArr; i2c_tx_start_transfer &rArr; i2c_transfer &rArr; i2c_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_tx_start_transfer
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_transfer
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_rx_start_transfer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xincx_i2c_0_irq_handler
</UL>

<P><STRONG><a name="[3a1]"></a>i2c_receive_byte</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, xincx_i2c.o(i.i2c_receive_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_receive_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_transfer
</UL>

<P><STRONG><a name="[39e]"></a>i2c_rx_start_transfer</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, xincx_i2c.o(i.i2c_rx_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i2c_rx_start_transfer &rArr; i2c_transfer &rArr; i2c_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_irq_handler
</UL>

<P><STRONG><a name="[3a0]"></a>i2c_send_byte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, xincx_i2c.o(i.i2c_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_tx_start_transfer
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_transfer
</UL>

<P><STRONG><a name="[39d]"></a>i2c_transfer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, xincx_i2c.o(i.i2c_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_transfer &rArr; i2c_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_receive_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_tx_start_transfer
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_rx_start_transfer
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_irq_handler
</UL>

<P><STRONG><a name="[39f]"></a>i2c_tx_start_transfer</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, xincx_i2c.o(i.i2c_tx_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i2c_tx_start_transfer &rArr; i2c_transfer &rArr; i2c_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_transfer
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_irq_handler
</UL>

<P><STRONG><a name="[8c]"></a>nrf_log_backend_uart_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_uart.o(i.nrf_log_backend_uart_flush))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>nrf_log_backend_uart_panic_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_log_backend_uart.o(i.nrf_log_backend_uart_panic_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = nrf_log_backend_uart_panic_set &rArr; uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uart_init &rArr; apply_config &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>nrf_log_backend_uart_put</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_log_backend_uart.o(i.nrf_log_backend_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = nrf_log_backend_uart_put &rArr; nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>serial_tx</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_log_backend_uart.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = serial_tx &rArr; nrfx_uart_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(i.nrf_log_backend_uart_put)
</UL>
<P><STRONG><a name="[77]"></a>uart_evt_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_backend_uart.o(i.uart_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(i.uart_init)
</UL>
<P><STRONG><a name="[3eb]"></a>uart_init</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, nrf_log_backend_uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uart_init &rArr; apply_config &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_uart_panic_set
</UL>

<P><STRONG><a name="[302]"></a>buf_prealloc</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[33d]"></a>dropped_sat16_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.dropped_sat16_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__USAT
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[3cc]"></a>invalid_packets_omit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.invalid_packets_omit))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[304]"></a>log_skip</STRONG> (Thumb, 134 bytes, Stack size 64 bytes, nrf_log_frontend.o(i.log_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[3ef]"></a>std_n</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_pending_hook
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>

<P><STRONG><a name="[3f2]"></a>postfix_process</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_log_str_formatter.o(i.postfix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = postfix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[3f1]"></a>prefix_process</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, nrf_log_str_formatter.o(i.prefix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[447]"></a>xinc_saadc_channel_init</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, xincx_saadc.o(i.xinc_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xinc_saadc_channel_init &rArr; gpio_direction_input
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_fun_sel
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_fun_inter
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mux_ctl
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_direction_input
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xincx_saadc_channel_init
</UL>

<P><STRONG><a name="[44b]"></a>xinc_saadc_fifo_clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xincx_saadc.o(i.xinc_saadc_fifo_clear))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xincx_saadc_sample
</UL>

<P><STRONG><a name="[188]"></a>HW_set_rx_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_connection.o(i.HW_set_rx_mode))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[1ce]"></a>HW_set_slave</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_connection.o(i.HW_set_slave))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
</UL>

<P><STRONG><a name="[1cd]"></a>HWle_abort_tifs_count</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_connection.o(i.HWle_abort_tifs_count))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Close_Connection_Event
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
</UL>

<P><STRONG><a name="[1c3]"></a>HWle_set_aes_llid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, le_connection.o(i.HWle_set_aes_llid))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Decrypt_Incoming_Pdu
</UL>

<P><STRONG><a name="[1c1]"></a>HWle_set_aes_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_connection.o(i.HWle_set_aes_mode))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Decrypt_Incoming_Pdu
</UL>

<P><STRONG><a name="[1c4]"></a>HWle_set_aes_pkt_length</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, le_connection.o(i.HWle_set_aes_pkt_length))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Decrypt_Incoming_Pdu
</UL>

<P><STRONG><a name="[189]"></a>HWle_set_rx_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_connection.o(i.HWle_set_rx_mode))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Handle_Connection_Event
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[232]"></a>HWle_set_tx_length_data</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, le_connection.o(i.HWle_set_tx_length_data))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Encode_DataPDU
</UL>

<P><STRONG><a name="[231]"></a>HWle_set_tx_llid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, le_connection.o(i.HWle_set_tx_llid))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Encode_DataPDU
</UL>

<P><STRONG><a name="[18d]"></a>LEconnection_Update_Next_Slave_Connection_Event_Time</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, le_connection.o(i.LEconnection_Update_Next_Slave_Connection_Event_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEconnection_Update_Next_Slave_Connection_Event_Time
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Bt_Clk_Avoid_Race
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_LL_Ctrl_Handle_Connection_Event
</UL>

<P><STRONG><a name="[1c2]"></a>hw_memcpy32</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, le_connection.o(i.hw_memcpy32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hw_memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Encode_DataPDU
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEconnection_Decode_DataPDU
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Encrypt_Payload
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Decrypt_Incoming_Pdu
</UL>

<P><STRONG><a name="[166]"></a>HWhab_Set_Rx_Mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_radio.o(i.HWhab_Set_Rx_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Initialise
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_RxComplete
</UL>

<P><STRONG><a name="[16c]"></a>_HWradio_SetGios_FullRx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_radio.o(i._HWradio_SetGios_FullRx))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
</UL>

<P><STRONG><a name="[16d]"></a>_HWradio_SetGios_LE_TIFS_TxRx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_radio.o(i._HWradio_SetGios_LE_TIFS_TxRx))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
</UL>

<P><STRONG><a name="[169]"></a>_HWradio_SetGios_Standby</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hw_radio.o(i._HWradio_SetGios_Standby))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_Initialise
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWradio_LE_Service
</UL>

<P><STRONG><a name="[8]"></a>dummy_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, btstack_tick.o(i.dummy_handler))
<BR>[Address Reference Count : 2]<UL><LI> btstack_tick.o(i.hal_tick_set_handler)
<LI> btstack_tick.o(.data)
</UL>
<P><STRONG><a name="[26a]"></a>__log_unused</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, att_db.o(i.__log_unused))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_request
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_request2
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_multiple_request2
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_type_request2
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_group_type_request2
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_blob_request2
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_find_information_request2
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_find_by_type_value_request2
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_validate_security
</UL>

<P><STRONG><a name="[24c]"></a>att_copy_value</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, att_db.o(i.att_copy_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = att_copy_value &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_request2
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_multiple_request2
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_type_request2
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_blob_request2
</UL>

<P><STRONG><a name="[267]"></a>att_find_handle</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, att_db.o(i.att_find_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = att_find_handle &rArr; att_iterator_fetch_next
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_fetch_next
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_is_persistent_ccc
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_write_request
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_write_command
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_request2
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_multiple_request2
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_blob_request2
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_prepare_write_request
</UL>

<P><STRONG><a name="[268]"></a>att_iterator_fetch_next</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, att_db.o(i.att_iterator_fetch_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = att_iterator_fetch_next
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_value_handle_for_characteristic_with_uuid16
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_get_handle_range_for_service_with_uuid16
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_value_handle_for_characteristic_with_uuid128
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_get_handle_range_for_service_with_uuid128
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_client_configuration_handle_for_characteristic_with_uuid128
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_descriptor_handle_for_characteristic_with_uuid16
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_type_request2
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_group_type_request2
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_find_information_request2
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_find_by_type_value_request2
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_find_handle
</UL>

<P><STRONG><a name="[27a]"></a>att_iterator_match_uuid</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, att_db.o(i.att_iterator_match_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = att_iterator_match_uuid &rArr; att_iterator_match_uuid16 &rArr; is_Bluetooth_Base_UUID &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Bluetooth_Base_UUID
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_match_uuid16
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_value_handle_for_characteristic_with_uuid128
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_client_configuration_handle_for_characteristic_with_uuid128
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_type_request2
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_group_type_request2
</UL>

<P><STRONG><a name="[27c]"></a>att_iterator_match_uuid16</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, att_db.o(i.att_iterator_match_uuid16))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = att_iterator_match_uuid16 &rArr; is_Bluetooth_Base_UUID &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Bluetooth_Base_UUID
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_value_handle_for_characteristic_with_uuid16
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_get_handle_range_for_service_with_uuid16
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_get_handle_range_for_service_with_uuid128
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_client_configuration_handle_for_characteristic_with_uuid128
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_server_get_descriptor_handle_for_characteristic_with_uuid16
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_group_type_request2
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_find_by_type_value_request2
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_match_uuid
</UL>

<P><STRONG><a name="[279]"></a>att_persistent_ccc_cache</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, att_db.o(i.att_persistent_ccc_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = att_persistent_ccc_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_is_persistent_ccc
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_write_request
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_write_command
</UL>

<P><STRONG><a name="[376]"></a>att_update_value_len</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, att_db.o(i.att_update_value_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = att_update_value_len
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_request2
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_multiple_request2
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_type_request2
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_blob_request2
</UL>

<P><STRONG><a name="[2a4]"></a>att_validate_security</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, att_db.o(i.att_validate_security))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = att_validate_security
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_write_request
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_write_command
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_request2
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_multiple_request2
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_type_request2
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_blob_request2
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_prepare_write_request
</UL>

<P><STRONG><a name="[275]"></a>handle_execute_write_request</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, att_db.o(i.handle_execute_write_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = handle_execute_write_request &rArr; att_clear_transaction_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_clear_transaction_queue
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_error
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_request
</UL>

<P><STRONG><a name="[26d]"></a>handle_find_by_type_value_request2</STRONG> (Thumb, 258 bytes, Stack size 88 bytes, att_db.o(i.handle_find_by_type_value_request2))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = handle_find_by_type_value_request2 &rArr; att_iterator_match_uuid16 &rArr; is_Bluetooth_Base_UUID &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_hexdump
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_error
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_match_uuid16
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_fetch_next
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_request
</UL>

<P><STRONG><a name="[26c]"></a>handle_find_information_request2</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, att_db.o(i.handle_find_information_request2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = handle_find_information_request2 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_error
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_fetch_next
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_request
</UL>

<P><STRONG><a name="[274]"></a>handle_prepare_write_request</STRONG> (Thumb, 192 bytes, Stack size 72 bytes, att_db.o(i.handle_prepare_write_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = handle_prepare_write_request &rArr; att_validate_security
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_error
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_validate_security
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_find_handle
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_request
</UL>

<P><STRONG><a name="[270]"></a>handle_read_blob_request2</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, att_db.o(i.handle_read_blob_request2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = handle_read_blob_request2 &rArr; att_validate_security
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_error
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_validate_security
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_update_value_len
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_find_handle
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_copy_value
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_request
</UL>

<P><STRONG><a name="[272]"></a>handle_read_by_group_type_request2</STRONG> (Thumb, 328 bytes, Stack size 96 bytes, att_db.o(i.handle_read_by_group_type_request2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = handle_read_by_group_type_request2 &rArr; att_iterator_match_uuid &rArr; att_iterator_match_uuid16 &rArr; is_Bluetooth_Base_UUID &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_hexdump
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_error
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Bluetooth_Base_UUID
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_match_uuid16
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_match_uuid
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_fetch_next
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_request
</UL>

<P><STRONG><a name="[26e]"></a>handle_read_by_type_request2</STRONG> (Thumb, 300 bytes, Stack size 96 bytes, att_db.o(i.handle_read_by_type_request2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = handle_read_by_type_request2 &rArr; att_iterator_match_uuid &rArr; att_iterator_match_uuid16 &rArr; is_Bluetooth_Base_UUID &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_hexdump
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_error
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_validate_security
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_update_value_len
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_match_uuid
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_fetch_next
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_copy_value
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_request
</UL>

<P><STRONG><a name="[271]"></a>handle_read_multiple_request2</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, att_db.o(i.handle_read_multiple_request2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = handle_read_multiple_request2 &rArr; att_validate_security
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_error
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_validate_security
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_update_value_len
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_find_handle
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_copy_value
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_request
</UL>

<P><STRONG><a name="[26f]"></a>handle_read_request2</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, att_db.o(i.handle_read_request2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = handle_read_request2 &rArr; att_validate_security
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_error
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_validate_security
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_update_value_len
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_find_handle
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_copy_value
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_request
</UL>

<P><STRONG><a name="[276]"></a>handle_write_command</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, att_db.o(i.handle_write_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = handle_write_command &rArr; att_validate_security
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_validate_security
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_persistent_ccc_cache
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_find_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_request
</UL>

<P><STRONG><a name="[273]"></a>handle_write_request</STRONG> (Thumb, 140 bytes, Stack size 80 bytes, att_db.o(i.handle_write_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = handle_write_request &rArr; att_validate_security
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_error
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_validate_security
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_persistent_ccc_cache
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_find_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_request
</UL>

<P><STRONG><a name="[27d]"></a>is_Bluetooth_Base_UUID</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, att_db.o(i.is_Bluetooth_Base_UUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = is_Bluetooth_Base_UUID &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_group_type_request2
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_match_uuid16
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_iterator_match_uuid
</UL>

<P><STRONG><a name="[282]"></a>prepare_handle_value</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, att_db.o(i.prepare_handle_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prepare_handle_value &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_prepare_handle_value_notification
</UL>

<P><STRONG><a name="[375]"></a>setup_error</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, att_db.o(i.setup_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setup_error
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_write_request
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_request2
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_multiple_request2
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_type_request2
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_by_group_type_request2
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_read_blob_request2
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_prepare_write_request
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_find_information_request2
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_find_by_type_value_request2
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_execute_write_request
</UL>

<P><STRONG><a name="[3d]"></a>att_packet_handler</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, att_dispatch.o(i.att_packet_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = att_packet_handler &rArr; l2cap_request_can_send_fix_channel_now_event &rArr; l2cap_notify_channel_can_send &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_request_can_send_fix_channel_now_event
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_acl_le_packet_now
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_dispatch.o(i.att_dispatch_register_server)
</UL>
<P><STRONG><a name="[252]"></a>emit_mtu_exchange_complete</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, att_dispatch.o(i.emit_mtu_exchange_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = emit_mtu_exchange_complete
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_dispatch_server_mtu_exchanged
</UL>

<P><STRONG><a name="[25d]"></a>__log_unused</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, att_server.o(i.__log_unused))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_service_handler
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_persistent_ccc_write
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_persistent_ccc_restore
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_persistent_ccc_clear
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_packet_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_event_packet_handler
</UL>

<P><STRONG><a name="[255]"></a>att_emit_event_to_all</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, att_server.o(i.att_emit_event_to_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = att_emit_event_to_all
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_next
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_has_next
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_process_validated_request
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_event_packet_handler
</UL>

<P><STRONG><a name="[3e]"></a>att_event_packet_handler</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, att_server.o(i.att_event_packet_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = att_event_packet_handler &rArr; att_run_for_context &rArr; att_dispatch_server_request_can_send_now_event &rArr; l2cap_request_can_send_fix_channel_now_event &rArr; l2cap_notify_channel_can_send &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_max_le_mtu
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_remove_timer
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_le_device_index
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_bd_addr
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_secure_connection
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_encryption_key_size
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_authenticated
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_persistent_ccc_restore
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_persistent_ccc_clear
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_for_handle
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_run_for_context
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_value_indication_notify_client
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_emit_event_to_all
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_dispatch_server_request_can_send_now_event
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_clear_transaction_queue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.att_server_init)
</UL>
<P><STRONG><a name="[265]"></a>att_handle_value_indication_notify_client</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, att_server.o(i.att_handle_value_indication_notify_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = att_handle_value_indication_notify_client &rArr; att_service_handler_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_service_handler_for_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_packet_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_event_packet_handler
</UL>

<P><STRONG><a name="[27e]"></a>att_notify_write_callbacks</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, att_server.o(i.att_notify_write_callbacks))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = att_notify_write_callbacks
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_next
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_has_next
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_write_callback
</UL>

<P><STRONG><a name="[3f]"></a>att_packet_handler</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, att_server.o(i.att_packet_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = att_packet_handler &rArr; att_server_handle_can_send_now &rArr; att_server_process_validated_request &rArr; sm_request_pairing &rArr; sm_send_security_request_for_connection &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_remove_timer
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_handle_can_send_now
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_for_handle
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_run_for_context
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_value_indication_notify_client
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_dispatch_server_request_can_send_now_event
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_request
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.att_server_init)
</UL>
<P><STRONG><a name="[266]"></a>att_run_for_context</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, att_server.o(i.att_run_for_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = att_run_for_context &rArr; att_dispatch_server_request_can_send_now_event &rArr; l2cap_request_can_send_fix_channel_now_event &rArr; l2cap_notify_channel_can_send &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_reconnect_security_setup_active
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_dispatch_server_request_can_send_now_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_packet_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_event_packet_handler
</UL>

<P><STRONG><a name="[288]"></a>att_server_data_ready_for_phase</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, att_server.o(i.att_server_data_ready_for_phase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = att_server_data_ready_for_phase
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_handle_can_send_now
</UL>

<P><STRONG><a name="[259]"></a>att_server_for_handle</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, att_server.o(i.att_server_for_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = att_server_for_handle &rArr; hci_connection_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_notify
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_request_to_send_notification
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_persistent_ccc_write
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_packet_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_event_packet_handler
</UL>

<P><STRONG><a name="[280]"></a>att_server_handle_can_send_now</STRONG> (Thumb, 234 bytes, Stack size 64 bytes, att_server.o(i.att_server_handle_can_send_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = att_server_handle_can_send_now &rArr; att_server_process_validated_request &rArr; sm_request_pairing &rArr; sm_send_security_request_for_connection &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_remove
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_next
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_has_next
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connections_get_iterator
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_process_validated_request
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_data_ready_for_phase
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_dispatch_server_request_can_send_now_event
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_dispatch_server_can_send_now
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_packet_handler
</UL>

<P><STRONG><a name="[25e]"></a>att_server_persistent_ccc_clear</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, att_server.o(i.att_server_persistent_ccc_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = att_server_persistent_ccc_clear &rArr; bd_addr_to_str &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_tlv_get_instance
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_addr_to_str
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_event_packet_handler
</UL>

<P><STRONG><a name="[262]"></a>att_server_persistent_ccc_restore</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, att_server.o(i.att_server_persistent_ccc_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = att_server_persistent_ccc_restore &rArr; att_server_write_callback_for_handle &rArr; att_service_handler_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_tlv_get_instance
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_addr_to_str
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_write_callback_for_handle
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_event_packet_handler
</UL>

<P><STRONG><a name="[29a]"></a>att_server_persistent_ccc_write</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, att_server.o(i.att_server_persistent_ccc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = att_server_persistent_ccc_write &rArr; att_server_for_handle &rArr; hci_connection_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_tlv_get_instance
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_addr_to_str
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_for_handle
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_write_callback
</UL>

<P><STRONG><a name="[28b]"></a>att_server_process_validated_request</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, att_server.o(i.att_server_process_validated_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = att_server_process_validated_request &rArr; sm_request_pairing &rArr; sm_send_security_request_for_connection &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_prepared_connectionless
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_reserve_packet_buffer
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_get_outgoing_buffer
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_request_pairing
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_release_packet_buffer
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_authorization_state
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_emit_event_to_all
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_dispatch_server_mtu_exchanged
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_request
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_handle_can_send_now
</UL>

<P><STRONG><a name="[40]"></a>att_server_read_callback</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, att_server.o(i.att_server_read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = att_server_read_callback &rArr; att_service_handler_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_service_handler_for_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.att_server_init)
</UL>
<P><STRONG><a name="[41]"></a>att_server_write_callback</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, att_server.o(i.att_server_write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = att_server_write_callback &rArr; att_server_persistent_ccc_write &rArr; att_server_for_handle &rArr; hci_connection_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_validate_prepared_write
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_write_callback_for_handle
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_persistent_ccc_write
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_notify_write_callbacks
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_is_persistent_ccc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_server.o(i.att_server_init)
</UL>
<P><STRONG><a name="[299]"></a>att_server_write_callback_for_handle</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, att_server.o(i.att_server_write_callback_for_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = att_server_write_callback_for_handle &rArr; att_service_handler_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_service_handler_for_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_write_callback
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_persistent_ccc_restore
</UL>

<P><STRONG><a name="[277]"></a>att_service_handler_for_handle</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, att_server.o(i.att_service_handler_for_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = att_service_handler_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_next
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_has_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_register_service_handler
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_write_callback_for_handle
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_read_callback
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_handle_value_indication_notify_client
</UL>

<P><STRONG><a name="[2a3]"></a>att_validate_prepared_write</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, att_server.o(i.att_validate_prepared_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = att_validate_prepared_write
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_next
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_has_next
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;att_server_write_callback
</UL>

<P><STRONG><a name="[3bc]"></a>__log_unused</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, le_device_db_memory.o(i.__log_unused))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_encryption_set
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_add
</UL>

<P><STRONG><a name="[3ca]"></a>__log_unused</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sm.o(i.__log_unused))
<BR><BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stk_generation_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start_calculating_ltk_from_ediv_and_rand
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_setup_tk
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdu_handler
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_key_distribution_handle_all_received
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_key_distribution_all_received
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_ir
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_er
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_event_packet_handler
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_done_for_handle
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_address_resolution_handle_event
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_hex16
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_request_pairing
</UL>

<P><STRONG><a name="[3c9]"></a>log_info_hex16</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sm.o(i.log_info_hex16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = log_info_hex16
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_ph3_div
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_ph4_y
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_ph3_y
</UL>

<P><STRONG><a name="[417]"></a>sm_address_resolution_handle_event</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, sm.o(i.sm_address_resolution_handle_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = sm_address_resolution_handle_event &rArr; sm_notify_client_index &rArr; sm_dispatch_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_index
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_base
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_address_resolution
</UL>

<P><STRONG><a name="[41a]"></a>sm_address_resolution_start_lookup</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, sm.o(i.sm_address_resolution_start_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = sm_address_resolution_start_lookup &rArr; sm_notify_client_base &rArr; sm_dispatch_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_base
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[41b]"></a>sm_ah_r_prime</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sm.o(i.sm_ah_r_prime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sm_ah_r_prime &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[41c]"></a>sm_c1_t1</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, sm.o(i.sm_c1_t1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sm_c1_t1 &rArr; reverse_56 &rArr; reverse_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_56
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_key
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[41d]"></a>sm_c1_t3</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, sm.o(i.sm_c1_t3))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sm_c1_t3 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_key
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_c
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_a
</UL>

<P><STRONG><a name="[41e]"></a>sm_d1_d_prime</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sm.o(i.sm_d1_d_prime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_d1_d_prime
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_endian_store_16
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_ph4_y
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_ph3_y
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_ph3_ltk
</UL>

<P><STRONG><a name="[41f]"></a>sm_dispatch_event</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, sm.o(i.sm_dispatch_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sm_dispatch_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_packet
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_next
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_has_next
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdu_handler
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_status_reason
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_passkey
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_index
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_base
</UL>

<P><STRONG><a name="[420]"></a>sm_dm_r_prime</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sm.o(i.sm_dm_r_prime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sm_dm_r_prime &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[421]"></a>sm_done_for_handle</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sm.o(i.sm_done_for_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sm_done_for_handle &rArr; sm_timeout_stop &rArr; btstack_run_loop_remove_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timeout_stop
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timeout_handler
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdu_handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_event_packet_handler
</UL>

<P><STRONG><a name="[67]"></a>sm_event_packet_handler</STRONG> (Thumb, 692 bytes, Stack size 32 bytes, sm.o(i.sm_event_packet_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = sm_event_packet_handler &rArr; sm_handle_random_result_er &rArr; sm_handle_random_result_ir &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_64
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_random_generate
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_status_reason
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_is_null
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_er
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_get_connection_for_handle
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_done_for_handle
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_set_local_bd_addr
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_remove
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_bd_addr
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_tlv_get_instance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_init)
</UL>
<P><STRONG><a name="[366]"></a>sm_get_connection_for_handle</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sm.o(i.sm_get_connection_for_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sm_get_connection_for_handle &rArr; hci_connection_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_just_works_confirm
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_reconnect_security_setup_active
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdu_handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_event_packet_handler
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_request_pairing
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_le_device_index
</UL>

<P><STRONG><a name="[6e]"></a>sm_handle_encryption_result_address_resolution</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sm.o(i.sm_handle_encryption_result_address_resolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sm_handle_encryption_result_address_resolution &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_address_resolution_handle_event
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_run)
</UL>
<P><STRONG><a name="[6b]"></a>sm_handle_encryption_result_dkg_dhk</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sm.o(i.sm_handle_encryption_result_dkg_dhk))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sm_handle_encryption_result_dkg_dhk &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_run)
</UL>
<P><STRONG><a name="[6a]"></a>sm_handle_encryption_result_dkg_irk</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sm.o(i.sm_handle_encryption_result_dkg_irk))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sm_handle_encryption_result_dkg_irk &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_run)
</UL>
<P><STRONG><a name="[70]"></a>sm_handle_encryption_result_enc_a</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sm.o(i.sm_handle_encryption_result_enc_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = sm_handle_encryption_result_enc_a &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_aes128_encrypt
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1_t3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_run)
</UL>
<P><STRONG><a name="[60]"></a>sm_handle_encryption_result_enc_b</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sm.o(i.sm_handle_encryption_result_enc_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sm_handle_encryption_result_enc_b &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_handle_encryption_result_enc_a)
</UL>
<P><STRONG><a name="[71]"></a>sm_handle_encryption_result_enc_c</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sm.o(i.sm_handle_encryption_result_enc_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = sm_handle_encryption_result_enc_c &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_aes128_encrypt
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1_t3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_run)
</UL>
<P><STRONG><a name="[62]"></a>sm_handle_encryption_result_enc_csrk</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sm.o(i.sm_handle_encryption_result_enc_csrk))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = sm_handle_encryption_result_enc_csrk &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_handle_encryption_result_enc_ph3_ltk)
</UL>
<P><STRONG><a name="[61]"></a>sm_handle_encryption_result_enc_d</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sm.o(i.sm_handle_encryption_result_enc_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = sm_handle_encryption_result_enc_d &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_key
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_handle_encryption_result_enc_c)
</UL>
<P><STRONG><a name="[63]"></a>sm_handle_encryption_result_enc_ph3_ltk</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sm.o(i.sm_handle_encryption_result_enc_ph3_ltk))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = sm_handle_encryption_result_enc_ph3_ltk &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_aes128_encrypt
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_d1_d_prime
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_handle_encryption_result_enc_ph3_y)
</UL>
<P><STRONG><a name="[73]"></a>sm_handle_encryption_result_enc_ph3_y</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sm.o(i.sm_handle_encryption_result_enc_ph3_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = sm_handle_encryption_result_enc_ph3_y &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_aes128_encrypt
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_endian_read_16
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_d1_d_prime
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_hex16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_run)
</UL>
<P><STRONG><a name="[64]"></a>sm_handle_encryption_result_enc_ph4_ltk</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sm.o(i.sm_handle_encryption_result_enc_ph4_ltk))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = sm_handle_encryption_result_enc_ph4_ltk &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_truncate_key
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_handle_encryption_result_enc_ph4_y)
</UL>
<P><STRONG><a name="[74]"></a>sm_handle_encryption_result_enc_ph4_y</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sm.o(i.sm_handle_encryption_result_enc_ph4_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = sm_handle_encryption_result_enc_ph4_y &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_aes128_encrypt
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_endian_read_16
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_d1_d_prime
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_hex16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_run)
</UL>
<P><STRONG><a name="[72]"></a>sm_handle_encryption_result_enc_stk</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sm.o(i.sm_handle_encryption_result_enc_stk))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = sm_handle_encryption_result_enc_stk &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_truncate_key
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_run)
</UL>
<P><STRONG><a name="[6d]"></a>sm_handle_encryption_result_rau</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sm.o(i.sm_handle_encryption_result_rau))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sm_handle_encryption_result_rau &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_run)
</UL>
<P><STRONG><a name="[5e]"></a>sm_handle_random_result_er</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sm.o(i.sm_handle_random_result_er))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = sm_handle_random_result_er &rArr; sm_handle_random_result_ir &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_random_generate
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_ir
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_key
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_event_packet_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_event_packet_handler)
</UL>
<P><STRONG><a name="[65]"></a>sm_handle_random_result_ir</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sm.o(i.sm_handle_random_result_ir))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = sm_handle_random_result_ir &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_key
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_er
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_handle_random_result_er)
</UL>
<P><STRONG><a name="[69]"></a>sm_handle_random_result_ph2_random</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sm.o(i.sm_handle_random_result_ph2_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sm_handle_random_result_ph2_random &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm.o(i.sm_just_works_confirm)
<LI> sm.o(i.sm_pdu_handler)
</UL>
<P><STRONG><a name="[6f]"></a>sm_handle_random_result_ph2_tk</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sm.o(i.sm_handle_random_result_ph2_tk))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = sm_handle_random_result_ph2_tk &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_32
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_endian_store_32
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_reset_tk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_run)
</UL>
<P><STRONG><a name="[66]"></a>sm_handle_random_result_ph3_div</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sm.o(i.sm_handle_random_result_ph3_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sm_handle_random_result_ph3_div &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_endian_read_16
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_hex16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_handle_random_result_ph3_random)
</UL>
<P><STRONG><a name="[5f]"></a>sm_handle_random_result_ph3_random</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sm.o(i.sm_handle_random_result_ph3_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = sm_handle_random_result_ph3_random &rArr; btstack_crypto_random_generate &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_64
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_random_generate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_event_packet_handler)
</UL>
<P><STRONG><a name="[6c]"></a>sm_handle_random_result_rau</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sm.o(i.sm_handle_random_result_rau))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sm_handle_random_result_rau &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_run)
</UL>
<P><STRONG><a name="[42a]"></a>sm_init_setup</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, sm.o(i.sm_init_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sm_init_setup &rArr; gap_le_get_own_address &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_le_get_own_address
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[423]"></a>sm_is_null</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sm.o(i.sm_is_null))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_event_packet_handler
</UL>

<P><STRONG><a name="[42b]"></a>sm_key_distribution_all_received</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sm.o(i.sm_key_distribution_all_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_key_distribution_all_received
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_key_distribution_flags_for_set
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdu_handler
</UL>

<P><STRONG><a name="[42c]"></a>sm_key_distribution_flags_for_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sm.o(i.sm_key_distribution_flags_for_set))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_setup_key_distribution
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_key_distribution_all_received
</UL>

<P><STRONG><a name="[42d]"></a>sm_key_distribution_handle_all_received</STRONG> (Thumb, 426 bytes, Stack size 48 bytes, sm.o(i.sm_key_distribution_handle_all_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = sm_key_distribution_handle_all_received &rArr; sm_notify_client_index &rArr; sm_dispatch_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_index
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_max_count
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_info
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_encryption_set
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_add
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_addr_to_str
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdu_handler
</UL>

<P><STRONG><a name="[418]"></a>sm_notify_client_base</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, sm.o(i.sm_notify_client_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = sm_notify_client_base &rArr; sm_dispatch_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_setup_event_base
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_dispatch_event
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_trigger_user_response
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdu_handler
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_address_resolution_start_lookup
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_address_resolution_handle_event
</UL>

<P><STRONG><a name="[419]"></a>sm_notify_client_index</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, sm.o(i.sm_notify_client_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = sm_notify_client_index &rArr; sm_dispatch_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_setup_event_base
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_dispatch_event
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_info
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_bd_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_key_distribution_handle_all_received
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_address_resolution_handle_event
</UL>

<P><STRONG><a name="[430]"></a>sm_notify_client_passkey</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, sm.o(i.sm_notify_client_passkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = sm_notify_client_passkey &rArr; sm_dispatch_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_32
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_setup_event_base
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_dispatch_event
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_trigger_user_response
</UL>

<P><STRONG><a name="[424]"></a>sm_notify_client_status_reason</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, sm.o(i.sm_notify_client_status_reason))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = sm_notify_client_status_reason &rArr; sm_dispatch_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_setup_event_base
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_dispatch_event
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timeout_handler
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdu_handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_event_packet_handler
</UL>

<P><STRONG><a name="[431]"></a>sm_pairing_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sm.o(i.sm_pairing_error))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdu_handler
</UL>

<P><STRONG><a name="[68]"></a>sm_pdu_handler</STRONG> (Thumb, 512 bytes, Stack size 32 bytes, sm.o(i.sm_pdu_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = sm_pdu_handler &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_128
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_64
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_random_generate
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pairing_error
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_status_reason
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_base
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_key_distribution_handle_all_received
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_key_distribution_all_received
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_get_connection_for_handle
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_done_for_handle
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_dispatch_event
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_bd_addr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_init)
</UL>
<P><STRONG><a name="[433]"></a>sm_reset_setup</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sm.o(i.sm_reset_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_reset_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_reset_tk
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[429]"></a>sm_reset_tk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sm.o(i.sm_reset_tk))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_setup_tk
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_reset_setup
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_ph2_tk
</UL>

<P><STRONG><a name="[426]"></a>sm_run</STRONG> (Thumb, 2232 bytes, Stack size 72 bytes, sm.o(i.sm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_128
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_remove
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_next
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_has_next
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_64
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connectionless
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_get_state
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_command_packet_now
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_local_bd_addr
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_le_get_own_address
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_sm_lookup_entry_free
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_random_generate
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_aes128_encrypt
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_trigger_user_response
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timeout_start
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timeout_reset
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stk_generation_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start_calculating_ltk_from_ediv_and_rand
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_setup_key_distribution
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_reset_setup
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_status_reason
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_key_distribution_handle_all_received
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_key_distribution_all_received
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init_setup
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_get_connection_for_handle
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_done_for_handle
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_dm_r_prime
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_d1_d_prime
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_c1_t1
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ah_r_prime
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_address_resolution_start_lookup
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_address_resolution_handle_event
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_key
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_max_count
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_device_db_info
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_bd_addr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connections_get_iterator
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_empty
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_addr_to_str
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_request_can_send_fix_channel_now_event
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_can_send_fixed_channel_packet_now
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_just_works_confirm
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timeout_handler
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start_calculating_ltk_from_ediv_and_rand
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_send_security_request_for_connection
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdu_handler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_rau
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_ph3_div
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_ph2_tk
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_ph2_random
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_random_result_ir
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_rau
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_stk
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_ph4_ltk
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_d
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_csrk
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_b
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_dkg_irk
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_dkg_dhk
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_address_resolution
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_event_packet_handler
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_request_pairing
</UL>

<P><STRONG><a name="[432]"></a>sm_send_security_request_for_connection</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sm.o(i.sm_send_security_request_for_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sm_send_security_request_for_connection &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_request_pairing
</UL>

<P><STRONG><a name="[42f]"></a>sm_setup_event_base</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sm.o(i.sm_setup_event_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sm_setup_event_base &rArr; reverse_bd_addr &rArr; reverse_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_bd_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_status_reason
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_passkey
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_index
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_base
</UL>

<P><STRONG><a name="[437]"></a>sm_setup_key_distribution</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sm.o(i.sm_setup_key_distribution))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_setup_key_distribution
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_key_distribution_flags_for_set
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stk_generation_init
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[43a]"></a>sm_setup_tk</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, sm.o(i.sm_setup_tk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_setup_tk
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_reset_tk
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_key
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stk_generation_init
</UL>

<P><STRONG><a name="[436]"></a>sm_start_calculating_ltk_from_ediv_and_rand</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sm.o(i.sm_start_calculating_ltk_from_ediv_and_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = sm_start_calculating_ltk_from_ediv_and_rand &rArr;  sm_run (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[434]"></a>sm_stk_generation_init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, sm.o(i.sm_stk_generation_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sm_stk_generation_init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_setup_tk
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_setup_key_distribution
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[75]"></a>sm_timeout_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sm.o(i.sm_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sm_timeout_handler &rArr; sm_run &rArr; btstack_crypto_aes128_encrypt &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_status_reason
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_done_for_handle
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_get_timer_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm.o(i.sm_timeout_start)
</UL>
<P><STRONG><a name="[438]"></a>sm_timeout_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sm.o(i.sm_timeout_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sm_timeout_reset &rArr; sm_timeout_start &rArr; btstack_run_loop_set_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timeout_stop
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timeout_start
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[435]"></a>sm_timeout_start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sm.o(i.sm_timeout_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sm_timeout_start &rArr; btstack_run_loop_set_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_set_timer
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_add_timer
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_set_timer_handler
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_remove_timer
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_set_timer_context
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timeout_reset
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[422]"></a>sm_timeout_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sm.o(i.sm_timeout_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_timeout_stop &rArr; btstack_run_loop_remove_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_remove_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_timeout_reset
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_done_for_handle
</UL>

<P><STRONG><a name="[439]"></a>sm_trigger_user_response</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sm.o(i.sm_trigger_user_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = sm_trigger_user_response &rArr; sm_notify_client_passkey &rArr; sm_dispatch_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_endian_read_32
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_passkey
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_notify_client_base
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[428]"></a>sm_truncate_key</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sm.o(i.sm_truncate_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_truncate_key
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_stk
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_handle_encryption_result_enc_ph4_ltk
</UL>

<P><STRONG><a name="[2f5]"></a>btstack_run_loop_assert</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, btstack_run_loop.o(i.btstack_run_loop_assert))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_set_timer
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_add_timer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_remove_data_source
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_enable_data_source_callbacks
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_add_data_source
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_remove_timer
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_get_time_ms
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_execute
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_disable_data_source_callbacks
</UL>

<P><STRONG><a name="[2b0]"></a>char_for_high_nibble</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, btstack_util.o(i.char_for_high_nibble))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_for_nibble
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_addr_to_str
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_hexdump
</UL>

<P><STRONG><a name="[237]"></a>__log_unused</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hci.o(i.__log_unused))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_control
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_buffer
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_free_acl_slots_for_handle
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_state
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_shutdown_connection
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_fragments
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reenable_advertisements_if_needed
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_free_acl_slots_for_connection_type
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_run
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_event_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initialization_timeout_handler
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_nr_connections_changed
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_connection_for_bd_addr_and_type
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_handler
</UL>

<P><STRONG><a name="[234]"></a>acl_handler</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, hci.o(i.acl_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = acl_handler &rArr; hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_handle
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_acl_packet
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
</UL>

<P><STRONG><a name="[32b]"></a>create_connection_for_bd_addr_and_type</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hci.o(i.create_connection_for_bd_addr_and_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = create_connection_for_bd_addr_and_type &rArr; bd_addr_copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_add
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_addr_to_str
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_addr_copy
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_hci_connection_get
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
</UL>

<P><STRONG><a name="[340]"></a>event_handler</STRONG> (Thumb, 1784 bytes, Stack size 64 bytes, hci.o(i.event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = event_handler &rArr; stack_reset &rArr; gap_advertisements_set_params &rArr; hci_le_advertisements_set_params &rArr; gap_advertisments_changed &rArr; hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_reset
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_min
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_handle
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_bd_addr
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_addr_to_str
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_release_packet_buffer
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_bd_addr_and_type
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_connection_parameter_range
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connection_parameter_range_included
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_shutdown_connection
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reenable_advertisements_if_needed
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_control_on
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_control_off
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_supported
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_is_le_connection
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_next_state
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_event_handler
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_nr_connections_changed
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_event
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_connection_for_bd_addr_and_type
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_handler
</UL>

<P><STRONG><a name="[360]"></a>gap_advertisments_changed</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hci.o(i.gap_advertisments_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = gap_advertisments_changed &rArr; hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_scan_response_set_data
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_advertisements_set_data
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertisements_set_params
</UL>

<P><STRONG><a name="[238]"></a>hci_emit_acl_packet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hci.o(i.hci_emit_acl_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_emit_acl_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_handler
</UL>

<P><STRONG><a name="[382]"></a>hci_emit_disconnection_complete</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hci.o(i.hci_emit_disconnection_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = hci_emit_disconnection_complete &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_event
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
</UL>

<P><STRONG><a name="[34e]"></a>hci_emit_event</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, hci.o(i.hci_emit_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_packet
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_next
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_has_next
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_state
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_transport_packet_sent
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_nr_connections_changed
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_hci_open_failed
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_disconnection_complete
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
</UL>

<P><STRONG><a name="[383]"></a>hci_emit_hci_open_failed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hci.o(i.hci_emit_hci_open_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = hci_emit_hci_open_failed &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_event
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_control_on
</UL>

<P><STRONG><a name="[349]"></a>hci_emit_nr_connections_changed</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hci.o(i.hci_emit_nr_connections_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = hci_emit_nr_connections_changed &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nr_hci_connections
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_event
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_shutdown_connection
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
</UL>

<P><STRONG><a name="[386]"></a>hci_emit_transport_packet_sent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hci.o(i.hci_emit_transport_packet_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_event
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd_va_arg
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_buffer
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_fragments
</UL>

<P><STRONG><a name="[4f]"></a>hci_halting_timeout_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hci.o(i.hci_halting_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = hci_halting_timeout_handler &rArr; hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_state
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(i.hci_run)
</UL>
<P><STRONG><a name="[388]"></a>hci_init_done</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hci.o(i.hci_init_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = hci_init_done &rArr; hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_state
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_event_handler
</UL>

<P><STRONG><a name="[4e]"></a>hci_initialization_timeout_handler</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, hci.o(i.hci_initialization_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = hci_initialization_timeout_handler &rArr; hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_transport_uart_get_main_baud_rate
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(i.hci_initializing_run)
</UL>
<P><STRONG><a name="[34c]"></a>hci_initializing_event_handler</STRONG> (Thumb, 678 bytes, Stack size 24 bytes, hci.o(i.hci_initializing_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = hci_initializing_event_handler &rArr; hci_init_done &rArr; hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_remove_timer
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_transport_uart_get_main_baud_rate
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_supported
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_next_state
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init_done
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
</UL>

<P><STRONG><a name="[34d]"></a>hci_initializing_next_state</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hci.o(i.hci_initializing_next_state))
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_event_handler
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
</UL>

<P><STRONG><a name="[38a]"></a>hci_initializing_run</STRONG> (Thumb, 810 bytes, Stack size 24 bytes, hci.o(i.hci_initializing_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_set_timer
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_add_timer
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_packet
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_set_timer_handler
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_command_packet_now
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_addr_to_str
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd_packet
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_transport_uart_get_main_baud_rate
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_state_reset
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_supported
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
</UL>

<P><STRONG><a name="[343]"></a>hci_is_le_connection</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hci.o(i.hci_is_le_connection))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_fragments
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reenable_advertisements_if_needed
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_free_acl_slots_for_connection_type
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
</UL>

<P><STRONG><a name="[341]"></a>hci_le_supported</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hci.o(i.hci_le_supported))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_run
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_event_handler
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
</UL>

<P><STRONG><a name="[378]"></a>hci_number_free_acl_slots_for_connection_type</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, hci.o(i.hci_number_free_acl_slots_for_connection_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hci_number_free_acl_slots_for_connection_type
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_is_le_connection
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_acl_le_packet_now
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_free_acl_slots_for_handle
</UL>

<P><STRONG><a name="[345]"></a>hci_power_control_off</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hci.o(i.hci_power_control_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_power_control_off
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_control
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
</UL>

<P><STRONG><a name="[346]"></a>hci_power_control_on</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hci.o(i.hci_power_control_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = hci_power_control_on &rArr; hci_emit_hci_open_failed &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_hci_open_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_control
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
</UL>

<P><STRONG><a name="[38d]"></a>hci_power_control_sleep</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hci.o(i.hci_power_control_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_power_control_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_control
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
</UL>

<P><STRONG><a name="[38e]"></a>hci_power_transition_to_initializing</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hci.o(i.hci_power_transition_to_initializing))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_control
</UL>

<P><STRONG><a name="[344]"></a>hci_reenable_advertisements_if_needed</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, hci.o(i.hci_reenable_advertisements_if_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hci_reenable_advertisements_if_needed
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_next
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_has_next
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_is_le_connection
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
</UL>

<P><STRONG><a name="[38f]"></a>hci_replace_bd_addr_placeholder</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, hci.o(i.hci_replace_bd_addr_placeholder))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hci_replace_bd_addr_placeholder &rArr; bd_addr_to_str &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_addr_to_str
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
</UL>

<P><STRONG><a name="[23a]"></a>hci_run</STRONG> (Thumb, 766 bytes, Stack size 56 bytes, hci.o(i.hci_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_set_timer
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_add_timer
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_handle
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_set_timer_handler
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_command_packet_now
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_state
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_prepared_acl_packet_now
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_shutdown_connection
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_fragments
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_replace_bd_addr_placeholder
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_control_sleep
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_control_off
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_run
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_disconnection_complete
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_advertisements_enable
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_power_control
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initialization_timeout_handler
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init_done
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_halting_timeout_handler
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_advertisments_changed
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_handler
</UL>

<P><STRONG><a name="[390]"></a>hci_send_acl_packet_fragments</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, hci.o(i.hci_send_acl_packet_fragments))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = hci_send_acl_packet_fragments &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_packet
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_release_packet_buffer
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_prepared_acl_packet_now
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_is_le_connection
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_transport_packet_sent
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_buffer
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
</UL>

<P><STRONG><a name="[34f]"></a>hci_shutdown_connection</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hci.o(i.hci_shutdown_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = hci_shutdown_connection &rArr; hci_emit_nr_connections_changed &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_remove_timer
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_remove
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bd_addr_to_str
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_nr_connections_changed
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_hci_connection_free
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_run
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
</UL>

<P><STRONG><a name="[387]"></a>hci_state_reset</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hci.o(i.hci_state_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_state_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_run
</UL>

<P><STRONG><a name="[377]"></a>hci_transport_can_send_prepared_packet_now</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hci.o(i.hci_transport_can_send_prepared_packet_now))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_acl_le_packet_now
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_prepared_acl_packet_now
</UL>

<P><STRONG><a name="[389]"></a>hci_transport_uart_get_main_baud_rate</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hci.o(i.hci_transport_uart_get_main_baud_rate))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_run
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initializing_event_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_initialization_timeout_handler
</UL>

<P><STRONG><a name="[384]"></a>nr_hci_connections</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hci.o(i.nr_hci_connections))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_emit_nr_connections_changed
</UL>

<P><STRONG><a name="[4d]"></a>packet_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hci.o(i.packet_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = packet_handler &rArr; event_handler &rArr; stack_reset &rArr; gap_advertisements_set_params &rArr; hci_le_advertisements_set_params &rArr; gap_advertisments_changed &rArr; hci_run &rArr; hci_initializing_run &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_packet
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_handler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(i.hci_init)
</UL>
<P><STRONG><a name="[363]"></a>sm_get_connection_for_handle</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hci.o(i.sm_get_connection_for_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sm_get_connection_for_handle &rArr; hci_connection_for_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_secure_connection
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_encryption_key_size
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_authorization_state
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_authenticated
</UL>

<P><STRONG><a name="[37e]"></a>printf_timestamp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hci_dump.o(i.printf_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = printf_timestamp &rArr; btstack_run_loop_get_time_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_get_time_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_packet
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_log_va_arg
</UL>

<P><STRONG><a name="[3b5]"></a>__log_unused</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, l2cap.o(i.__log_unused))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_prepared_connectionless
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_send_connectionless
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_notify_channel_can_send
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_le_signaling_handler_dispatch
</UL>

<P><STRONG><a name="[58]"></a>l2cap_acl_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, l2cap.o(i.l2cap_acl_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = l2cap_acl_handler &rArr; l2cap_acl_le_handler &rArr; l2cap_register_signaling_response &rArr; l2cap_run &rArr; l2cap_send_le_signaling_packet &rArr; hci_send_acl_packet_buffer &rArr; hci_send_acl_packet_fragments &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_handle
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_acl_le_handler
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cap.o(i.l2cap_init)
</UL>
<P><STRONG><a name="[3a9]"></a>l2cap_acl_le_handler</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, l2cap.o(i.l2cap_acl_le_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = l2cap_acl_le_handler &rArr; l2cap_register_signaling_response &rArr; l2cap_run &rArr; l2cap_send_le_signaling_packet &rArr; hci_send_acl_packet_buffer &rArr; hci_send_acl_packet_fragments &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register_signaling_response
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_le_signaling_handler_dispatch
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_fixed_channel_for_channel_id
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_acl_handler
</UL>

<P><STRONG><a name="[3ab]"></a>l2cap_fixed_channel_for_channel_id</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2cap.o(i.l2cap_fixed_channel_for_channel_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2cap_fixed_channel_for_channel_id
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_next
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_has_next
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_request_can_send_fix_channel_now_event
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_register_fixed_channel
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_acl_le_handler
</UL>

<P><STRONG><a name="[57]"></a>l2cap_hci_event_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, l2cap.o(i.l2cap_hci_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = l2cap_hci_event_handler &rArr; l2cap_run &rArr; l2cap_send_le_signaling_packet &rArr; hci_send_acl_packet_buffer &rArr; hci_send_acl_packet_fragments &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_notify_channel_can_send
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cap.o(i.l2cap_init)
</UL>
<P><STRONG><a name="[3ac]"></a>l2cap_le_signaling_handler_dispatch</STRONG> (Thumb, 316 bytes, Stack size 72 bytes, l2cap.o(i.l2cap_le_signaling_handler_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = l2cap_le_signaling_handler_dispatch &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_packet
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_connection_for_handle
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_get_connection_parameter_range
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_connection_parameter_range_included
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_acl_le_handler
</UL>

<P><STRONG><a name="[3b3]"></a>l2cap_notify_channel_can_send</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, l2cap.o(i.l2cap_notify_channel_can_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = l2cap_notify_channel_can_send &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dump_packet
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_remove
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_next
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_iterator_has_next
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_add_tail
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_acl_le_packet_now
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_request_can_send_fix_channel_now_event
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_hci_event_handler
</UL>

<P><STRONG><a name="[3ad]"></a>l2cap_register_signaling_response</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, l2cap.o(i.l2cap_register_signaling_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = l2cap_register_signaling_response &rArr; l2cap_run &rArr; l2cap_send_le_signaling_packet &rArr; hci_send_acl_packet_buffer &rArr; hci_send_acl_packet_fragments &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_run
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_acl_le_handler
</UL>

<P><STRONG><a name="[3b6]"></a>l2cap_send_le_signaling_packet</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, l2cap.o(i.l2cap_send_le_signaling_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = l2cap_send_le_signaling_packet &rArr; hci_send_acl_packet_buffer &rArr; hci_send_acl_packet_fragments &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_create_signaling_le
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_packet_buffer
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reserve_packet_buffer
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_get_outgoing_packet_buffer
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_acl_packet_now
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_run
</UL>

<P><STRONG><a name="[2b5]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ble.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[132]"></a>SYSatomic_Increment_u_int8</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tra_queue.o(i.SYSatomic_Increment_u_int8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSatomic_Increment_u_int8
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Enqueue
</UL>

<P><STRONG><a name="[136]"></a>_BTq_Initialise_All_Data_Queues</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tra_queue.o(i._BTq_Initialise_All_Data_Queues))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _BTq_Initialise_All_Data_Queues &rArr; BTq_Initialise_Data_Queue_Type
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Initialise_Data_Queue_Type
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Initialise_Data_Queue
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Initialise
</UL>

<P><STRONG><a name="[13b]"></a>_BTq_Initialise_Data_Queue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tra_queue.o(i._BTq_Initialise_Data_Queue))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BTq_Initialise_All_Data_Queues
</UL>

<P><STRONG><a name="[137]"></a>_BTq_Initialise_Variable_Chunk_Queue</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, tra_queue.o(i._BTq_Initialise_Variable_Chunk_Queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _BTq_Initialise_Variable_Chunk_Queue
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Reset
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTq_Initialise
</UL>

<P><STRONG><a name="[162]"></a>HWjal_Set_Rst_Code</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hw_lc.o(i.HWjal_Set_Rst_Code))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWlc_Reset
</UL>

<P><STRONG><a name="[161]"></a>_HWlc_Clear_Jalapeno_Registers</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, hw_lc.o(i._HWlc_Clear_Jalapeno_Registers))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _HWlc_Clear_Jalapeno_Registers
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWlc_Initialise
</UL>

<P><STRONG><a name="[15f]"></a>HWdelay_Calibrate_</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, hw_delay.o(i.HWdelay_Calibrate_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HWdelay_Calibrate_
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Interrupts_Restore_Flags
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_Disable_Interrupts_Save_Flags
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWdelay_Initialise
</UL>

<P><STRONG><a name="[150]"></a>_Insert_Bd_Addr_In_PDU</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hc_event_gen.o(i._Insert_Bd_Addr_In_PDU))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
</UL>

<P><STRONG><a name="[19d]"></a>HW_set_rx_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_advertise.o(i.HW_set_rx_mode))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advance_For_Next_Adv_Tx
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Scan_Resp_Tx
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Prep_For_LE_Advert_Tx
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
</UL>

<P><STRONG><a name="[19e]"></a>HW_set_slave</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_advertise.o(i.HW_set_slave))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
</UL>

<P><STRONG><a name="[1ac]"></a>HWle_abort_tifs_count</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_advertise.o(i.HWle_abort_tifs_count))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[1a7]"></a>HWle_clear_le_spi_only</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, le_advertise.o(i.HWle_clear_le_spi_only))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[1a8]"></a>HWle_clear_tx_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, le_advertise.o(i.HWle_clear_tx_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEadv_Advertising_Event_Complete
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
</UL>

<P><STRONG><a name="[1a2]"></a>_LEadv_Set_Next_Advertising_Event_Start_Timer</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, le_advertise.o(i._LEadv_Set_Next_Advertising_Event_Start_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _LEadv_Set_Next_Advertising_Event_Start_Timer &rArr; HW_Get_Native_Clk_Avoid_Race &rArr; HWdelay_Wait_For_us
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Get_Native_Clk_Avoid_Race
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_advDelay
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSrand_Get_Rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Set_Advertise_Enable
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
</UL>

<P><STRONG><a name="[19f]"></a>hw_memcpy32</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, le_advertise.o(i.hw_memcpy32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hw_memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Handle_Advertising
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Advertising_Event_Begin
</UL>

<P><STRONG><a name="[1e3]"></a>hw_memcpy32</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, le_link_layer.o(i.hw_memcpy32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hw_memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEll_Encode_Advertising_ChannelPDU
</UL>

<P><STRONG><a name="[102]"></a>HW_get_sleep_status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, le_power.o(i.HW_get_sleep_status))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connection_Exit_LowPower
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Exit_LowPower
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Enter_LowPower
</UL>

<P><STRONG><a name="[101]"></a>HW_set_use_lf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_power.o(i.HW_set_use_lf))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Connection_Enter_LowPower
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connection_Exit_LowPower
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Exit_LowPower
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Enter_LowPower
</UL>

<P><STRONG><a name="[44]"></a>att_packet_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, btstack.o(i.att_packet_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = att_packet_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btstack.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[8e]"></a>btstack_run_loop_embedded_add_data_source</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_add_data_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btstack_run_loop_embedded_add_data_source
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btstack_run_loop_embedded.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>btstack_run_loop_embedded_add_timer</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_add_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = btstack_run_loop_embedded_add_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_reconstruct_higher_bits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btstack_run_loop_embedded.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>btstack_run_loop_embedded_disable_data_source_callbacks</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_disable_data_source_callbacks))
<BR>[Address Reference Count : 1]<UL><LI> btstack_run_loop_embedded.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>btstack_run_loop_embedded_dump_timer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_dump_timer))
<BR>[Address Reference Count : 1]<UL><LI> btstack_run_loop_embedded.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>btstack_run_loop_embedded_enable_data_source_callbacks</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_enable_data_source_callbacks))
<BR>[Address Reference Count : 1]<UL><LI> btstack_run_loop_embedded.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>btstack_run_loop_embedded_execute</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = btstack_run_loop_embedded_execute &rArr; btstack_run_loop_embedded_execute_once &rArr; btstack_run_loop_embedded_remove_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_execute_once
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btstack_run_loop_embedded.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>btstack_run_loop_embedded_get_time_ms</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_get_time_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btstack_run_loop_embedded_get_time_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tick_get_tick_period_in_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btstack_run_loop_embedded.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>btstack_run_loop_embedded_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = btstack_run_loop_embedded_init &rArr; hal_tick_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tick_set_handler
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tick_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btstack_run_loop_embedded.o(.constdata)
</UL>
<P><STRONG><a name="[2f8]"></a>btstack_run_loop_embedded_reconstruct_higher_bits</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_reconstruct_higher_bits))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_execute_once
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_add_timer
</UL>

<P><STRONG><a name="[8f]"></a>btstack_run_loop_embedded_remove_data_source</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_remove_data_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btstack_run_loop_embedded_remove_data_source
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btstack_run_loop_embedded.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>btstack_run_loop_embedded_remove_timer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_remove_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btstack_run_loop_embedded_remove_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_execute_once
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btstack_run_loop_embedded.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>btstack_run_loop_embedded_set_timer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_set_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = btstack_run_loop_embedded_set_timer &rArr; btstack_run_loop_embedded_ticks_for_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_embedded_ticks_for_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btstack_run_loop_embedded.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>btstack_run_loop_embedded_tick_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_tick_handler))
<BR>[Address Reference Count : 1]<UL><LI> btstack_run_loop_embedded.o(i.btstack_run_loop_embedded_init)
</UL>
<P><STRONG><a name="[2d7]"></a>__log_unused</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, btstack_crypto.o(i.__log_unused))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_event_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_start
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_handle_encryption_result
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_handle_aes_engine_ready
</UL>

<P><STRONG><a name="[2cc]"></a>btstack_crypto_aes128_start</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, btstack_crypto.o(i.btstack_crypto_aes128_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_128
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_run
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_handle_aes_engine_ready
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_ccm_calc_aad_xn
</UL>

<P><STRONG><a name="[2cf]"></a>btstack_crypto_ccm_calc_aad_xn</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, btstack_crypto.o(i.btstack_crypto_ccm_calc_aad_xn))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = btstack_crypto_ccm_calc_aad_xn &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_min
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_endian_store_16
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_done
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_aes128_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_run
</UL>

<P><STRONG><a name="[2d2]"></a>btstack_crypto_ccm_handle_s0</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, btstack_crypto.o(i.btstack_crypto_ccm_handle_s0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = btstack_crypto_ccm_handle_s0 &rArr; btstack_crypto_done
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_done
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_handle_encryption_result
</UL>

<P><STRONG><a name="[2d3]"></a>btstack_crypto_ccm_handle_sn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, btstack_crypto.o(i.btstack_crypto_ccm_handle_sn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = btstack_crypto_ccm_handle_sn
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_min
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_handle_encryption_result
</UL>

<P><STRONG><a name="[2d4]"></a>btstack_crypto_ccm_next_block</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, btstack_crypto.o(i.btstack_crypto_ccm_next_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = btstack_crypto_ccm_next_block &rArr; btstack_crypto_done
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_min
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_done
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_handle_encryption_result
</UL>

<P><STRONG><a name="[2d5]"></a>btstack_crypto_ccm_setup_a_i</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, btstack_crypto.o(i.btstack_crypto_ccm_setup_a_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = btstack_crypto_ccm_setup_a_i &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_endian_store_16
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_run
</UL>

<P><STRONG><a name="[2d8]"></a>btstack_crypto_cmac_get_byte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, btstack_crypto.o(i.btstack_crypto_cmac_get_byte))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_handle_encryption_result
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_handle_aes_engine_ready
</UL>

<P><STRONG><a name="[2d6]"></a>btstack_crypto_cmac_handle_aes_engine_ready</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, btstack_crypto.o(i.btstack_crypto_cmac_handle_aes_engine_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_next_state
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_get_byte
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_aes128_start
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_run
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_start
</UL>

<P><STRONG><a name="[2da]"></a>btstack_crypto_cmac_handle_encryption_result</STRONG> (Thumb, 318 bytes, Stack size 64 bytes, btstack_crypto.o(i.btstack_crypto_cmac_handle_encryption_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = btstack_crypto_cmac_handle_encryption_result &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_pop
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_info_key
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_shift_left_by_one_bit_inplace
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_get_byte
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_handle_encryption_result
</UL>

<P><STRONG><a name="[2d9]"></a>btstack_crypto_cmac_next_state</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, btstack_crypto.o(i.btstack_crypto_cmac_next_state))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_handle_aes_engine_ready
</UL>

<P><STRONG><a name="[2db]"></a>btstack_crypto_cmac_shift_left_by_one_bit_inplace</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, btstack_crypto.o(i.btstack_crypto_cmac_shift_left_by_one_bit_inplace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btstack_crypto_cmac_shift_left_by_one_bit_inplace
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_handle_encryption_result
</UL>

<P><STRONG><a name="[2de]"></a>btstack_crypto_cmac_start</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, btstack_crypto.o(i.btstack_crypto_cmac_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_handle_aes_engine_ready
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_run
</UL>

<P><STRONG><a name="[2d1]"></a>btstack_crypto_done</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, btstack_crypto.o(i.btstack_crypto_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btstack_crypto_done
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_handle_encryption_result
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_ccm_next_block
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_ccm_handle_s0
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_ccm_calc_aad_xn
</UL>

<P><STRONG><a name="[45]"></a>btstack_crypto_event_handler</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, btstack_crypto.o(i.btstack_crypto_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = btstack_crypto_event_handler &rArr; btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_min
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_read_16
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_pop
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_get_first_item
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_halting_defer
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_run
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_handle_encryption_result
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btstack_crypto.o(i.btstack_crypto_init)
</UL>
<P><STRONG><a name="[2e0]"></a>btstack_crypto_handle_encryption_result</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, btstack_crypto.o(i.btstack_crypto_handle_encryption_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = btstack_crypto_handle_encryption_result &rArr; btstack_crypto_cmac_handle_encryption_result &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_128
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_get_first_item
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_done
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_handle_encryption_result
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_ccm_next_block
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_ccm_handle_sn
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_ccm_handle_s0
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_event_handler
</UL>

<P><STRONG><a name="[2cb]"></a>btstack_crypto_run</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, btstack_crypto.o(i.btstack_crypto_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = btstack_crypto_run &rArr; btstack_crypto_cmac_start &rArr; btstack_crypto_cmac_handle_aes_engine_ready &rArr; btstack_crypto_aes128_start &rArr; hci_send_cmd &rArr; hci_send_cmd_va_arg &rArr; hci_emit_transport_packet_sent &rArr; hci_emit_event &rArr; hci_dump_packet &rArr; printf_hexdump &rArr; char_for_high_nibble
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_min
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_get_first_item
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_get_state
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_can_send_command_packet_now
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_endian_store_16
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_linked_list_empty
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_start
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_cmac_handle_aes_engine_ready
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_ccm_setup_a_i
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_ccm_calc_aad_xn
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_aes128_start
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_random_generate
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_aes128_encrypt
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_crypto_event_handler
</UL>

<P><STRONG><a name="[2ed]"></a>__log_unused</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, btstack_memory_pool.o(i.__log_unused))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_memory_pool_free
</UL>

<P><STRONG><a name="[3b0]"></a>__log_unused</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, l2cap_signaling.o(i.__log_unused))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_create_signaling_internal
</UL>

<P><STRONG><a name="[3ae]"></a>l2cap_create_signaling_internal</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, l2cap_signaling.o(i.l2cap_create_signaling_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = l2cap_create_signaling_internal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_store_16
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_non_flushable_packet_boundary_flag_supported
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cap_create_signaling_le
</UL>

<P><STRONG><a name="[1e9]"></a>HWle_set_aes_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_security.o(i.HWle_set_aes_mode))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_HW_aes_encrypt_128
</UL>

<P><STRONG><a name="[1ea]"></a>hw_memcpy32</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, le_security.o(i.hw_memcpy32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hw_memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_HW_aes_encrypt_128
</UL>

<P><STRONG><a name="[1f3]"></a>HW_set_rx_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_test.o(i.HW_set_rx_mode))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Ctrl_Handle_Test_Mode_Event
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Test_Event_Complete
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Prep_For_LE_Test_Rx
</UL>

<P><STRONG><a name="[1ee]"></a>HW_set_slave</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_test.o(i.HW_set_slave))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Ctrl_Handle_Test_Mode_Event
</UL>

<P><STRONG><a name="[1f4]"></a>HWle_clear_tx_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, le_test.o(i.HWle_clear_tx_enable))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Test_Event_Begin
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Ctrl_Handle_Test_Mode_Event
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Test_Event_Complete
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LEtest_Packet_Send_Complete
</UL>

<P><STRONG><a name="[1fc]"></a>HWle_set_rx_filters_active</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, le_white_list.o(i.HWle_set_rx_filters_active))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEwl_Clear_White_List
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEwl_Add_Device_To_White_List
</UL>

<P><STRONG><a name="[1fd]"></a>hw_memcpy32</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, le_white_list.o(i.hw_memcpy32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hw_memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEwl_Remove_Device_From_White_List
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEwl_Add_Device_To_White_List
</UL>

<P><STRONG><a name="[396]"></a>__log_unused</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hci_transport_ram.o(i.__log_unused))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_transport_ram_send_packet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_transport_ram_receive_packet
</UL>

<P><STRONG><a name="[50]"></a>btstack_embedded_process</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hci_transport_ram.o(i.btstack_embedded_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = btstack_embedded_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_transport_ram.o(i.hci_transport_ram_open)
</UL>
<P><STRONG><a name="[16]"></a>dummy_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hci_transport_ram.o(i.dummy_handler))
<BR>[Address Reference Count : 1]<UL><LI> hci_transport_ram.o(.data)
</UL>
<P><STRONG><a name="[9b]"></a>hci_transport_ram_can_send_now</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hci_transport_ram.o(i.hci_transport_ram_can_send_now))
<BR>[Address Reference Count : 1]<UL><LI> hci_transport_ram.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>hci_transport_ram_close</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hci_transport_ram.o(i.hci_transport_ram_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hci_transport_ram_close &rArr; btstack_run_loop_disable_data_source_callbacks
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_remove_data_source
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_disable_data_source_callbacks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_transport_ram.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>hci_transport_ram_open</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hci_transport_ram.o(i.hci_transport_ram_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hci_transport_ram_open &rArr; btstack_run_loop_enable_data_source_callbacks
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_set_data_source_handler
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_enable_data_source_callbacks
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_run_loop_add_data_source
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Register_Generic_Dispatcher
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_transport_ram.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>hci_transport_ram_receive_packet</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, hci_transport_ram.o(i.hci_transport_ram_receive_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hci_transport_ram_receive_packet &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_transport_ram.o(i.hci_transport_ram_open)
</UL>
<P><STRONG><a name="[9a]"></a>hci_transport_ram_register_packet_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hci_transport_ram.o(i.hci_transport_ram_register_packet_handler))
<BR>[Address Reference Count : 1]<UL><LI> hci_transport_ram.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>hci_transport_ram_send_packet</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, hci_transport_ram.o(i.hci_transport_ram_send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = hci_transport_ram_send_packet &rArr; TRAhcit_Generic_Get_Rx_Buf &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__log_unused
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Get_Rx_Buf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAhcit_Generic_Commit_Rx_Buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_transport_ram.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>_Dispatch_HC_BB_Command</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, hc_cmd_disp.o(i._Dispatch_HC_BB_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _Dispatch_HC_BB_Command &rArr; HCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Set_Event_Mask
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Set_Host_Controller_To_Host_Flow_Control
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Host_Number_Of_Completed_Packets
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCfc_Host_Buffer_Size
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LMconfig_LM_Read_Local_Name
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTms_Request_HC_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>_Dispatch_Info_Command</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, hc_cmd_disp.o(i._Dispatch_Info_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _Dispatch_Info_Command &rArr; HCeg_Command_Complete_Event &rArr; BTq_Enqueue &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>_Dispatch_Invalid_OGF_Command</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hc_cmd_disp.o(i._Dispatch_Invalid_OGF_Command))
<BR>[Address Reference Count : 1]<UL><LI> hc_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>_Dispatch_LE_Command</STRONG> (Thumb, 524 bytes, Stack size 88 bytes, hc_cmd_disp.o(i._Dispatch_LE_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _Dispatch_LE_Command &rArr; LEsecurity_Long_Term_Key_Request_Reply &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Get_LE_Features_Ref
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Set_Advertise_Enable
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Is_Valid_Handle
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Link_Id
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Link_Entry
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfreq_Read_Channel_Map
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEwl_Clear_White_List
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Set_Random_Address
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Set_Event_Mask
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Read_Supported_States
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconfig_Is_Features_Encryption_Supported
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Set_Scan_Response_Data
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Set_Advertising_Params
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Set_Advertising_Data
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Get_Advertising_Enable
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEadv_Get_Advertising_Channel_Tx_Power
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEwl_Remove_Device_From_White_List
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEwl_Read_White_List_Size
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEwl_Can_I_Modify_White_Lists
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEwl_Add_Device_To_White_List
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Transmitter_Test
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Test_End
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtest_Receiver_Test
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_Rand
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_Long_Term_Key_Request_Reply
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_Long_Term_Key_Request_Negative_Reply
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEsecurity_Encrypt
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEscan_Get_Scan_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>_Dispatch_Link_Control_Command</STRONG> (Thumb, 332 bytes, Stack size 128 bytes, hc_cmd_disp.o(i._Dispatch_Link_Control_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _Dispatch_Link_Control_Command &rArr; LEconnection_Read_Remote_Version_Info &rArr; LEllc_Encode_PDU &rArr; HCeg_Hardware_Error_Event &rArr; HCeg_Prevent_HCI_Event_Queue_from_Overfill &rArr; HCeg_Generate_Event &rArr;  BTq_Enqueue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Generate_Event
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Read_Remote_Version_Info
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Is_Valid_Handle
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_P_Connection
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Link_Id
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Find_Link_Entry
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEconnection_Disconnect
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Status_Event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCeg_Command_Complete_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hc_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>_Dispatch_Link_Policy_Command</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hc_cmd_disp.o(i._Dispatch_Link_Policy_Command))
<BR>[Address Reference Count : 1]<UL><LI> hc_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>_Dispatch_Local_Status_Command</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hc_cmd_disp.o(i._Dispatch_Local_Status_Command))
<BR>[Address Reference Count : 1]<UL><LI> hc_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>_Dispatch_Test_Command</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hc_cmd_disp.o(i._Dispatch_Test_Command))
<BR>[Address Reference Count : 1]<UL><LI> hc_cmd_disp.o(.constdata)
</UL>
<P><STRONG><a name="[215]"></a>HCIparam_Get_Uint16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tc_cmd_disp.o(i.HCIparam_Get_Uint16))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCI_Dispatch_Prop_Command
</UL>

<P><STRONG><a name="[44f]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[44d]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[e8]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[3a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[f6]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[f9]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[fd]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[f1]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[cd]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ce]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
